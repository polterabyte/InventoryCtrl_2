# PRD: Фаза 9 - Улучшение безопасности и аутентификации
# Inventory Control System

## Обзор
Данный PRD описывает улучшения безопасности и аутентификации для системы управления инвентарем Inventory Control System. Основная цель - повысить безопасность системы, добавить расширенный аудит и улучшить пользовательский опыт аутентификации.

## Текущее состояние
- ✅ JWT аутентификация реализована
- ✅ Ролевая модель (Admin, User, Manager) работает
- ✅ Базовая система аудита существует
- ❌ Отсутствует Refresh Token механизм
- ❌ Ограниченный аудит действий пользователей
- ❌ Нет Rate Limiting для API

## Цели и задачи

### 1. JWT Refresh Token система
**Цель**: Улучшить безопасность и пользовательский опыт за счет автоматического обновления токенов

**Требования**:
- Добавить RefreshToken в модель User
- Создать endpoint /api/auth/refresh для обновления токенов
- Реализовать автоматическое обновление токенов на клиенте
- Добавить логику отзыва refresh токенов при logout
- Настроить время жизни access token (15 минут) и refresh token (7 дней)

**Критерии приемки**:
- Пользователь остается авторизованным без повторного входа в течение 7 дней
- Refresh токены можно отозвать при необходимости
- Система корректно обрабатывает истечение токенов

### 2. Расширенный аудит действий
**Цель**: Обеспечить полную трассируемость действий пользователей в системе

**Требования**:
- Расширить модель AuditLog для записи всех операций CRUD
- Добавить детальное логирование изменений в ProductHistory
- Реализовать аудит для всех контроллеров (Product, Category, Manufacturer, etc.)
- Добавить возможность просмотра истории изменений товаров
- Создать endpoint для получения аудит-логов с фильтрацией

**Критерии приемки**:
- Все действия пользователей записываются в аудит-лог
- Можно проследить полную историю изменений любого товара
- Аудит-логи доступны через API с пагинацией и фильтрацией

### 3. Rate Limiting и валидация
**Цель**: Защитить API от злоупотреблений и улучшить валидацию данных

**Требования**:
- Реализовать Rate Limiting для API endpoints
- Настроить разные лимиты для разных ролей пользователей
- Улучшить валидацию входных данных с детальными сообщениями об ошибках
- Добавить CORS политики по ролям пользователей
- Реализовать защиту от CSRF атак

**Критерии приемки**:
- API защищен от DDoS атак и злоупотреблений
- Валидация данных работает корректно с понятными сообщениями
- CORS настроен безопасно для разных ролей

## Технические требования

### Backend (ASP.NET Core 9)
- Использовать ASP.NET Core Rate Limiting middleware
- Расширить модель User для поддержки RefreshToken
- Обновить AuthController для работы с refresh токенами
- Добавить AuditService для централизованного аудита
- Настроить FluentValidation для улучшенной валидации

### Frontend (Blazor WebAssembly)
- Обновить AuthenticationService для работы с refresh токенами
- Добавить автоматическое обновление токенов
- Реализовать обработку ошибок аутентификации
- Добавить страницу для просмотра аудит-логов

### База данных
- Добавить поле RefreshToken в таблицу Users
- Расширить таблицу AuditLogs дополнительными полями
- Добавить индексы для производительности аудит-запросов

## Приоритеты
1. **Высокий**: JWT Refresh Token система
2. **Высокий**: Расширенный аудит для критических операций
3. **Средний**: Rate Limiting и валидация
4. **Низкий**: Дополнительные CORS политики

## Временные рамки
- **Общая продолжительность**: 2-3 недели
- **JWT Refresh Token**: 1 неделя
- **Расширенный аудит**: 1 неделя  
- **Rate Limiting и валидация**: 3-5 дней

## Критерии успеха
- Пользователи могут работать без повторного входа в течение 7 дней
- Все действия пользователей полностью аудируются
- API защищен от злоупотреблений
- Система соответствует стандартам безопасности для enterprise приложений
