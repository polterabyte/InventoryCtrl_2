{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Design index strategy for inventory tables",
        "description": "Catalog the actual read/write patterns hitting InventoryTransactions, Products, and AuditLogs; profile high cost queries; propose composite indexes with selectivity rationale and measurement plan.",
        "details": "",
        "testStrategy": "",
        "status": "in-progress",
        "dependencies": [],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Catalog read/write patterns",
            "description": "Analyze and document the actual read and write patterns for InventoryTransactions, Products, and AuditLogs.",
            "dependencies": [],
            "details": "Focus on identifying the frequency and types of queries being executed against the inventory tables.\n<info added on 2025-09-26T15:30:16.069Z>\nCataloged read/write patterns across controllers/services and drafted index strategy. Key filters include: InventoryTransactions by ProductId, WarehouseId, Type, Date; Products by CategoryId, ManufacturerId, IsActive + LIKE on Name/SKU; AuditLogs by UserId, EntityName+EntityId, Timestamp. Next: profile high-cost queries (1.2). See docs/index-strategy.md for details and rationale.\n</info added on 2025-09-26T15:30:16.069Z>",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Profile high cost queries",
            "description": "Identify and profile the high cost queries affecting performance in the inventory tables.",
            "dependencies": [],
            "details": "Use query execution plans and performance metrics to determine which queries are consuming the most resources.\n<info added on 2025-09-26T15:33:07.761Z>\nPrepared baseline profiling scripts for PostgreSQL. See scripts/sql/measure-before.sql and docs/index-strategy.md (How to run profiling). Next: execute against staging DB, attach EXPLAIN ANALYZE outputs, and summarize hotspots to guide index DDL for task #2.\n</info added on 2025-09-26T15:33:07.761Z>\n<info added on 2025-09-26T15:35:20.866Z>\nRan baseline profiling inside Docker container 'inventory-postgres-staging'. Saved EXPLAIN outputs to .ai-temp/measure-before.out. Hotspot: AuditLogs query by (EntityName='Product', EntityId='42') performs Seq Scan (rows removed ~6750) â€” requires composite index (EntityName, EntityId). Other patterns look acceptable with existing single-column indexes but benefit from composites (e.g., (ProductId, Date)).\n</info added on 2025-09-26T15:35:20.866Z>",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 3,
            "title": "Propose composite indexes",
            "description": "Develop a proposal for composite indexes based on the cataloged patterns and profiled queries.",
            "dependencies": [],
            "details": "Include rationale for each proposed index focusing on selectivity and performance improvement.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 4,
            "title": "Document selectivity rationale",
            "description": "Create documentation explaining the rationale behind the selectivity of the proposed composite indexes.",
            "dependencies": [],
            "details": "Provide examples and metrics to support the proposed index strategy.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 5,
            "title": "Create measurement plan",
            "description": "Develop a plan to measure the performance impact of the proposed indexes once implemented.",
            "dependencies": [],
            "details": "Outline key performance indicators and benchmarks to assess the effectiveness of the new indexes.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          }
        ]
      },
      {
        "id": 2,
        "title": "Add EF migration for critical indexes",
        "description": "Create an EF Core migration applying the approved indexes, adjust DbContext configurations if needed, and capture before/after performance metrics for key queries. Performance indexes have been applied in Docker Postgres via scripts/sql/apply-indexes.sql, and significant speedups have been verified with scripts/sql/measure-after.sql. Key improvements include InventoryTransactions queries using new composite indexes with Index Scan/Index Only Scan, and AuditLogs (EntityName, EntityId) now utilizing an index instead of Seq Scan.",
        "status": "in-progress",
        "dependencies": [
          "1"
        ],
        "priority": "high",
        "details": "See .ai-temp/measure-before.out and .ai-temp/measure-after.out for detailed performance metrics.",
        "testStrategy": "Ensure that the migration is applied correctly and that performance improvements are validated against the captured metrics.",
        "subtasks": [
          {
            "id": 1,
            "title": "Create EF Core Migration",
            "description": "Generate the EF Core migration script to apply the approved indexes.",
            "status": "pending",
            "dependencies": [],
            "details": "Use the EF Core tools to scaffold a new migration that includes the necessary index changes.",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Adjust DbContext Configurations",
            "description": "Modify the DbContext configurations if necessary to accommodate the new indexes.",
            "status": "pending",
            "dependencies": [],
            "details": "Review the DbContext class and ensure that it reflects the changes made in the migration.",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 3,
            "title": "Capture Performance Metrics",
            "description": "Collect performance metrics for key queries before and after applying the migration.",
            "status": "pending",
            "dependencies": [],
            "details": "Identify key queries, run them to gather baseline metrics, and prepare for post-migration comparison.",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 4,
            "title": "Test the Migration",
            "description": "Run tests to ensure the migration is applied correctly and performance metrics are as expected.",
            "status": "pending",
            "dependencies": [],
            "details": "Perform unit tests and integration tests to validate the migration and its impact on performance.",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 5,
            "title": "Verify Performance Improvements",
            "description": "Review the performance metrics captured in .ai-temp/measure-before.out and .ai-temp/measure-after.out to confirm the effectiveness of the applied indexes.",
            "status": "pending",
            "dependencies": [],
            "details": "Ensure that the observed speedups align with the expected improvements from the new indexes.",
            "testStrategy": "",
            "parentId": "undefined"
          }
        ]
      },
      {
        "id": 3,
        "title": "Implement quantity reconciliation tooling",
        "description": "Build a repeatable script/process to compare Product.Quantity with totals derived from InventoryTransactions, flag discrepancies, and document remediation steps.",
        "details": "",
        "testStrategy": "",
        "status": "in-progress",
        "dependencies": [],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Design the reconciliation script",
            "description": "Create a blueprint for the script that will automate the quantity reconciliation process.",
            "dependencies": [],
            "details": "Outline the logic and structure of the script, including input parameters and expected outputs.\n<info added on 2025-09-26T15:42:03.406Z>\nAdded SQL reconciliation report: scripts/sql/reconcile-quantities.sql. Compares Products.Quantity with vw_product_on_hand computed values and outputs delta for top mismatches. Next: run inside Docker and attach report; propose remediation steps (adjustment transactions vs manual fix).\n</info added on 2025-09-26T15:42:03.406Z>",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Implement quantity comparison logic",
            "description": "Develop the functionality to compare Product.Quantity with totals from InventoryTransactions.",
            "dependencies": [],
            "details": "Write the code that retrieves and compares the quantities, ensuring accuracy in the comparison.\n<info added on 2025-09-26T15:42:26.295Z>\nExecuted reconciliation in Docker. Output saved to .ai-temp/reconcile.out. Current sample shows no mismatch (delta=0) for sample product; the script will be kept for scheduled checks. Next steps include drafting a remediation playbook, preferring to generate InventoryTransactions adjustments over directly editing Products.Quantity.\n</info added on 2025-09-26T15:42:26.295Z>",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 3,
            "title": "Flag discrepancies",
            "description": "Create a mechanism to identify and flag any discrepancies found during the comparison.",
            "dependencies": [],
            "details": "Implement logic to log discrepancies and categorize them based on severity.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 4,
            "title": "Document remediation steps",
            "description": "Draft documentation outlining the steps to remediate any discrepancies identified.",
            "dependencies": [],
            "details": "Provide clear instructions and guidelines for addressing discrepancies, including responsible parties.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          }
        ]
      },
      {
        "id": 4,
        "title": "Design request domain entities",
        "description": "Define Request, RequestItem/InventoryTransaction enhancements, status history, and pricing fields to align with existing transaction workflow; produce ERD and validation rules. Added Request domain entities and migration: Models/Request.cs, Models/RequestHistory.cs, extended InventoryTransaction with RequestId/UnitPrice/TotalPrice, updated AppDbContext DbSets. Migration 20250926154800_RequestDomain creates Requests + RequestHistories and adds columns/FK to InventoryTransactions.",
        "status": "in-progress",
        "dependencies": [],
        "priority": "high",
        "details": "",
        "testStrategy": "",
        "subtasks": [
          {
            "id": 1,
            "title": "Define Request Entity",
            "description": "Outline the structure and fields for the Request entity to align with the transaction workflow.",
            "status": "pending",
            "dependencies": [],
            "details": "Include necessary attributes such as request ID, user ID, status, and timestamps.",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Enhance RequestItem/InventoryTransaction Model",
            "description": "Identify and implement enhancements to the existing RequestItem and InventoryTransaction models.",
            "status": "pending",
            "dependencies": [],
            "details": "Focus on adding fields that capture additional transaction details and status history.",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Produce Entity Relationship Diagram (ERD)",
            "description": "Create an ERD that visually represents the relationships between the Request, RequestItem, and InventoryTransaction entities.",
            "status": "pending",
            "dependencies": [],
            "details": "Ensure the ERD reflects all defined entities and their relationships accurately.",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Establish Validation Rules",
            "description": "Define validation rules for the Request and RequestItem entities to ensure data integrity.",
            "status": "pending",
            "dependencies": [],
            "details": "Include rules for required fields, data types, and any business logic constraints.",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Document Domain Entities",
            "description": "Create comprehensive documentation for the defined domain entities and their enhancements.",
            "status": "pending",
            "dependencies": [],
            "details": "Include descriptions, examples, and usage scenarios for each entity and its fields.",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Implement Services/Workflow",
            "description": "Create the service layer for managing the request lifecycle and integrate it with the existing workflow.",
            "status": "pending",
            "dependencies": [],
            "details": "Ensure the service enforces transition rules and coordinates updates to InventoryTransactions.",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Update API for Requests",
            "description": "Integrate the new Request domain entities into the API, ensuring CRUD operations and workflow actions are covered.",
            "status": "pending",
            "dependencies": [],
            "details": "Update the RequestsController and ensure proper authorization and logging.",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 5,
        "title": "Create EF migrations for request domain",
        "description": "Add new tables and columns (Request, RequestItems/RequestId on InventoryTransactions, pricing fields, history) with constraints and seed adjustments; update AppDbContext and DTO projections.",
        "details": "",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [
          "4"
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Add new Request table",
            "description": "Create the Request table in the database schema with necessary fields and constraints.",
            "dependencies": [],
            "details": "Define columns such as RequestId, RequestDate, and Status. Ensure primary key and any required constraints are set.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Add RequestItems table",
            "description": "Create the RequestItems table and establish a foreign key relationship with the Request table.",
            "dependencies": [],
            "details": "Define columns such as RequestItemId, RequestId, ProductId, and Quantity. Set up foreign key constraints to link to the Request table.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 3,
            "title": "Update InventoryTransactions for RequestId",
            "description": "Modify the InventoryTransactions table to include a RequestId column and establish the necessary constraints.",
            "dependencies": [],
            "details": "Add the RequestId column to InventoryTransactions and ensure it can reference the Request table. Update constraints accordingly.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 4,
            "title": "Update AppDbContext and DTO projections",
            "description": "Modify the AppDbContext to include the new tables and update DTO projections to reflect the changes.",
            "dependencies": [],
            "details": "Ensure that the new Request and RequestItems tables are included in the DbContext. Update any relevant DTOs to include new fields.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          }
        ]
      },
      {
        "id": 6,
        "title": "Implement request management service",
        "description": "Create domain/service layer for request lifecycle (Draftâ†’Submittedâ†’Approvedâ†’Receivedâ†’Installedâ†’Completed/Cancelled), enforce transition rules, and coordinate InventoryTransactions updates without breaking existing flows.",
        "details": "",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [
          "5"
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Design service layer architecture",
            "description": "Outline the architecture for the request management service layer, including state transitions and interactions with other components.",
            "dependencies": [],
            "details": "Create diagrams and documentation to visualize the service layer structure and its components.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Implement state transition rules",
            "description": "Develop the logic to enforce transition rules between different states of the request lifecycle.",
            "dependencies": [],
            "details": "Ensure that transitions are validated according to business rules and document the rules clearly.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 3,
            "title": "Coordinate InventoryTransactions updates",
            "description": "Implement the logic to update InventoryTransactions in accordance with the request lifecycle changes.",
            "dependencies": [],
            "details": "Ensure that updates do not disrupt existing flows and maintain data integrity.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 4,
            "title": "Develop unit tests for service layer",
            "description": "Create unit tests to validate the functionality of the service layer and its transition rules.",
            "dependencies": [],
            "details": "Focus on edge cases and ensure comprehensive coverage of the service layer's behavior.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 5,
            "title": "Conduct integration testing",
            "description": "Perform integration testing to ensure that the request management service works seamlessly with other components.",
            "dependencies": [],
            "details": "Test the entire request lifecycle and its interactions with InventoryTransactions to identify any issues.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          }
        ]
      },
      {
        "id": 7,
        "title": "Expose request API endpoints",
        "description": "Add RequestsController endpoints for CRUD and workflow actions, integrate with TransactionController updates, update DTOs, and ensure authorization policies and audit logging cover new operations.",
        "details": "",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [
          "6"
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Add CRUD Endpoints to RequestsController",
            "description": "Implement the Create, Read, Update, and Delete endpoints in the RequestsController.",
            "dependencies": [],
            "details": "Ensure that each endpoint adheres to RESTful principles and returns appropriate HTTP status codes.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Integrate with TransactionController",
            "description": "Update the TransactionController to handle interactions with the new RequestsController endpoints.",
            "dependencies": [],
            "details": "Ensure that the integration maintains data consistency and adheres to existing transaction workflows.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 3,
            "title": "Update Data Transfer Objects (DTOs)",
            "description": "Modify existing DTOs or create new ones to support the data structure required by the RequestsController endpoints.",
            "dependencies": [],
            "details": "Ensure that DTOs are validated and mapped correctly to the domain models.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 4,
            "title": "Implement Authorization Policies",
            "description": "Define and implement authorization policies for the new CRUD operations in the RequestsController.",
            "dependencies": [],
            "details": "Ensure that only authorized users can access or modify request data.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 5,
            "title": "Set Up Audit Logging",
            "description": "Implement audit logging for all operations in the RequestsController to track changes and access.",
            "dependencies": [],
            "details": "Ensure that audit logs capture sufficient detail to trace actions performed on request data.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          }
        ]
      },
      {
        "id": 10,
        "title": "Extend notifications for request workflow",
        "description": "Update NotificationRule, NotificationService, and SignalR hubs to emit events for each request status change, including subscriber preferences and localization.",
        "details": "",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [
          "6",
          "7"
        ],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Update NotificationRule",
            "description": "Modify the NotificationRule to include new events for each request status change.",
            "dependencies": [],
            "details": "Ensure that the NotificationRule can handle subscriber preferences and localization for notifications.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Modify NotificationService",
            "description": "Adjust the NotificationService to emit events based on the updated NotificationRule.",
            "dependencies": [],
            "details": "Implement logic to trigger notifications for different request status changes.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 3,
            "title": "Adjust SignalR hubs",
            "description": "Update SignalR hubs to broadcast notifications for request status changes.",
            "dependencies": [],
            "details": "Ensure that the SignalR hubs are configured to send messages to the appropriate subscribers.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 4,
            "title": "Test notifications",
            "description": "Conduct thorough testing of the notification system to ensure all changes work as expected.",
            "dependencies": [],
            "details": "Test various scenarios including different request statuses, subscriber preferences, and localization settings.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          }
        ]
      },
      {
        "id": 11,
        "title": "Build Blazor UI for request workflow",
        "description": "Create Blazor pages/components for request list, detail, approvals, and history; wire to new APIs, integrate validation and real-time updates from SignalR.",
        "details": "",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [
          "7",
          "10"
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Request List Component",
            "description": "Develop the Blazor component for displaying the list of requests.",
            "dependencies": [],
            "details": "The component should allow users to view, filter, and sort requests.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Create Request Detail Component",
            "description": "Develop the Blazor component for displaying the details of a selected request.",
            "dependencies": [],
            "details": "This component should show all relevant information about the request and allow for editing.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 3,
            "title": "Create Approvals Component",
            "description": "Develop the Blazor component for handling request approvals.",
            "dependencies": [],
            "details": "This component should facilitate the approval process and display approval history.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 4,
            "title": "Wire APIs to Components",
            "description": "Integrate the newly created components with the relevant API endpoints.",
            "dependencies": [],
            "details": "Ensure that data is fetched and submitted correctly to the backend APIs.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 5,
            "title": "Integrate Validation and Real-time Updates",
            "description": "Implement validation for user inputs and set up SignalR for real-time updates.",
            "dependencies": [],
            "details": "Ensure that user inputs are validated and that the UI updates in real-time with SignalR.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          }
        ]
      },
      {
        "id": 12,
        "title": "Benchmark view performance before materialization",
        "description": "Collect baseline timings for ProductPending/OnHand/Installed views under load, simulate expected workflow traffic, and document criteria/tradeoffs for moving to materialized views.",
        "details": "",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [
          "7"
        ],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Collect baseline timings for views",
            "description": "Measure and record the baseline performance timings for ProductPending, OnHand, and Installed views under load conditions.",
            "dependencies": [],
            "details": "Use appropriate tools to gather performance metrics and ensure data accuracy.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Simulate expected workflow traffic",
            "description": "Create a simulation of the expected workflow traffic to test the views under realistic conditions.",
            "dependencies": [],
            "details": "Develop scripts or use load testing tools to mimic user interactions and traffic patterns.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 3,
            "title": "Document criteria for materialized views",
            "description": "Outline the criteria and tradeoffs for transitioning to materialized views based on the collected data.",
            "dependencies": [],
            "details": "Include performance metrics, expected benefits, and potential drawbacks in the documentation.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          }
        ]
      },
      {
        "id": 13,
        "title": "Expand automated tests for requests",
        "description": "Add unit, integration, and UI tests covering request lifecycle, SignalR updates, and reconciliation safeguards; integrate into existing test pipelines.",
        "details": "",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [
          "6",
          "7",
          "11"
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Add Unit Tests",
            "description": "Develop unit tests covering the request lifecycle and SignalR updates.",
            "dependencies": [],
            "details": "Focus on testing individual components and their interactions within the request lifecycle.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Add Integration Tests",
            "description": "Create integration tests to validate the interaction between different components in the request system.",
            "dependencies": [],
            "details": "Ensure that the integration tests cover the complete flow of requests and their updates.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 3,
            "title": "Add UI Tests",
            "description": "Implement UI tests to verify the user interface interactions related to requests.",
            "dependencies": [],
            "details": "Focus on testing the UI components that handle request submissions and updates.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 4,
            "title": "Integrate Tests into Pipelines",
            "description": "Integrate the newly created tests into the existing CI/CD pipelines.",
            "dependencies": [],
            "details": "Ensure that all tests run automatically during the build process to maintain code quality.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          }
        ]
      },
      {
        "id": 14,
        "title": "Plan data migration for existing pending transactions",
        "description": "Assess current InventoryTransactions of type Pending, map them into the new Request model, and prepare migration scripts/backfill steps with rollback strategy.",
        "details": "",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [
          "5"
        ],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Assess Current Inventory Transactions",
            "description": "Review and analyze the existing InventoryTransactions of type Pending to understand their structure and data.",
            "dependencies": [],
            "details": "Gather data on all pending transactions, including fields and current usage.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Map Transactions to New Request Model",
            "description": "Create a mapping document that outlines how each field in the current InventoryTransactions corresponds to the new Request model.",
            "dependencies": [
              "14.1"
            ],
            "details": "Identify and document the transformation rules for each field.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 3,
            "title": "Prepare Migration Scripts",
            "description": "Develop scripts to migrate data from the current InventoryTransactions to the new Request model, including backfill steps.",
            "dependencies": [
              "14.2"
            ],
            "details": "Ensure scripts handle data integrity and include logging for monitoring.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 4,
            "title": "Plan Rollback Strategy",
            "description": "Design a rollback strategy to revert changes in case of migration failure, ensuring data safety.",
            "dependencies": [
              "14.3"
            ],
            "details": "Outline steps to restore data and validate post-rollback integrity.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          }
        ]
      },
      {
        "id": 15,
        "title": "Update documentation for request system",
        "description": "Refresh README, docs, and operational runbooks to cover new request workflow, reconciliation tooling, and deployment considerations.",
        "details": "",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [
          "6",
          "7",
          "11",
          "13"
        ],
        "priority": "medium",
        "subtasks": [
          {
            "id": 1,
            "title": "Refresh README",
            "description": "Update the README file to reflect the new request workflow and any relevant changes in the system.",
            "dependencies": [],
            "details": "Ensure that the README includes clear instructions on the new request process and highlights any new tooling introduced.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 2,
            "title": "Update operational runbooks",
            "description": "Revise the operational runbooks to include updated procedures for the new reconciliation tooling and deployment considerations.",
            "dependencies": [],
            "details": "Focus on documenting the steps for using the reconciliation tooling and any changes in deployment processes.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          },
          {
            "id": 3,
            "title": "Ensure documentation covers new workflows",
            "description": "Review and update all relevant documentation to ensure it accurately describes the new request workflows.",
            "dependencies": [],
            "details": "Cross-reference existing documentation with the new workflows to identify and fill any gaps.",
            "status": "pending",
            "testStrategy": "",
            "parentId": "undefined"
          }
        ]
      }
    ],
    "metadata": {
      "version": "1.0.0",
      "lastModified": "2025-09-26T15:45:05.184Z",
      "taskCount": 13,
      "completedCount": 0,
      "tags": [
        "master"
      ],
      "created": "2025-09-26T15:45:07.086Z",
      "description": "Tasks for master context"
    }
  }
}