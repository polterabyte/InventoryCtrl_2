# ДИАГРАММА ПРОЦЕССА ДЕПЛОЯ

┌─────────────────────────────────────────────────────────────────┐
│                    НАЧАЛО ДЕПЛОЯ                                │
│  deploy-production.ps1 | deploy-staging.ps1 | deploy-test.ps1  │
└─────────────────────┬───────────────────────────────────────────┘
                      │
                      ▼
┌─────────────────────────────────────────────────────────────────┐
│                    ШАГ 1: ИНИЦИАЛИЗАЦИЯ                         │
│  • Принимает параметр окружения (production/staging/test)       │
│  • Выводит сообщение о начале деплоя                            │
└─────────────────────┬───────────────────────────────────────────┘
                      │
                      ▼
┌─────────────────────────────────────────────────────────────────┐
│                ШАГ 2: ПРОВЕРКА VAPID КЛЮЧЕЙ                     │
│  • Проверяет существование env.[environment] файла              │
│  • Читает содержимое файла                                      │
│  • Проверяет наличие пустых VAPID ключей                        │
│  • Если ключи не настроены → запускает generate-vapid-*.ps1    │
└─────────────────────┬───────────────────────────────────────────┘
                      │
                      ▼
┌─────────────────────────────────────────────────────────────────┐
│            ШАГ 3: ЗАГРУЗКА ПЕРЕМЕННЫХ ОКРУЖЕНИЯ                 │
│  • Читает env.[environment] файл построчно                      │
│  • Пропускает комментарии (#)                                   │
│  • Извлекает пары ключ=значение                                 │
│  • Устанавливает переменные окружения для PowerShell            │
└─────────────────────┬───────────────────────────────────────────┘
                      │
                      ▼
┌─────────────────────────────────────────────────────────────────┐
│            ШАГ 4: ОСТАНОВКА СУЩЕСТВУЮЩИХ КОНТЕЙНЕРОВ            │
│  • Выполняет: docker-compose -f docker-compose.[env].yml down  │
│  • Останавливает и удаляет все контейнеры                       │
│  • Освобождает порты и ресурсы                                  │
└─────────────────────┬───────────────────────────────────────────┘
                      │
                      ▼
┌─────────────────────────────────────────────────────────────────┐
│            ШАГ 5: СБОРКА И ЗАПУСК СЕРВИСОВ                      │
│  • Выполняет: docker-compose -f docker-compose.[env].yml up -d --build │
│  • --build: пересобирает Docker образы                          │
│  • -d: запускает в фоновом режиме                               │
│  • Запускает: PostgreSQL + API + Web + Nginx                   │
└─────────────────────┬───────────────────────────────────────────┘
                      │
                      ▼
┌─────────────────────────────────────────────────────────────────┐
│            ШАГ 6: ОЖИДАНИЕ ГОТОВНОСТИ СЕРВИСОВ                 │
│  • Ждет 30 секунд (Start-Sleep -Seconds 30)                    │
│  • Позволяет базам данных инициализироваться                    │
│  • Дает время на выполнение health checks                       │
└─────────────────────┬───────────────────────────────────────────┘
                      │
                      ▼
┌─────────────────────────────────────────────────────────────────┐
│            ШАГ 7: ПРОВЕРКА ЗДОРОВЬЯ СЕРВИСОВ                    │
│  • Отправляет GET запрос на https://[domain]/health             │
│  • Проверяет ответ API                                          │
│  • Выводит результат: ✅ здоров / ❌ нездоров                   │
└─────────────────────┬───────────────────────────────────────────┘
                      │
                      ▼
┌─────────────────────────────────────────────────────────────────┐
│            ШАГ 8: ПОКАЗ ЗАПУЩЕННЫХ КОНТЕЙНЕРОВ                  │
│  • Выполняет: docker ps --filter "name=inventory"              │
│  • Показывает список всех запущенных контейнеров                │
│  • Фильтрует только inventory контейнеры                        │
└─────────────────────┬───────────────────────────────────────────┘
                      │
                      ▼
┌─────────────────────────────────────────────────────────────────┐
│                    ШАГ 9: ЗАВЕРШЕНИЕ                            │
│  • Выводит сообщение об успешном завершении                     │
│  • Показывает URL-адреса:                                       │
│    - https://[domain] (приложение)                              │
│    - https://[domain]/api (API)                                 │
│    - https://[domain]/health (проверка здоровья)                │
└─────────────────────┬───────────────────────────────────────────┘
                      │
                      ▼
┌─────────────────────────────────────────────────────────────────┐
│                    КОНЕЦ ДЕПЛОЯ                                 │
└─────────────────────────────────────────────────────────────────┘

# РАЗЛИЧИЯ МЕЖДУ ОКРУЖЕНИЯМИ

┌─────────────┬─────────────────┬─────────────────┬─────────────────┐
│ ОКРУЖЕНИЕ   │     ДОМЕН       │ DOCKER COMPOSE  │ ENV ФАЙЛ        │
├─────────────┼─────────────────┼─────────────────┼─────────────────┤
│ Production  │ warehouse.cuby  │ docker-compose. │ env.production  │
│             │                 │ prod.yml        │                 │
├─────────────┼─────────────────┼─────────────────┼─────────────────┤
│ Staging     │ staging.        │ docker-compose. │ env.staging     │
│             │ warehouse.cuby  │ staging.yml     │                 │
├─────────────┼─────────────────┼─────────────────┼─────────────────┤
│ Test        │ test.warehouse. │ docker-compose. │ env.test        │
│             │ cuby            │ test.yml        │                 │
└─────────────┴─────────────────┴─────────────────┴─────────────────┘

# КОМАНДЫ ЗАПУСКА

.\deploy-production.ps1    # Production деплой
.\deploy-staging.ps1       # Staging деплой  
.\deploy-test.ps1          # Test деплой
