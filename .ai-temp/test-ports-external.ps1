# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤ –∏–∑–≤–Ω–µ
param(
    [Parameter(Mandatory=$true)]
    [string]$ServerIP,
    
    [Parameter(Mandatory=$false)]
    [int[]]$Ports = @(80, 5000)
)

Write-Host "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ $ServerIP" -ForegroundColor Cyan
Write-Host ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ Test-NetConnection
function Test-PortWithNetConnection {
    param([string]$ComputerName, [int]$Port)
    
    try {
        $result = Test-NetConnection -ComputerName $ComputerName -Port $Port -InformationLevel Quiet
        return $result
    } catch {
        return $false
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞ —á–µ—Ä–µ–∑ telnet
function Test-PortWithTelnet {
    param([string]$Hostname, [int]$Port)
    
    try {
        $tcpClient = New-Object System.Net.Sockets.TcpClient
        $connect = $tcpClient.BeginConnect($Hostname, $Port, $null, $null)
        $wait = $connect.AsyncWaitHandle.WaitOne(3000, $false)
        
        if ($wait) {
            $tcpClient.EndConnect($connect)
            $tcpClient.Close()
            return $true
        } else {
            $tcpClient.Close()
            return $false
        }
    } catch {
        return $false
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ IP
function Get-ExternalIP {
    try {
        $response = Invoke-WebRequest -Uri "https://api.ipify.org" -TimeoutSec 10
        return $response.Content.Trim()
    } catch {
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å"
    }
}

Write-Host "üìç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ:" -ForegroundColor Yellow
$externalIP = Get-ExternalIP
Write-Host "   –í–Ω–µ—à–Ω–∏–π IP: $externalIP" -ForegroundColor White
Write-Host "   –õ–æ–∫–∞–ª—å–Ω—ã–π IP: $ServerIP" -ForegroundColor White
Write-Host ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–æ—Ä—Ç
foreach ($port in $Ports) {
    Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ $port..." -ForegroundColor Yellow
    
    # –ú–µ—Ç–æ–¥ 1: Test-NetConnection
    $netConnectionResult = Test-PortWithNetConnection -ComputerName $ServerIP -Port $port
    Write-Host "   Test-NetConnection: $(if ($netConnectionResult) { '‚úÖ –û—Ç–∫—Ä—ã—Ç' } else { '‚ùå –ó–∞–∫—Ä—ã—Ç' })" -ForegroundColor $(if ($netConnectionResult) { 'Green' } else { 'Red' })
    
    # –ú–µ—Ç–æ–¥ 2: TcpClient
    $tcpClientResult = Test-PortWithTelnet -Hostname $ServerIP -Port $port
    Write-Host "   TcpClient: $(if ($tcpClientResult) { '‚úÖ –û—Ç–∫—Ä—ã—Ç' } else { '‚ùå –ó–∞–∫—Ä—ã—Ç' })" -ForegroundColor $(if ($tcpClientResult) { 'Green' } else { 'Red' })
    
    # –ú–µ—Ç–æ–¥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ HTTP (–¥–ª—è –≤–µ–±-–ø–æ—Ä—Ç–æ–≤)
    if ($port -eq 80 -or $port -eq 443) {
        try {
            $protocol = if ($port -eq 443) { "https" } else { "http" }
            $url = "$protocol`://$ServerIP`:$port"
            $response = Invoke-WebRequest -Uri $url -Method GET -TimeoutSec 5 -ErrorAction Stop
            Write-Host "   HTTP Response: ‚úÖ $($response.StatusCode)" -ForegroundColor Green
        } catch {
            Write-Host "   HTTP Response: ‚ùå $($_.Exception.Message)" -ForegroundColor Red
        }
    }
    
    Write-Host ""
}

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
Write-Host "üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:" -ForegroundColor Yellow

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
Write-Host "üì¶ –°—Ç–∞—Ç—É—Å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:" -ForegroundColor White
try {
    $containers = docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" 2>$null
    if ($containers) {
        Write-Host $containers -ForegroundColor Gray
    } else {
        Write-Host "   Docker –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã" -ForegroundColor Red
    }
} catch {
    Write-Host "   –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –ø–æ—Ä—Ç—ã
Write-Host "üîç –ü—Ä–æ—Ü–µ—Å—Å—ã, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –ø–æ—Ä—Ç—ã:" -ForegroundColor White
foreach ($port in $Ports) {
    $processes = Get-NetTCPConnection -LocalPort $port -ErrorAction SilentlyContinue
    if ($processes) {
        foreach ($proc in $processes) {
            $processName = (Get-Process -Id $proc.OwningProcess -ErrorAction SilentlyContinue).ProcessName
            Write-Host "   –ü–æ—Ä—Ç $port`: $processName (PID: $($proc.OwningProcess))" -ForegroundColor Gray
        }
    } else {
        Write-Host "   –ü–æ—Ä—Ç $port`: –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" -ForegroundColor Yellow
    }
}

Write-Host ""
Write-Host "üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:" -ForegroundColor Cyan

$allPortsOpen = $true
foreach ($port in $Ports) {
    $netConnectionResult = Test-PortWithNetConnection -ComputerName $ServerIP -Port $port
    if (-not $netConnectionResult) {
        $allPortsOpen = $false
    }
}

if ($allPortsOpen) {
    Write-Host "   ‚úÖ –í—Å–µ –ø–æ—Ä—Ç—ã –æ—Ç–∫—Ä—ã—Ç—ã! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ —Å –≤–Ω–µ—à–Ω–∏—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤." -ForegroundColor Green
} else {
    Write-Host "   ‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ä—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:" -ForegroundColor Red
    Write-Host "      1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: .\.ai-temp\check-firewall.ps1 -AddRules" -ForegroundColor White
    Write-Host "      2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã" -ForegroundColor White
    Write-Host "      3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ—É—Ç–µ—Ä–∞/–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞" -ForegroundColor White
    Write-Host "      4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ—Ç –Ω–∞ 0.0.0.0, –∞ –Ω–µ –Ω–∞ localhost" -ForegroundColor White
}
