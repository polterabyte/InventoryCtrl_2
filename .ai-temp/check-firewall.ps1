# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π—Ä–≤–æ–ª–∞ Windows
param(
    [Parameter(Mandatory=$false)]
    [switch]$AddRules,
    
    [Parameter(Mandatory=$false)]
    [switch]$RemoveRules
)

Write-Host "üî• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞ Windows" -ForegroundColor Cyan
Write-Host ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞
function Test-FirewallStatus {
    Write-Host "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞..." -ForegroundColor Yellow
    
    $firewallProfiles = @("Domain", "Private", "Public")
    
    foreach ($profile in $firewallProfiles) {
        $status = Get-NetFirewallProfile -Profile $profile | Select-Object Name, Enabled
        $statusText = if ($status.Enabled) { "–í–∫–ª—é—á–µ–Ω" } else { "–û—Ç–∫–ª—é—á–µ–Ω" }
        $color = if ($status.Enabled) { "Green" } else { "Red" }
        
        Write-Host "   $($profile): $statusText" -ForegroundColor $color
    }
    
    return $status.Enabled
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª –ø–æ—Ä—Ç–æ–≤
function Test-PortRules {
    param([int[]]$Ports)
    
    Write-Host "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª –¥–ª—è –ø–æ—Ä—Ç–æ–≤: $($Ports -join ', ')" -ForegroundColor Yellow
    
    foreach ($port in $Ports) {
        $rules = Get-NetFirewallRule -DisplayName "*$port*" -ErrorAction SilentlyContinue
        $inboundRules = Get-NetFirewallRule -DisplayName "*$port*" | Where-Object { $_.Direction -eq "Inbound" } | Where-Object { $_.Enabled -eq "True" }
        $outboundRules = Get-NetFirewallRule -DisplayName "*$port*" | Where-Object { $_.Direction -eq "Outbound" } | Where-Object { $_.Enabled -eq "True" }
        
        Write-Host "   Port $port:" -ForegroundColor White
        Write-Host "     –í—Ö–æ–¥—è—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞: $($inboundRules.Count)" -ForegroundColor $(if ($inboundRules.Count -gt 0) { "Green" } else { "Red" })
        Write-Host "     –ò—Å—Ö–æ–¥—è—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞: $($outboundRules.Count)" -ForegroundColor $(if ($outboundRules.Count -gt 0) { "Green" } else { "Red" })
        
        if ($inboundRules.Count -gt 0) {
            foreach ($rule in $inboundRules) {
                Write-Host "       ‚úÖ $($rule.DisplayName)" -ForegroundColor Green
            }
        }
        
        if ($outboundRules.Count -gt 0) {
            foreach ($rule in $outboundRules) {
                Write-Host "       ‚úÖ $($rule.DisplayName)" -ForegroundColor Green
            }
        }
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª —Ñ–∞–π—Ä–≤–æ–ª–∞
function Add-PortRules {
    param([int[]]$Ports)
    
    Write-Host "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Ñ–∞–π—Ä–≤–æ–ª–∞ –¥–ª—è –ø–æ—Ä—Ç–æ–≤: $($Ports -join ', ')" -ForegroundColor Yellow
    
    foreach ($port in $Ports) {
        $ruleName = "Inventory_App_Port_$port"
        
        try {
            # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —Å —Ç–∞–∫–∏–º –∂–µ –∏–º–µ–Ω–µ–º
            Remove-NetFirewallRule -DisplayName $ruleName -ErrorAction SilentlyContinue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ö–æ–¥—è—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ
            New-NetFirewallRule -DisplayName "$ruleName_Inbound" -Direction Inbound -Protocol TCP -LocalPort $port -Action Allow -Profile Any | Out-Null
            Write-Host "   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤—Ö–æ–¥—è—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –ø–æ—Ä—Ç–∞ $port" -ForegroundColor Green
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥—è—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ
            New-NetFirewallRule -DisplayName "$ruleName_Outbound" -Direction Outbound -Protocol TCP -LocalPort $port -Action Allow -Profile Any | Out-Null
            Write-Host "   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∏—Å—Ö–æ–¥—è—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –ø–æ—Ä—Ç–∞ $port" -ForegroundColor Green
            
        } catch {
            Write-Host "   ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø–æ—Ä—Ç–∞ $port`: $($_.Exception.Message)" -ForegroundColor Red
        }
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª —Ñ–∞–π—Ä–≤–æ–ª–∞
function Remove-PortRules {
    param([int[]]$Ports)
    
    Write-Host "üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Ñ–∞–π—Ä–≤–æ–ª–∞ –¥–ª—è –ø–æ—Ä—Ç–æ–≤: $($Ports -join ', ')" -ForegroundColor Yellow
    
    foreach ($port in $Ports) {
        $ruleName = "Inventory_App_Port_$port"
        
        try {
            Remove-NetFirewallRule -DisplayName "*$ruleName*" -ErrorAction SilentlyContinue
            Write-Host "   ‚úÖ –£–¥–∞–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ø–æ—Ä—Ç–∞ $port" -ForegroundColor Green
        } catch {
            Write-Host "   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –¥–ª—è –ø–æ—Ä—Ç–∞ $port`: $($_.Exception.Message)" -ForegroundColor Red
        }
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤
function Test-PortAccessibility {
    param([int[]]$Ports)
    
    Write-Host "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤..." -ForegroundColor Yellow
    
    foreach ($port in $Ports) {
        try {
            $listener = Get-NetTCPConnection -LocalPort $port -ErrorAction SilentlyContinue
            if ($listener) {
                Write-Host "   ‚úÖ –ü–æ—Ä—Ç $port –æ—Ç–∫—Ä—ã—Ç –∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ—Ç—Å—è" -ForegroundColor Green
                Write-Host "      –ü—Ä–æ—Ü–µ—Å—Å: $($listener.OwningProcess)" -ForegroundColor Gray
                Write-Host "      –°–æ—Å—Ç–æ—è–Ω–∏–µ: $($listener.State)" -ForegroundColor Gray
            } else {
                Write-Host "   ‚ö†Ô∏è  –ü–æ—Ä—Ç $port –Ω–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ—Ç—Å—è" -ForegroundColor Yellow
            }
        } catch {
            Write-Host "   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞ $port`: $($_.Exception.Message)" -ForegroundColor Red
        }
    }
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
$requiredPorts = @(80, 5000)

Write-Host "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞ –¥–ª—è –ø–æ—Ä—Ç–æ–≤: $($requiredPorts -join ', ')" -ForegroundColor Cyan
Write-Host ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
if (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Host "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª —Ñ–∞–π—Ä–≤–æ–ª–∞!" -ForegroundColor Yellow
    Write-Host "   –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: .\check-firewall.ps1 -AddRules" -ForegroundColor Yellow
    Write-Host ""
}

# 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞–π—Ä–≤–æ–ª–∞
$firewallEnabled = Test-FirewallStatus
Write-Host ""

# 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ø–æ—Ä—Ç–æ–≤
Test-PortRules -Ports $requiredPorts
Write-Host ""

# 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–æ–≤
Test-PortAccessibility -Ports $requiredPorts
Write-Host ""

# 4. –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
if ($AddRules) {
    if ($firewallEnabled) {
        Add-PortRules -Ports $requiredPorts
        Write-Host ""
        Write-Host "üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:" -ForegroundColor Cyan
        Test-PortRules -Ports $requiredPorts
    } else {
        Write-Host "‚ö†Ô∏è  –§–∞–π—Ä–≤–æ–ª –æ—Ç–∫–ª—é—á–µ–Ω, –ø—Ä–∞–≤–∏–ª–∞ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è" -ForegroundColor Yellow
    }
}

# 5. –£–¥–∞–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
if ($RemoveRules) {
    Remove-PortRules -Ports $requiredPorts
    Write-Host ""
    Write-Host "üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è:" -ForegroundColor Cyan
    Test-PortRules -Ports $requiredPorts
}

Write-Host ""
Write-Host "üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:" -ForegroundColor White
Write-Host "   1. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª —Ñ–∞–π—Ä–≤–æ–ª–∞: .\check-firewall.ps1 -AddRules" -ForegroundColor White
Write-Host "   2. –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª —Ñ–∞–π—Ä–≤–æ–ª–∞: .\check-firewall.ps1 -RemoveRules" -ForegroundColor White
Write-Host "   3. –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤ –∏–∑–≤–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: telnet [IP_–°–ï–†–í–ï–†–ê] 80" -ForegroundColor White
Write-Host "   4. Or use online port checking services" -ForegroundColor White
