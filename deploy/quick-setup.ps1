# –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è warehouse.cuby
param(
    [string]$Environment = "production",
    [string]$Domain = "warehouse.cuby",
    [string]$Email = "admin@warehouse.cuby"
)

Write-Host "üöÄ –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è $Domain..." -ForegroundColor Green

# 1. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
Write-Host "`n1. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..." -ForegroundColor Cyan
$directories = @(
    "nginx/ssl",
    "logs",
    "backups"
)

foreach ($dir in $directories) {
    if (!(Test-Path $dir)) {
        New-Item -ItemType Directory -Path $dir -Force | Out-Null
        Write-Host "   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $dir" -ForegroundColor Green
    } else {
        Write-Host "   ‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $dir" -ForegroundColor Green
    }
}

# 2. –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
Write-Host "`n2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..." -ForegroundColor Cyan
if (!(Test-Path ".env")) {
    if (Test-Path "env.$Environment") {
        Copy-Item "env.$Environment" ".env"
        Write-Host "   ‚úÖ –°–æ–∑–¥–∞–Ω .env —Ñ–∞–π–ª –∏–∑ env.$Environment" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå –§–∞–π–ª env.$Environment –Ω–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor Red
        Write-Host "   –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª env.$Environment —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏" -ForegroundColor Yellow
    }
} else {
    Write-Host "   ‚úÖ .env —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" -ForegroundColor Green
}

# 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ (self-signed)
Write-Host "`n3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..." -ForegroundColor Cyan
$domains = @("warehouse.cuby", "staging.warehouse.cuby", "test.warehouse.cuby")

foreach ($domain in $domains) {
    $certFile = "nginx/ssl/$domain.crt"
    $keyFile = "nginx/ssl/$domain.key"
    
    if (!(Test-Path $certFile) -or !(Test-Path $keyFile)) {
        Write-Host "   ‚ö†Ô∏è  –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è $domain –Ω–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor Yellow
        Write-Host "   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: .\generate-ssl-warehouse.ps1" -ForegroundColor Cyan
    } else {
        Write-Host "   ‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è $domain –Ω–∞–π–¥–µ–Ω" -ForegroundColor Green
    }
}

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
Write-Host "`n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker..." -ForegroundColor Cyan
try {
    $dockerVersion = docker --version
    if ($dockerVersion) {
        Write-Host "   ‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $dockerVersion" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker:" -ForegroundColor Red
        Write-Host "   https://docs.docker.com/get-docker/" -ForegroundColor Cyan
    }
} catch {
    Write-Host "   ‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker:" -ForegroundColor Red
    Write-Host "   https://docs.docker.com/get-docker/" -ForegroundColor Cyan
}

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
Write-Host "`n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose..." -ForegroundColor Cyan
try {
    $composeVersion = docker-compose --version
    if ($composeVersion) {
        Write-Host "   ‚úÖ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $composeVersion" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose:" -ForegroundColor Red
        Write-Host "   https://docs.docker.com/compose/install/" -ForegroundColor Cyan
    }
} catch {
    Write-Host "   ‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose:" -ForegroundColor Red
    Write-Host "   https://docs.docker.com/compose/install/" -ForegroundColor Cyan
}

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
Write-Host "`n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤..." -ForegroundColor Cyan
$ports = @(80, 443)
foreach ($port in $ports) {
    try {
        $connection = Test-NetConnection -ComputerName "localhost" -Port $port -WarningAction SilentlyContinue
        if ($connection.TcpTestSucceeded) {
            Write-Host "   ‚úÖ –ü–æ—Ä—Ç $port –æ—Ç–∫—Ä—ã—Ç" -ForegroundColor Green
        } else {
            Write-Host "   ‚ö†Ô∏è  –ü–æ—Ä—Ç $port –∑–∞–∫—Ä—ã—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω" -ForegroundColor Yellow
        }
    } catch {
        Write-Host "   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ä—Ç $port" -ForegroundColor Yellow
    }
}

# 7. –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞ (–¥–ª—è Linux)
Write-Host "`n7. –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞..." -ForegroundColor Cyan
$serviceFile = @"
[Unit]
Description=Warehouse Inventory Management
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=$PWD
ExecStart=/usr/local/bin/docker-compose -f docker-compose.prod.yml up -d
ExecStop=/usr/local/bin/docker-compose -f docker-compose.prod.yml down
TimeoutStartSec=0

[Install]
WantedBy=multi-user.target
"@

$servicePath = "warehouse.service"
if (!(Test-Path $servicePath)) {
    $serviceFile | Out-File -FilePath $servicePath -Encoding UTF8
    Write-Host "   ‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª $servicePath" -ForegroundColor Green
    Write-Host "   –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ /etc/systemd/system/ –Ω–∞ Linux —Å–µ—Ä–≤–µ—Ä–µ" -ForegroundColor Yellow
} else {
    Write-Host "   ‚úÖ –§–∞–π–ª $servicePath —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" -ForegroundColor Green
}

# 8. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –±—ç–∫–∞–ø–∞
Write-Host "`n8. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –±—ç–∫–∞–ø–∞..." -ForegroundColor Cyan
$backupScript = @"
#!/bin/bash
DATE=`date +%Y%m%d_%H%M%S`
BACKUP_DIR="$PWD/backups"
mkdir -p `$BACKUP_DIR

# –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
docker exec inventory-postgres-prod pg_dump -U postgres inventorydb > `$BACKUP_DIR/db_`$DATE.sql

# –ë—ç–∫–∞–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
tar -czf `$BACKUP_DIR/config_`$DATE.tar.gz nginx/ *.yml *.env

# –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
find `$BACKUP_DIR -name "*.sql" -mtime +30 -delete
find `$BACKUP_DIR -name "*.tar.gz" -mtime +30 -delete
"@

$backupPath = "backup.sh"
if (!(Test-Path $backupPath)) {
    $backupScript | Out-File -FilePath $backupPath -Encoding UTF8
    Write-Host "   ‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –±—ç–∫–∞–ø–∞: $backupPath" -ForegroundColor Green
} else {
    Write-Host "   ‚úÖ –°–∫—Ä–∏–ø—Ç –±—ç–∫–∞–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" -ForegroundColor Green
}

# –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
Write-Host "`n" + "="*60 -ForegroundColor Gray
Write-Host "üéâ –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" -ForegroundColor Green
Write-Host "="*60 -ForegroundColor Gray

Write-Host "`nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:" -ForegroundColor Yellow
Write-Host "1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ DNS –∑–∞–ø–∏—Å–∏ –¥–ª—è $Domain" -ForegroundColor White
Write-Host "2. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã: .\generate-ssl-warehouse.ps1" -ForegroundColor White
Write-Host "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: .\deploy\check-deployment-readiness.ps1" -ForegroundColor White
Write-Host "4. –†–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: .\deploy\deploy-$Environment.ps1" -ForegroundColor White

Write-Host "`nüîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:" -ForegroundColor Yellow
Write-Host "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ firewall –¥–ª—è –ø–æ—Ä—Ç–æ–≤ 80 –∏ 443" -ForegroundColor White
Write-Host "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç—ã" -ForegroundColor White
Write-Host "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ" -ForegroundColor White
Write-Host "‚Ä¢ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ staging –æ–∫—Ä—É–∂–µ–Ω–∏–∏" -ForegroundColor White
