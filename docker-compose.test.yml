version: '3.8'

services:
  # PostgreSQL database for integration tests
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: inventory_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_test_data:/var/lib/postgresql/data

  # Unit tests
  unit-tests:
    build:
      context: .
      dockerfile: Dockerfile.test
      target: unit-tests
    volumes:
      - ./test-results:/app/test-results
    depends_on:
      - postgres
    environment:
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=inventory_test;Username=postgres;Password=postgres

  # Integration tests
  integration-tests:
    build:
      context: .
      dockerfile: Dockerfile.test
      target: integration-tests
    volumes:
      - ./test-results:/app/test-results
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=inventory_test;Username=postgres;Password=postgres

  # Component tests
  component-tests:
    build:
      context: .
      dockerfile: Dockerfile.test
      target: component-tests
    volumes:
      - ./test-results:/app/test-results
    depends_on:
      - postgres
    environment:
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=inventory_test;Username=postgres;Password=postgres

  # All tests with coverage
  all-tests:
    build:
      context: .
      dockerfile: Dockerfile.test
      target: all-tests
    volumes:
      - ./test-results:/app/test-results
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=inventory_test;Username=postgres;Password=postgres

  # Test runner with PowerShell script support
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
      target: test-runner
    volumes:
      - ./test-results:/app/test-results
      - ./test:/app/test
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=inventory_test;Username=postgres;Password=postgres
    command: ["dotnet", "test", "--configuration", "Release", "--collect:XPlat Code Coverage", "--logger", "trx", "--results-directory", "/app/test-results"]

volumes:
  postgres_test_data:
