@page "/warehouses"
@attribute [Authorize]
@using Inventory.Shared.Components
@using Inventory.Shared.DTOs
@using Inventory.Shared.Interfaces
@using Inventory.Shared.Resources
@using Inventory.UI.Components.Warehouses
@using Microsoft.Extensions.Localization
@inherits LocalizedComponentBase

@inject NavigationManager Navigation
@inject IWarehouseService WarehouseService
@inject IKanbanCardService KanbanCardService
@inject Inventory.Shared.Services.IErrorHandlingService ErrorHandlingService
@inject Radzen.NotificationService NotificationService
@inject Radzen.DialogService DialogService

<PageTitle>@GetString("Navigation.Warehouses")</PageTitle>

<RadzenStack Orientation="Orientation.Vertical" Gap="1rem">
    <!-- Toolbar -->
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.75rem">
            <RadzenText TextStyle="TextStyle.H5">@GetString("Navigation.Warehouses")</RadzenText>
            <RadzenTextBox @bind-Value="filter" Placeholder="Поиск склада" Style="width: 220px;" />
        </RadzenStack>
        <AuthorizeView Roles="Admin,Manager">
            <RadzenButton Text="Создать карту" Icon="add" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Click="@(() => OpenCreateCardDialog())" />
        </AuthorizeView>
    </RadzenStack>

    @if (isLoading)
    {
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="0.5rem" Style="padding:1.5rem;">
            <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
            <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-secondary);">Загрузка складов и карт…</RadzenText>
        </RadzenStack>
    }
    else if (!warehouses.Any())
    {
        <RadzenAlert Severity="AlertSeverity.Info">Склады не найдены</RadzenAlert>
    }
    else
    {
        <!-- Horizontal kanban by warehouse -->
        <div style="overflow-x:auto; white-space:nowrap; padding-bottom:0.5rem;">
            <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem">
                @foreach (var wh in GetFilteredWarehouses())
                {
                    <div class="kanban-column">
                        <RadzenCard Style="min-width: 280px; width: 320px; display:inline-block; vertical-align:top;">
                            <ChildContent>
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween" Style="position:sticky; top:0; background:var(--rz-base-background-color); z-index:1; padding-bottom:0.25rem;">
                                    <RadzenText TextStyle="TextStyle.H6">@wh.Name</RadzenText>
                                    <RadzenBadge Style="margin-left:0.5rem;" Text="@GetCardsCount(wh.Id).ToString()" />
                                </RadzenStack>
                                @if (cardsByWarehouse.TryGetValue(wh.Id, out var cards) && cards.Any())
                                {
                                     <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem">
                                         @foreach (var card in cards)
                                         {
                                             <RadzenCard Style="@GetCardStyle(card.Id)">
                                                 <RadzenStack Orientation="Orientation.Vertical" Gap="0.25rem">
                                                     <!-- Card header with actions -->
                                                     <RadzenStack Orientation="Orientation.Horizontal"
                                                                  JustifyContent="JustifyContent.SpaceBetween"
                                                                  AlignItems="AlignItems.Start">
                                                         <RadzenText TextStyle="TextStyle.Subtitle2">@card.ProductName</RadzenText>

                                                         <AuthorizeView Roles="Admin,Manager">
                                                             <RadzenDropDownButton Text="" Icon="more_vert"
                                                                                   Size="ButtonSize.Small"
                                                                                   Items="@GetCardMenuItems(card)" />
                                                         </AuthorizeView>
                                                     </RadzenStack>

                                                     <!-- Card content -->
                                                     <RadzenText TextStyle="TextStyle.Caption"
                                                                Style="color: var(--rz-text-secondary);">
                                                         Порог: @card.MinThreshold–@card.MaxThreshold @card.UnitOfMeasureSymbol
                                                     </RadzenText>

                                                     <RadzenText TextStyle="TextStyle.Caption"
                                                                Style="color: var(--rz-text-secondary);">
                                                         Остаток: @card.CurrentQuantity @card.UnitOfMeasureSymbol
                                                     </RadzenText>

                                                     <!-- Status indicators -->
                                                     @if (IsLowStock(card.Id))
                                                     {
                                                         <RadzenBadge Text="Низкий запас"
                                                                     Style="background: var(--rz-danger); color: white;" />
                                                     }
                                                     @if (IsOverStock(card.Id))
                                                     {
                                                         <RadzenBadge Text="Избыток"
                                                                     Style="background: var(--rz-warning); color: white;" />
                                                     }
                                                 </RadzenStack>
                                             </RadzenCard>
                                         }

                                        <AuthorizeView Roles="Admin,Manager">
                                            <RadzenButton Text="Добавить карту" Icon="add" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Light" Click="@(() => OpenCreateCardDialog(wh))" />
                                        </AuthorizeView>
                                    </RadzenStack>
                                }
                                else
                                {
                                    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="0.5rem" Style="padding:0.5rem;">
                                        <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-secondary);">Карт нет</RadzenText>
                                        <AuthorizeView Roles="Admin,Manager">
                                            <RadzenButton Text="Добавить карту" Icon="add" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Light" Click="@(() => OpenCreateCardDialog(wh))" />
                                        </AuthorizeView>
                                    </RadzenStack>
                                }
                            </ChildContent>
                        </RadzenCard>
                    </div>
                }
            </RadzenStack>
        </div>
    }
</RadzenStack>

@code {
    private List<WarehouseDto> warehouses = new();
    private Dictionary<int, List<KanbanCardDto>> cardsByWarehouse = new();
    private HashSet<int> lowStockCardIds = new();
    private bool isLoading = true;
    private string? filter;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        isLoading = true;
        try
        {
            warehouses = await WarehouseService.GetAllWarehousesAsync();
            warehouses = warehouses.Where(w => w.IsActive).OrderBy(w => w.Name).ToList();

            // Load all Kanban cards grouped by warehouse
            cardsByWarehouse.Clear();
            foreach (var wh in warehouses)
            {
                var cards = await KanbanCardService.GetAllAsync(warehouseId: wh.Id);
                cardsByWarehouse[wh.Id] = cards;
            }

            // Compute low-stock locally based on current quantities
            lowStockCardIds = cardsByWarehouse
                .SelectMany(kvp => kvp.Value)
                .Where(c => c.CurrentQuantity <= c.MinThreshold)
                .Select(c => c.Id)
                .ToHashSet();
        }
        catch (Exception ex)
        {
            await ErrorHandlingService.HandleErrorAsync(ex, "Loading warehouses/kanban");
            warehouses = new();
            cardsByWarehouse.Clear();
            lowStockCardIds.Clear();
        }
        finally
        {
            isLoading = false;
        }
    }

    private int GetCardsCount(int warehouseId) => cardsByWarehouse.TryGetValue(warehouseId, out var list) ? list.Count : 0;
    private bool IsLowStock(int kanbanCardId) => lowStockCardIds.Contains(kanbanCardId);
    private IEnumerable<WarehouseDto> GetFilteredWarehouses() => string.IsNullOrWhiteSpace(filter)
        ? warehouses
        : warehouses.Where(w => (w.Name ?? string.Empty).Contains(filter, StringComparison.OrdinalIgnoreCase));

    private string GetCardStyle(int kanbanCardId)
        => $"border-left:4px solid {(IsLowStock(kanbanCardId) ? "var(--rz-danger)" : IsOverStock(kanbanCardId) ? "var(--rz-warning)" : "var(--rz-info)")}; padding:0.5rem;";

    private bool IsOverStock(int kanbanCardId)
    {
        foreach (var warehouseCards in cardsByWarehouse.Values)
        {
            var card = warehouseCards.FirstOrDefault(c => c.Id == kanbanCardId);
            if (card != null)
            {
                return card.CurrentQuantity > card.MaxThreshold;
            }
        }
        return false;
    }

    private List<object> GetCardMenuItems(KanbanCardDto card)
    {
        return new List<object>
        {
            new { Text = "Редактировать", Icon = "edit",
                 Click = (Action)(() => OpenEditCardDialog(card)) },
            new { Text = "Переместить", Icon = "swap_horiz",
                 Click = (Action)(() => OpenReassignDialog(card)) },
            new { Text = "Удалить", Icon = "delete",
                 Click = (Action)(() => ConfirmDeleteCard(card)) }
        };
    }

    private async Task OpenCreateCardDialog(WarehouseDto? preselectedWarehouse = null)
    {
        var result = await DialogService.OpenAsync<CreateKanbanCardDialog>(
            title: "Новая канбан-карта",
            parameters: new Dictionary<string, object?>
            {
                [nameof(CreateKanbanCardDialog.PreselectedWarehouse)] = preselectedWarehouse
            },
            options: new Radzen.DialogOptions { Width = "600px", Height = "auto" }
        );

        if (result is bool created && created)
        {
            NotificationService.Notify(new Radzen.NotificationMessage
            {
                Severity = Radzen.NotificationSeverity.Success,
                Summary = "Карта создана",
                Duration = 3000
            });
            await LoadDataAsync();
            StateHasChanged();
        }
    }

    private async Task OpenEditCardDialog(KanbanCardDto card)
    {
        var result = await DialogService.OpenAsync<EditKanbanCardDialog>(
            title: $"Редактировать карту: {card.ProductName}",
            parameters: new Dictionary<string, object?>
            {
                [nameof(EditKanbanCardDialog.Card)] = card
            },
            options: new Radzen.DialogOptions { Width = "500px", Height = "auto" }
        );

        if (result is bool updated && updated)
        {
            NotificationService.Notify(new Radzen.NotificationMessage
            {
                Severity = Radzen.NotificationSeverity.Success,
                Summary = "Карта обновлена",
                Duration = 3000
            });
            await LoadDataAsync();
            StateHasChanged();
        }
    }

    private async Task ConfirmDeleteCard(KanbanCardDto card)
    {
        var confirmed = await DialogService.Confirm(
            $"Удалить канбан-карту для товара '{card.ProductName}' на складе '{card.WarehouseName}'?",
            "Подтверждение удаления",
            new Radzen.ConfirmOptions
            {
                OkButtonText = "Удалить",
                CancelButtonText = "Отмена"
            }
        );

        if (confirmed == true)
        {
            await DeleteCardAsync(card);
        }
    }

    private async Task DeleteCardAsync(KanbanCardDto card)
    {
        try
        {
            var success = await KanbanCardService.DeleteAsync(card.Id);
            if (success)
            {
                NotificationService.Notify(new Radzen.NotificationMessage
                {
                    Severity = Radzen.NotificationSeverity.Success,
                    Summary = "Карта удалена",
                    Detail = $"Карта для '{card.ProductName}' удалена",
                    Duration = 3000
                });
                await LoadDataAsync();
            }
            else
            {
                NotificationService.Notify(new Radzen.NotificationMessage
                {
                    Severity = Radzen.NotificationSeverity.Error,
                    Summary = "Ошибка удаления",
                    Detail = "Не удалось удалить карту",
                    Duration = 5000
                });
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingService.HandleErrorAsync(ex, "Delete Kanban Card",
                new { CardId = card.Id, ProductName = card.ProductName });
        }
    }

    private async Task OpenReassignDialog(KanbanCardDto card)
    {
        var result = await DialogService.OpenAsync<ReassignKanbanCardDialog>(
            title: $"Переместить карту: {card.ProductName}",
            parameters: new Dictionary<string, object?>
            {
                [nameof(ReassignKanbanCardDialog.Card)] = card,
                [nameof(ReassignKanbanCardDialog.CurrentWarehouseId)] = card.WarehouseId
            },
            options: new Radzen.DialogOptions { Width = "500px", Height = "auto" }
        );

        if (result is bool reassigned && reassigned)
        {
            NotificationService.Notify(new Radzen.NotificationMessage
            {
                Severity = Radzen.NotificationSeverity.Success,
                Summary = "Карта перемещена",
                Detail = $"Карта для '{card.ProductName}' перемещена",
                Duration = 3000
            });
            await LoadDataAsync();
            StateHasChanged();
        }
    }
}

<style>
    .kanban-column .rz-card {
        max-height: 70vh;
        overflow-y: auto;
    }
</style>
