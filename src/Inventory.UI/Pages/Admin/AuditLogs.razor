@page "/admin/audit-logs"
@using Inventory.Shared.DTOs
@using Inventory.Shared.Services
@using Inventory.Shared.Constants
@using Inventory.Shared.Interfaces
@using Microsoft.AspNetCore.Components.Web
@using Radzen
@using Radzen.Blazor
@inject IAuditService AuditService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>Audit Logs - Inventory Control</PageTitle>

<RadzenStack Orientation="Orientation.Vertical" Gap="1rem" class="container-fluid">
    <!-- Header with title and action buttons -->
    <RadzenStack Orientation="Orientation.Horizontal"
                 AlignItems="AlignItems.Center"
                 JustifyContent="JustifyContent.SpaceBetween">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
            <RadzenIcon Icon="assignment" Style="font-size: 1.5rem; color: var(--rz-primary);" />
            <RadzenText TextStyle="TextStyle.H4">Audit Logs</RadzenText>
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem">
            <RadzenButton Text="Refresh"
                         Icon="refresh"
                         ButtonStyle="ButtonStyle.Primary"
                         Variant="Variant.Outlined"
                         Click="RefreshLogs" />
            <RadzenButton Text="Export"
                         Icon="download"
                         ButtonStyle="ButtonStyle.Success"
                         Variant="Variant.Outlined"
                         Click="ExportLogs" />
        </RadzenStack>
    </RadzenStack>

    <!-- Filters -->
    <RadzenCard>
        <RadzenStack Orientation="Orientation.Vertical" Gap="1rem">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                <RadzenIcon Icon="filter_list" Style="color: var(--rz-primary);" />
                <RadzenText TextStyle="TextStyle.H6">Filters</RadzenText>
            </RadzenStack>

            <RadzenRow Gap="1rem">
                <RadzenColumn Size="12">
                    <RadzenFormField Text="Action Type">
                        <RadzenDropDown @bind-Value="filters.ActionType" @bind-Value:after="OnFilterChange"
                                       Data="@actionTypeOptions"
                                       ValueProperty="Value"
                                       TextProperty="Text"
                                       Placeholder="All Actions" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn Size="12">
                    <RadzenFormField Text="Entity Type">
                        <RadzenTextBox @bind-Value="filters.EntityType" @bind-Value:after="OnFilterChange"
                                      Placeholder="e.g., Product, User" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn Size="12">
                    <RadzenFormField Text="User">
                        <RadzenTextBox @bind-Value="filters.UserName" @bind-Value:after="OnFilterChange"
                                      Placeholder="Username" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn Size="12">
                    <RadzenFormField Text="Request ID">
                        <RadzenTextBox @bind-Value="filters.RequestId" @bind-Value:after="OnFilterChange"
                                      Placeholder="Request ID" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn Size="12">
                    <RadzenFormField Text="Date From">
                        <RadzenDatePicker @bind-Value="filters.DateFrom" @bind-Value:after="OnFilterChange"
                                         ShowTime="true"
                                         Placeholder="Select date from" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn Size="12">
                    <RadzenFormField Text="Date To">
                        <RadzenDatePicker @bind-Value="filters.DateTo" @bind-Value:after="OnFilterChange"
                                         ShowTime="true"
                                         Placeholder="Select date to" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn Size="12">
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" JustifyContent="JustifyContent.End">
                        <RadzenButton Text="Apply Filters"
                                     Icon="search"
                                     ButtonStyle="ButtonStyle.Primary"
                                     Click="ApplyFilters" />
                        <RadzenButton Text="Clear"
                                     Icon="clear"
                                     ButtonStyle="ButtonStyle.Light"
                                     Variant="Variant.Outlined"
                                     Click="ClearFilters" />
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>
        </RadzenStack>
    </RadzenCard>

    <!-- Statistics -->
    <RadzenRow Gap="1rem">
        <RadzenColumn Size="12">
            <RadzenCard Style="text-align: center;">
                <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem">
                    <RadzenText TextStyle="TextStyle.H4" Style="color: var(--rz-primary); font-weight: bold;">
                        @totalLogs
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2">Total Logs</RadzenText>
                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>
        <RadzenColumn Size="12">
            <RadzenCard Style="text-align: center;">
                <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem">
                    <RadzenText TextStyle="TextStyle.H4" Style="color: var(--rz-success); font-weight: bold;">
                        @successfulRequests
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2">Successful</RadzenText>
                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>
        <RadzenColumn Size="12">
            <RadzenCard Style="text-align: center;">
                <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem">
                    <RadzenText TextStyle="TextStyle.H4" Style="color: var(--rz-danger); font-weight: bold;">
                        @failedRequests
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2">Failed</RadzenText>
                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>
        <RadzenColumn Size="12">
            <RadzenCard Style="text-align: center;">
                <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem">
                    <RadzenText TextStyle="TextStyle.H4" Style="color: var(--rz-info); font-weight: bold;">
                        @(averageResponseTime > 0 ? $"{averageResponseTime:F0} ms" : "-")
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2">Avg Response</RadzenText>
                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>

    <!-- Audit Logs Table -->
    <RadzenCard>
        <RadzenStack Orientation="Orientation.Vertical" Gap="1rem">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                <RadzenIcon Icon="list" Style="color: var(--rz-primary);" />
                <RadzenText TextStyle="TextStyle.H6">Audit Logs</RadzenText>
            </RadzenStack>

            @if (isLoading)
            {
                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="1rem" Style="padding: 2rem;">
                    <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                    <RadzenText TextStyle="TextStyle.Body2">Loading audit logs...</RadzenText>
                </RadzenStack>
            }
            else if (auditLogs?.Any() == true)
            {
                <RadzenDataGrid TItem="AuditLogDto"
                               Data="@auditLogs"
                               Count="@totalLogs"
                               AllowPaging="true"
                               PageSize="@pageSize"
                               LoadData="@OnGridLoad"
                               AllowSorting="true">
                    <Columns>
                        <RadzenDataGridColumn TItem="AuditLogDto" Title="Timestamp" Property="Timestamp">
                            <Template Context="log">
                                <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary);">
                                    @log.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")
                                </RadzenText>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="AuditLogDto" Title="Action">
                            <Template Context="log">
                                <RadzenBadge Text="@log.ActionType.ToString()" BadgeStyle="@GetActionBadgeStyle(log.ActionType.ToString())" />
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="AuditLogDto" Title="Entity">
                            <Template Context="log">
                                <RadzenStack Orientation="Orientation.Vertical" Gap="0.25rem">
                                    @if (!string.IsNullOrEmpty(log.EntityType))
                                    {
                                        <RadzenBadge Text="@log.EntityType" BadgeStyle="BadgeStyle.Secondary" />
                                    }
                                    @if (!string.IsNullOrEmpty(log.EntityId))
                                    {
                                        <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary);">
                                            ID: @log.EntityId
                                        </RadzenText>
                                    }
                                </RadzenStack>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="AuditLogDto" Title="User">
                            <Template Context="log">
                                @if (!string.IsNullOrEmpty(log.Username))
                                {
                                    <RadzenText TextStyle="TextStyle.Body2" Style="font-weight: bold;">@log.Username</RadzenText>
                                }
                                else
                                {
                                    <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-secondary);">Anonymous</RadzenText>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="AuditLogDto" Title="IP Address">
                            <Template Context="log">
                                <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary);">
                                    @log.IpAddress
                                </RadzenText>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="AuditLogDto" Title="Status">
                            <Template Context="log">
                                @if (log.IsSuccess)
                                {
                                    <RadzenBadge Text="Success" BadgeStyle="BadgeStyle.Success" />
                                }
                                else
                                {
                                    <RadzenBadge Text="Failed" BadgeStyle="BadgeStyle.Danger" />
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="AuditLogDto" Title="Response Time">
                            <Template Context="log">
                                @if (log.Duration > 0)
                                {
                                    <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary);">
                                        @log.Duration ms
                                    </RadzenText>
                                }
                                else
                                {
                                    <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary);">-</RadzenText>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="AuditLogDto" Title="Details">
                            <Template Context="log">
                                <RadzenButton Icon="visibility"
                                             Size="ButtonSize.Small"
                                             Variant="Variant.Text"
                                             Click="(() => ShowLogDetails(log))" />
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            }
            else
            {
                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="1rem" Style="padding: 2rem;">
                    <RadzenIcon Icon="assignment" Style="font-size: 3rem; color: var(--rz-text-secondary);" />
                    <RadzenText TextStyle="TextStyle.H6" Style="color: var(--rz-text-secondary);">No audit logs found</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-secondary);">Try adjusting your filters or check back later.</RadzenText>
                </RadzenStack>
            }
        </RadzenStack>
    </RadzenCard>
</RadzenStack>


@code {
    private List<AuditLogDto>? auditLogs;
    private bool isLoading = true;
    private int currentPage = 1;
    private int pageSize = 20;
    private int totalPages = 1;
    private int totalLogs = 0;
    private int successfulRequests = 0;
    private int failedRequests = 0;
    private double averageResponseTime = 0;
    private AuditLogDto? selectedLog;

    private AuditLogFilters filters = new()
    {
        DateFrom = DateTime.UtcNow.AddDays(-7),
        DateTo = DateTime.UtcNow
    };

    private List<ActionTypeOption> actionTypeOptions = new()
    {
        new() { Value = "", Text = "All Actions" },
        new() { Value = "Create", Text = "Create" },
        new() { Value = "Read", Text = "Read" },
        new() { Value = "Update", Text = "Update" },
        new() { Value = "Delete", Text = "Delete" },
        new() { Value = "Login", Text = "Login" },
        new() { Value = "Logout", Text = "Logout" },
        new() { Value = "Refresh", Text = "Refresh" },
        new() { Value = "Export", Text = "Export" },
        new() { Value = "Import", Text = "Import" },
        new() { Value = "Search", Text = "Search" },
        new() { Value = "Request", Text = "Request" },
        new() { Value = "Other", Text = "Other" }
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadAuditLogs();
    }

    private async Task OnGridLoad(Radzen.LoadDataArgs args)
    {
        var top = args.Top ?? pageSize;
        var skip = args.Skip ?? 0;
        if (top > 0)
        {
            pageSize = top;
        }
        currentPage = (skip / pageSize) + 1;
        await LoadAuditLogs();
    }

    private async Task LoadAuditLogs()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var result = await AuditService.GetAuditLogsAsync(
                actionType: filters.ActionType,
                entityType: filters.EntityType,
                userName: filters.UserName,
                requestId: filters.RequestId,
                dateFrom: filters.DateFrom,
                dateTo: filters.DateTo,
                page: currentPage,
                pageSize: pageSize
            );

            if (result.Success && result.Data != null)
            {
                auditLogs = result.Data.Logs?.ToList();
                totalPages = result.Data.TotalPages;
                totalLogs = result.Data.TotalCount;
                
                // Calculate statistics
                if (auditLogs?.Any() == true)
                {
                    successfulRequests = auditLogs.Count(x => x.IsSuccess);
                    failedRequests = auditLogs.Count(x => !x.IsSuccess);
                    averageResponseTime = auditLogs.Where(x => x.Duration > 0).Average(x => x.Duration ?? 0);
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading audit logs:", ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnFilterChange()
    {
        currentPage = 1;
        await LoadAuditLogs();
    }

    private async Task ApplyFilters()
    {
        currentPage = 1;
        await LoadAuditLogs();
    }

    private async Task ClearFilters()
    {
        filters = new AuditLogFilters
        {
            DateFrom = DateTime.UtcNow.AddDays(-7),
            DateTo = DateTime.UtcNow
        };
        currentPage = 1;
        await LoadAuditLogs();
    }

    private async Task RefreshLogs()
    {
        await LoadAuditLogs();
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await LoadAuditLogs();
        }
    }

    private async Task ExportLogs()
    {
        try
        {
            var result = await AuditService.ExportAuditLogsAsync(
                actionType: filters.ActionType,
                entityType: filters.EntityType,
                userName: filters.UserName,
                requestId: filters.RequestId,
                dateFrom: filters.DateFrom,
                dateTo: filters.DateTo
            );

            if (result.Success && result.Data != null)
            {
                var fileName = $"audit-logs-{DateTime.UtcNow:yyyy-MM-dd-HH-mm-ss}.csv";
                await JSRuntime.InvokeVoidAsync("downloadFile", fileName, result.Data);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error exporting audit logs:", ex.Message);
        }
    }

    private void ShowLogDetails(AuditLogDto log)
    {
        selectedLog = log;
    }

    private void CloseLogDetails()
    {
        selectedLog = null;
    }

    private string GetRowClass(AuditLogDto log)
    {
        if (!log.IsSuccess)
            return "table-danger";
        if (log.Duration > 5000) // Slow requests
            return "table-warning";
        return "";
    }

    private string GetActionBadgeClass(string actionType)
    {
        return actionType switch
        {
            "Create" => "bg-success",
            "Update" => "bg-warning",
            "Delete" => "bg-danger",
            "Login" => "bg-info",
            "Logout" => "bg-secondary",
            "Read" => "bg-primary",
            _ => "bg-secondary"
        };
    }

    private string GetStatusCodeBadgeClass(int statusCode)
    {
        return statusCode switch
        {
            >= 200 and < 300 => "bg-success",
            >= 300 and < 400 => "bg-info",
            >= 400 and < 500 => "bg-warning",
            >= 500 => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private BadgeStyle GetActionBadgeStyle(string actionType)
    {
        return actionType switch
        {
            "Create" => BadgeStyle.Success,
            "Update" => BadgeStyle.Warning,
            "Delete" => BadgeStyle.Danger,
            "Login" => BadgeStyle.Info,
            "Logout" => BadgeStyle.Secondary,
            "Read" => BadgeStyle.Primary,
            "Export" => BadgeStyle.Info,
            "Import" => BadgeStyle.Info,
            "Search" => BadgeStyle.Light,
            "Request" => BadgeStyle.Primary,
            "Refresh" => BadgeStyle.Light,
            "Other" => BadgeStyle.Secondary,
            _ => BadgeStyle.Secondary
        };
    }

    public class AuditLogFilters
    {
        public string? ActionType { get; set; }
        public string? EntityType { get; set; }
        public string? UserName { get; set; }
        public string? RequestId { get; set; }
        public DateTime? DateFrom { get; set; }
        public DateTime? DateTo { get; set; }
    }

    public class ActionTypeOption
    {
        public string Value { get; set; } = "";
        public string Text { get; set; } = "";
    }
}
