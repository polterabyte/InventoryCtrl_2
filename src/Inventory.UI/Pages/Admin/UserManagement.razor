@page "/admin/users"
@using Inventory.Shared.DTOs
@using Inventory.Shared.Interfaces
@using Inventory.UI.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Radzen
@using Radzen.Blazor

@inject IUserManagementService UserService
@inject IUserWarehouseService UserWarehouseService
@inject IWarehouseService WarehouseService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject DialogService DialogService

<PageTitle>User Management - Inventory Control</PageTitle>

<AdminGuard>

<RadzenStack Orientation="Orientation.Vertical" Gap="1.5rem" class="container-fluid">
    <RadzenStack Orientation="Orientation.Horizontal" 
                 AlignItems="AlignItems.Center" 
                 JustifyContent="JustifyContent.SpaceBetween">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
            <RadzenIcon Icon="people" Style="font-size: 1.5rem; color: var(--rz-primary);" />
            <RadzenText TextStyle="TextStyle.H4">User Management</RadzenText>
        </RadzenStack>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem">
            <RadzenButton Text="Create User" 
                         Icon="add" 
                         ButtonStyle="ButtonStyle.Success" 
                         Click="CreateUser" />
            <RadzenButton Text="Refresh" 
                         Icon="refresh" 
                         ButtonStyle="ButtonStyle.Primary" 
                         Variant="Variant.Outlined"
                         Click="RefreshUsers" />
            <RadzenButton Text="Export" 
                         Icon="download" 
                         ButtonStyle="ButtonStyle.Success" 
                         Variant="Variant.Outlined"
                         Click="ExportUsers" />
        </RadzenStack>
    </RadzenStack>

    <!-- Filters -->
    <RadzenCard>
        <RadzenStack Orientation="Orientation.Vertical" Gap="1rem">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                <RadzenIcon Icon="filter_list" Style="color: var(--rz-primary);" />
                <RadzenText TextStyle="TextStyle.H6">Filters</RadzenText>
            </RadzenStack>
            
            <RadzenRow Class="g-3">
                <RadzenColumn Size="12">
                    <RadzenFormField Text="Search">
                        <RadzenTextBox @bind-Value="searchTerm" @bind-Value:after="OnFilterChange" 
                                      Placeholder="Search by username or email" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn Size="12">
                    <RadzenFormField Text="Role">
                        <RadzenDropDown @bind-Value="selectedRole" @bind-Value:after="OnFilterChange"
                                       Data="@roleOptions" 
                                       ValueProperty="Value" 
                                       TextProperty="Text"
                                       Placeholder="All Roles" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn Size="12">
                    <RadzenFormField Text="Page Size">
                        <RadzenDropDown @bind-Value="pageSize" @bind-Value:after="OnFilterChange"
                                       Data="@pageSizeOptions" 
                                       ValueProperty="Value" 
                                       TextProperty="Text" />
                    </RadzenFormField>
                </RadzenColumn>
                <RadzenColumn Size="12">
                    <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.End" Style="height: 100%;">
                        <RadzenButton Text="Search" 
                                     Icon="search" 
                                     ButtonStyle="ButtonStyle.Primary" 
                                     Click="ApplyFilters" />
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>
        </RadzenStack>
    </RadzenCard>

    <!-- Statistics -->
    <RadzenRow Class="g-3">
        <RadzenColumn Size="12">
            <RadzenCard Style="text-align: center;">
                <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem">
                    <RadzenText TextStyle="TextStyle.H4" Style="color: var(--rz-primary); font-weight: bold;">
                        @totalUsers
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2">Total Users</RadzenText>
                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>
        <RadzenColumn Size="12">
            <RadzenCard Style="text-align: center;">
                <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem">
                    <RadzenText TextStyle="TextStyle.H4" Style="color: var(--rz-success); font-weight: bold;">
                        @adminCount
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2">Administrators</RadzenText>
                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>
        <RadzenColumn Size="12">
            <RadzenCard Style="text-align: center;">
                <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem">
                    <RadzenText TextStyle="TextStyle.H4" Style="color: var(--rz-info); font-weight: bold;">
                        @managerCount
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2">Managers</RadzenText>
                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>
        <RadzenColumn Size="12">
            <RadzenCard Style="text-align: center;">
                <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem">
                    <RadzenText TextStyle="TextStyle.H4" Style="color: var(--rz-warning); font-weight: bold;">
                        @userCount
                    </RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2">Regular Users</RadzenText>
                </RadzenStack>
            </RadzenCard>
        </RadzenColumn>
    </RadzenRow>

    <!-- Users Table -->
    <RadzenCard>
        <RadzenStack Orientation="Orientation.Vertical" Gap="1rem">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                <RadzenIcon Icon="list" Style="color: var(--rz-primary);" />
                <RadzenText TextStyle="TextStyle.H6">Users</RadzenText>
            </RadzenStack>
            
            @if (isLoading)
            {
                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="1rem" Style="padding: 2rem;">
                    <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                    <RadzenText TextStyle="TextStyle.Body2">Loading users...</RadzenText>
                </RadzenStack>
            }
            else if (users?.Any() == true)
            {
                <RadzenDataGrid Data="@users" TItem="UserDto" AllowPaging="true" PageSize="@pageSize" 
                               AllowSorting="true" FilterMode="FilterMode.Advanced" 
                               class="rz-datagrid-custom">
                    <Columns>
                        <RadzenDataGridColumn TItem="UserDto" Property="UserName" Title="Username" Width="200px">
                            <Template Context="user">
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                                    <RadzenBadge Text="@user.UserName.Substring(0, 1).ToUpper()" 
                                                BadgeStyle="BadgeStyle.Primary" 
                                                BadgeSize="BadgeSize.Large" />
                                    <RadzenStack Orientation="Orientation.Vertical" Gap="0.25rem">
                                        <RadzenText TextStyle="TextStyle.Body1" Style="font-weight: bold;">@user.UserName</RadzenText>
                                        <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary);">ID: @user.Id</RadzenText>
                                    </RadzenStack>
                                </RadzenStack>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="UserDto" Property="Email" Title="Email" Width="250px">
                            <Template Context="user">
                                <RadzenStack Orientation="Orientation.Vertical" Gap="0.25rem">
                                    <RadzenText TextStyle="TextStyle.Body2">@user.Email</RadzenText>
                                    @if (user.EmailConfirmed)
                                    {
                                        <RadzenBadge Text="Verified" BadgeStyle="BadgeStyle.Success" BadgeSize="BadgeSize.Small" />
                                    }
                                    else
                                    {
                                        <RadzenBadge Text="Unverified" BadgeStyle="BadgeStyle.Warning" BadgeSize="BadgeSize.Small" />
                                    }
                                </RadzenStack>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="UserDto" Property="Role" Title="Role" Width="100px">
                            <Template Context="user">
                                <RadzenBadge Text="@user.Role" BadgeStyle="@GetRoleBadgeStyle(user.Role)" />
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="UserDto" Property="EmailConfirmed" Title="Email Confirmed" Width="120px">
                            <Template Context="user">
                                @if (user.EmailConfirmed)
                                {
                                    <RadzenBadge Text="Yes" BadgeStyle="BadgeStyle.Success" />
                                }
                                else
                                {
                                    <RadzenBadge Text="No" BadgeStyle="BadgeStyle.Warning" />
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="UserDto" Property="CreatedAt" Title="Created" Width="150px">
                            <Template Context="user">
                                <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary);">
                                    @user.CreatedAt.ToString("yyyy-MM-dd HH:mm")
                                </RadzenText>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="UserDto" Property="UpdatedAt" Title="Updated" Width="150px">
                            <Template Context="user">
                                @if (user.UpdatedAt.HasValue)
                                {
                                    <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary);">
                                        @user.UpdatedAt.Value.ToString("yyyy-MM-dd HH:mm")
                                    </RadzenText>
                                }
                                else
                                {
                                    <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary);">-</RadzenText>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="UserDto" Title="Warehouses" Width="120px" Sortable="false" Filterable="false">
                            <Template Context="user">
                                <RadzenStack Orientation="Orientation.Vertical" Gap="0.25rem">
                                    @if (user.AssignedWarehouses?.Any() == true)
                                    {
                                        <RadzenText TextStyle="TextStyle.Caption">@user.AssignedWarehouses.Count warehouses</RadzenText>
                                        @if (!string.IsNullOrEmpty(user.DefaultWarehouseName))
                                        {
                                            <RadzenBadge Text="@user.DefaultWarehouseName" BadgeStyle="BadgeStyle.Info" BadgeSize="BadgeSize.Small" />
                                        }
                                    }
                                    else
                                    {
                                        <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-warning);">No assignments</RadzenText>
                                    }
                                </RadzenStack>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="UserDto" Title="Actions" Width="200px" Sortable="false" Filterable="false">
                            <Template Context="user">
                                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.25rem">
                                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Primary" 
                                                 Variant="Variant.Outlined" Size="ButtonSize.Small"
                                                 Click="@(() => EditUser(user))" title="Edit User" />
                                    <RadzenButton Icon="business" ButtonStyle="ButtonStyle.Info" 
                                                 Variant="Variant.Outlined" Size="ButtonSize.Small"
                                                 Click="@(() => ManageWarehouseAssignments(user))" title="Manage Warehouses" />
                                    <RadzenButton Icon="key" ButtonStyle="ButtonStyle.Warning" 
                                                 Variant="Variant.Outlined" Size="ButtonSize.Small"
                                                 Click="@(() => ChangePassword(user))" title="Change Password" />
                                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" 
                                                 Variant="Variant.Outlined" Size="ButtonSize.Small"
                                                 Click="@(() => DeleteUser(user))" title="Delete User" 
                                                 Disabled="false" />
                                </RadzenStack>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            }
            else
            {
                <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="1rem" Style="padding: 2rem;">
                    <RadzenIcon Icon="people" Style="font-size: 3rem; color: var(--rz-text-secondary);" />
                    <RadzenText TextStyle="TextStyle.H6" Style="color: var(--rz-text-secondary);">No users found</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-secondary);">Try adjusting your filters or check back later.</RadzenText>
                </RadzenStack>
            }
        </RadzenStack>
    </RadzenCard>
</RadzenStack>

</AdminGuard>

<!-- Dialogs are now handled by DialogService -->

@code {
    private List<UserDto>? users;
    private bool isLoading = true;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;
    private int totalUsers = 0;
    private int adminCount = 0;
    private int managerCount = 0;
    private int userCount = 0;
    private string searchTerm = "";
    private string selectedRole = "";
    // private string? currentUserId; // Removed: was never initialized

    private List<RoleOption> roleOptions = new()
    {
        new() { Value = "", Text = "All Roles" },
        new() { Value = "Admin", Text = "Admin" },
        new() { Value = "Manager", Text = "Manager" },
        new() { Value = "User", Text = "User" }
    };

    private List<PageSizeOption> pageSizeOptions = new()
    {
        new() { Value = 10, Text = "10 per page" },
        new() { Value = 25, Text = "25 per page" },
        new() { Value = 50, Text = "50 per page" },
        new() { Value = 100, Text = "100 per page" }
    };

    // Modal states - now handled by DialogService
    private UserDto? selectedUser;
    private UpdateUserDto editUser = new();
    private CreateUserDto createUser = new();
    private ChangePasswordDto passwordDto = new();
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        // Get current user ID for preventing self-deletion
        // This would need to be implemented based on your auth system
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("console.log", "LoadUsers called");
            isLoading = true;
            StateHasChanged();

            var result = await UserService.GetUsersAsync(currentPage, pageSize, 
                string.IsNullOrEmpty(searchTerm) ? null : searchTerm,
                string.IsNullOrEmpty(selectedRole) ? null : selectedRole);

            await JSRuntime.InvokeVoidAsync("console.log", "UserService.GetUsersAsync result:", result);

            if (result?.Success == true && result.Data != null)
            {
                users = result.Data.Items?.ToList();
                totalPages = (int)Math.Ceiling((double)result.Data.total / pageSize);
                totalUsers = result.Data.total;
                
                await JSRuntime.InvokeVoidAsync("console.log", $"Loaded {users?.Count ?? 0} users");
                
                // Calculate role statistics
                if (users?.Any() == true)
                {
                    adminCount = users.Count(u => u.Role == "Admin");
                    managerCount = users.Count(u => u.Role == "Manager");
                    userCount = users.Count(u => u.Role == "User");
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.log", "Failed to load users or result is null");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading users:", ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnFilterChange()
    {
        currentPage = 1;
        await LoadUsers();
    }

    private async Task ApplyFilters()
    {
        currentPage = 1;
        await LoadUsers();
    }

    private async Task RefreshUsers()
    {
        await LoadUsers();
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await LoadUsers();
        }
    }

    private async Task ExportUsers()
    {
        try
        {
            var success = await UserService.ExportUsersAsync(
                string.IsNullOrEmpty(searchTerm) ? null : searchTerm,
                string.IsNullOrEmpty(selectedRole) ? null : selectedRole);
            
            if (success)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Users exported successfully!");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error exporting users. Please try again.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error exporting users:", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", $"Error exporting users: {ex.Message}");
        }
    }

    private async Task EditUser(UserDto user)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("alert", $"EditUser called for user: {user.UserName}");
            await JSRuntime.InvokeVoidAsync("console.log", "EditUser called for user:", user.UserName);
            
            selectedUser = user;
            editUser = new UpdateUserDto
            {
                UserName = user.UserName,
                Email = user.Email,
                Role = user.Role,
                EmailConfirmed = user.EmailConfirmed
            };
            
            await JSRuntime.InvokeVoidAsync("console.log", "Opening edit dialog...");
            
            await DialogService.OpenAsync("Edit User", ds => CreateEditUserDialog(ds), new DialogOptions
            {
                Width = "500px",
                Height = "auto",
                CloseDialogOnOverlayClick = true,
                CloseDialogOnEsc = true
            });
            
            await JSRuntime.InvokeVoidAsync("console.log", "Edit dialog opened successfully");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error in EditUser:", ex.Message);
        }
    }


    private async Task OnSubmitEditUser(UpdateUserDto model, DialogService ds)
    {
        if (selectedUser == null) return;

        try
        {
            isSaving = true;
            StateHasChanged();

            var result = await UserService.UpdateUserAsync(selectedUser.Id, editUser);
            
            if (result?.Success == true)
            {
                await JSRuntime.InvokeVoidAsync("alert", "User updated successfully!");
                ds.Close();
                selectedUser = null;
                editUser = new();
                await LoadUsers();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error updating user: {result?.ErrorMessage ?? "Unknown error"}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating user: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task ChangePassword(UserDto user)
    {
        selectedUser = user;
        passwordDto = new ChangePasswordDto();
        
        await DialogService.OpenAsync("Change Password", ds => CreateChangePasswordDialog(ds), new DialogOptions
        {
            Width = "400px",
            Height = "auto",
            CloseDialogOnOverlayClick = true,
            CloseDialogOnEsc = true
        });
    }


    private async Task CreateUser()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("alert", "CreateUser called");
            await JSRuntime.InvokeVoidAsync("console.log", "CreateUser called");
            
            createUser = new CreateUserDto();
            
            await JSRuntime.InvokeVoidAsync("console.log", "Opening create dialog...");
            
            await DialogService.OpenAsync("Create User", ds => CreateUserDialog(ds), new DialogOptions
            {
                Width = "500px",
                Height = "auto",
                CloseDialogOnOverlayClick = true,
                CloseDialogOnEsc = true
            });
            
            await JSRuntime.InvokeVoidAsync("console.log", "Create dialog opened successfully");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error in CreateUser:", ex.Message);
        }
    }


    private async Task OnSubmitPassword(ChangePasswordDto model, DialogService ds)
    {
        if (selectedUser == null) return;

        try
        {
            isSaving = true;
            StateHasChanged();

            var result = await UserService.ChangePasswordAsync(selectedUser.Id, passwordDto);
            
            if (result?.Success == true)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Password changed successfully!");
                ds.Close();
                selectedUser = null;
                passwordDto = new();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error changing password: {result?.ErrorMessage ?? "Unknown error"}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error changing password: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task OnSubmitCreateUser(CreateUserDto model, DialogService ds)
    {
        try
        {
            isSaving = true;
            StateHasChanged();

            var result = await UserService.CreateUserAsync(createUser);
            
            if (result?.Success == true)
            {
                await JSRuntime.InvokeVoidAsync("alert", "User created successfully!");
                ds.Close();
                createUser = new();
                await LoadUsers();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error creating user: {result?.ErrorMessage ?? "Unknown error"}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error creating user: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task DeleteUser(UserDto user)
    {
        // Note: Self-deletion prevention removed due to currentUserId not being initialized

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Are you sure you want to delete user '{user.UserName}'? This action cannot be undone.");
        
        if (confirmed)
        {
            try
            {
                var result = await UserService.DeleteUserAsync(user.Id);
                
                if (result?.Success == true)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "User deleted successfully!");
                    await LoadUsers();
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"Error deleting user: {result?.ErrorMessage ?? "Unknown error"}");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting user: {ex.Message}");
            }
        }
    }

    // Warehouse assignment management methods
    private async Task ManageWarehouseAssignments(UserDto user)
    {
        try
        {
            selectedUser = user;
            
            await DialogService.OpenAsync($"Manage Warehouses - {user.UserName}", ds => CreateWarehouseAssignmentDialog(ds), new DialogOptions
            {
                Width = "900px",
                Height = "700px",
                CloseDialogOnOverlayClick = false,
                CloseDialogOnEsc = true
            });
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error managing warehouse assignments:", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", $"Error managing warehouse assignments: {ex.Message}");
        }
    }

    private RenderFragment CreateWarehouseAssignmentDialog(DialogService ds) => builder =>
    {
        builder.OpenComponent<Inventory.UI.Components.Admin.UserWarehouseManagement>(0);
        builder.AddAttribute(1, "UserId", selectedUser?.Id ?? "");
        builder.AddAttribute(2, "UserName", selectedUser?.UserName ?? "");
        builder.AddAttribute(3, "OnAssignmentChanged", EventCallback.Factory.Create(this, async () => 
        {
            // Refresh user data when assignments change
            await LoadUsers();
        }));
        builder.CloseComponent();

        builder.OpenElement(1, "div");
        builder.AddAttribute(2, "style", "margin-top: 1rem; text-align: right;");
        
        builder.OpenComponent<RadzenButton>(3);
        builder.AddAttribute(4, "Text", "Close");
        builder.AddAttribute(5, "ButtonStyle", ButtonStyle.Light);
        builder.AddAttribute(6, "Click", EventCallback.Factory.Create(this, () => ds.Close()));
        builder.CloseComponent();
        
        builder.CloseElement();
    };

    private RenderFragment CreateEditUserDialog(DialogService ds) => builder =>
    {
        builder.OpenComponent<RadzenTemplateForm<UpdateUserDto>>(0);
        builder.AddAttribute(1, "Data", editUser);
        builder.AddAttribute(2, "Submit", EventCallback.Factory.Create<UpdateUserDto>(this, (model) => OnSubmitEditUser(model, ds)));
        builder.AddAttribute(3, "ChildContent", (RenderFragment<EditContext>)((editContext) => (builder2) =>
        {
            builder2.OpenComponent<DataAnnotationsValidator>(0);
            builder2.CloseComponent();

            builder2.OpenComponent<RadzenStack>(1);
            builder2.AddAttribute(2, "Orientation", Orientation.Vertical);
            builder2.AddAttribute(3, "Gap", "1rem");
            builder2.AddAttribute(4, "ChildContent", (RenderFragment)((builder3) =>
            {
                builder3.OpenComponent<RadzenFormField>(0);
                builder3.AddAttribute(1, "Text", "Username");
                builder3.AddAttribute(2, "ChildContent", (RenderFragment)((builder4) =>
                {
                    builder4.OpenComponent<RadzenTextBox>(0);
                    builder4.AddAttribute(1, "Value", editUser.UserName);
                    builder4.AddAttribute(2, "ValueChanged", EventCallback.Factory.Create<string>(this, (value) => editUser.UserName = value));
                    builder4.AddAttribute(3, "Style", "width: 100%");
                    builder4.CloseComponent();
                }));
                builder3.CloseComponent();

                builder3.OpenComponent<RadzenFormField>(1);
                builder3.AddAttribute(1, "Text", "Email");
                builder3.AddAttribute(2, "ChildContent", (RenderFragment)((builder4) =>
                {
                    builder4.OpenComponent<RadzenTextBox>(0);
                    builder4.AddAttribute(1, "Value", editUser.Email);
                    builder4.AddAttribute(2, "ValueChanged", EventCallback.Factory.Create<string>(this, (value) => editUser.Email = value));
                    builder4.AddAttribute(3, "Style", "width: 100%");
                    builder4.CloseComponent();
                }));
                builder3.CloseComponent();

                builder3.OpenComponent<RadzenFormField>(2);
                builder3.AddAttribute(1, "Text", "Role");
                builder3.AddAttribute(2, "ChildContent", (RenderFragment)((builder4) =>
                {
                    builder4.OpenComponent<RadzenDropDown<string>>(0);
                    builder4.AddAttribute(1, "Data", roleOptions);
                    builder4.AddAttribute(2, "ValueProperty", "Value");
                    builder4.AddAttribute(3, "TextProperty", "Text");
                    builder4.AddAttribute(4, "Value", editUser.Role);
                    builder4.AddAttribute(5, "ValueChanged", EventCallback.Factory.Create<string>(this, (value) => editUser.Role = value));
                    builder4.AddAttribute(6, "Style", "width: 100%");
                    builder4.CloseComponent();
                }));
                builder3.CloseComponent();

                builder3.OpenComponent<RadzenFormField>(3);
                builder3.AddAttribute(1, "Text", "Email Confirmed");
                builder3.AddAttribute(2, "ChildContent", (RenderFragment)((builder4) =>
                {
                    builder4.OpenComponent<RadzenCheckBox<bool>>(0);
                    builder4.AddAttribute(1, "Value", editUser.EmailConfirmed);
                    builder4.AddAttribute(2, "ValueChanged", EventCallback.Factory.Create<bool>(this, (value) => editUser.EmailConfirmed = value));
                    builder4.CloseComponent();
                }));
                builder3.CloseComponent();

                builder3.OpenComponent<RadzenStack>(4);
                builder3.AddAttribute(1, "Orientation", Orientation.Horizontal);
                builder3.AddAttribute(2, "JustifyContent", JustifyContent.End);
                builder3.AddAttribute(3, "Gap", "0.5rem");
                builder3.AddAttribute(4, "Style", "margin-top: 1rem");
                builder3.AddAttribute(5, "ChildContent", (RenderFragment)((builder4) =>
                {
                    builder4.OpenComponent<RadzenButton>(0);
                    builder4.AddAttribute(1, "Text", "Cancel");
                    builder4.AddAttribute(2, "ButtonStyle", ButtonStyle.Light);
                    builder4.AddAttribute(3, "Click", EventCallback.Factory.Create(this, () => ds.Close()));
                    builder4.CloseComponent();

                    builder4.OpenComponent<RadzenButton>(1);
                    builder4.AddAttribute(1, "Text", "Save");
                    builder4.AddAttribute(2, "ButtonStyle", ButtonStyle.Primary);
                    builder4.AddAttribute(3, "ButtonType", ButtonType.Submit);
                    builder4.AddAttribute(4, "Disabled", isSaving);
                    builder4.CloseComponent();
                }));
                builder3.CloseComponent();
            }));
            builder2.CloseComponent();
        }));
        builder.CloseComponent();
    };

    private RenderFragment CreateChangePasswordDialog(DialogService ds) => builder =>
    {
        builder.OpenComponent<RadzenTemplateForm<ChangePasswordDto>>(0);
        builder.AddAttribute(1, "Data", passwordDto);
        builder.AddAttribute(2, "Submit", EventCallback.Factory.Create<ChangePasswordDto>(this, (model) => OnSubmitPassword(model, ds)));
        builder.AddAttribute(3, "ChildContent", (RenderFragment<EditContext>)((editContext) => (builder2) =>
        {
            builder2.OpenComponent<DataAnnotationsValidator>(0);
            builder2.CloseComponent();

            builder2.OpenComponent<RadzenStack>(1);
            builder2.AddAttribute(2, "Orientation", Orientation.Vertical);
            builder2.AddAttribute(3, "Gap", "1rem");
            builder2.AddAttribute(4, "ChildContent", (RenderFragment)((builder3) =>
            {
                builder3.OpenComponent<RadzenFormField>(0);
                builder3.AddAttribute(1, "Text", "New Password");
                builder3.AddAttribute(2, "ChildContent", (RenderFragment)((builder4) =>
                {
                    builder4.OpenComponent<RadzenPassword>(0);
                    builder4.AddAttribute(1, "Value", passwordDto.NewPassword);
                    builder4.AddAttribute(2, "ValueChanged", EventCallback.Factory.Create<string>(this, (value) => passwordDto.NewPassword = value));
                    builder4.AddAttribute(3, "Style", "width: 100%");
                    builder4.CloseComponent();
                }));
                builder3.CloseComponent();

                builder3.OpenComponent<RadzenFormField>(1);
                builder3.AddAttribute(1, "Text", "Confirm Password");
                builder3.AddAttribute(2, "ChildContent", (RenderFragment)((builder4) =>
                {
                    builder4.OpenComponent<RadzenPassword>(0);
                    builder4.AddAttribute(1, "Value", passwordDto.ConfirmPassword);
                    builder4.AddAttribute(2, "ValueChanged", EventCallback.Factory.Create<string>(this, (value) => passwordDto.ConfirmPassword = value));
                    builder4.AddAttribute(3, "Style", "width: 100%");
                    builder4.CloseComponent();
                }));
                builder3.CloseComponent();

                builder3.OpenComponent<RadzenStack>(2);
                builder3.AddAttribute(1, "Orientation", Orientation.Horizontal);
                builder3.AddAttribute(2, "JustifyContent", JustifyContent.End);
                builder3.AddAttribute(3, "Gap", "0.5rem");
                builder3.AddAttribute(4, "Style", "margin-top: 1rem");
                builder3.AddAttribute(5, "ChildContent", (RenderFragment)((builder4) =>
                {
                    builder4.OpenComponent<RadzenButton>(0);
                    builder4.AddAttribute(1, "Text", "Cancel");
                    builder4.AddAttribute(2, "ButtonStyle", ButtonStyle.Light);
                    builder4.AddAttribute(3, "Click", EventCallback.Factory.Create(this, () => ds.Close()));
                    builder4.CloseComponent();

                    builder4.OpenComponent<RadzenButton>(1);
                    builder4.AddAttribute(1, "Text", "Change Password");
                    builder4.AddAttribute(2, "ButtonStyle", ButtonStyle.Primary);
                    builder4.AddAttribute(3, "ButtonType", ButtonType.Submit);
                    builder4.AddAttribute(4, "Disabled", isSaving);
                    builder4.CloseComponent();
                }));
                builder3.CloseComponent();
            }));
            builder2.CloseComponent();
        }));
        builder.CloseComponent();
    };

    private RenderFragment CreateUserDialog(DialogService ds) => builder =>
    {
        builder.OpenComponent<RadzenTemplateForm<CreateUserDto>>(0);
        builder.AddAttribute(1, "Data", createUser);
        builder.AddAttribute(2, "Submit", EventCallback.Factory.Create<CreateUserDto>(this, (model) => OnSubmitCreateUser(model, ds)));
        builder.AddAttribute(3, "ChildContent", (RenderFragment<EditContext>)((editContext) => (builder2) =>
        {
            builder2.OpenComponent<DataAnnotationsValidator>(0);
            builder2.CloseComponent();

            builder2.OpenComponent<RadzenStack>(1);
            builder2.AddAttribute(2, "Orientation", Orientation.Vertical);
            builder2.AddAttribute(3, "Gap", "1rem");
            builder2.AddAttribute(4, "ChildContent", (RenderFragment)((builder3) =>
            {
                builder3.OpenComponent<RadzenFormField>(0);
                builder3.AddAttribute(1, "Text", "Username");
                builder3.AddAttribute(2, "ChildContent", (RenderFragment)((builder4) =>
                {
                    builder4.OpenComponent<RadzenTextBox>(0);
                    builder4.AddAttribute(1, "Value", createUser.UserName);
                    builder4.AddAttribute(2, "ValueChanged", EventCallback.Factory.Create<string>(this, (value) => createUser.UserName = value));
                    builder4.AddAttribute(3, "Style", "width: 100%");
                    builder4.CloseComponent();
                }));
                builder3.CloseComponent();

                builder3.OpenComponent<RadzenFormField>(1);
                builder3.AddAttribute(1, "Text", "Email");
                builder3.AddAttribute(2, "ChildContent", (RenderFragment)((builder4) =>
                {
                    builder4.OpenComponent<RadzenTextBox>(0);
                    builder4.AddAttribute(1, "Value", createUser.Email);
                    builder4.AddAttribute(2, "ValueChanged", EventCallback.Factory.Create<string>(this, (value) => createUser.Email = value));
                    builder4.AddAttribute(3, "Style", "width: 100%");
                    builder4.CloseComponent();
                }));
                builder3.CloseComponent();

                builder3.OpenComponent<RadzenFormField>(2);
                builder3.AddAttribute(1, "Text", "Password");
                builder3.AddAttribute(2, "ChildContent", (RenderFragment)((builder4) =>
                {
                    builder4.OpenComponent<RadzenPassword>(0);
                    builder4.AddAttribute(1, "Value", createUser.Password);
                    builder4.AddAttribute(2, "ValueChanged", EventCallback.Factory.Create<string>(this, (value) => createUser.Password = value));
                    builder4.AddAttribute(3, "Style", "width: 100%");
                    builder4.CloseComponent();
                }));
                builder3.CloseComponent();

                builder3.OpenComponent<RadzenFormField>(3);
                builder3.AddAttribute(1, "Text", "Role");
                builder3.AddAttribute(2, "ChildContent", (RenderFragment)((builder4) =>
                {
                    builder4.OpenComponent<RadzenDropDown<string>>(0);
                    builder4.AddAttribute(1, "Data", roleOptions);
                    builder4.AddAttribute(2, "ValueProperty", "Value");
                    builder4.AddAttribute(3, "TextProperty", "Text");
                    builder4.AddAttribute(4, "Value", createUser.Role);
                    builder4.AddAttribute(5, "ValueChanged", EventCallback.Factory.Create<string>(this, (value) => createUser.Role = value));
                    builder4.AddAttribute(6, "Style", "width: 100%");
                    builder4.CloseComponent();
                }));
                builder3.CloseComponent();

                builder3.OpenComponent<RadzenStack>(4);
                builder3.AddAttribute(1, "Orientation", Orientation.Horizontal);
                builder3.AddAttribute(2, "JustifyContent", JustifyContent.End);
                builder3.AddAttribute(3, "Gap", "0.5rem");
                builder3.AddAttribute(4, "Style", "margin-top: 1rem");
                builder3.AddAttribute(5, "ChildContent", (RenderFragment)((builder4) =>
                {
                    builder4.OpenComponent<RadzenButton>(0);
                    builder4.AddAttribute(1, "Text", "Cancel");
                    builder4.AddAttribute(2, "ButtonStyle", ButtonStyle.Light);
                    builder4.AddAttribute(3, "Click", EventCallback.Factory.Create(this, () => ds.Close()));
                    builder4.CloseComponent();

                    builder4.OpenComponent<RadzenButton>(1);
                    builder4.AddAttribute(1, "Text", "Create User");
                    builder4.AddAttribute(2, "ButtonStyle", ButtonStyle.Primary);
                    builder4.AddAttribute(3, "ButtonType", ButtonType.Submit);
                    builder4.AddAttribute(4, "Disabled", isSaving);
                    builder4.CloseComponent();
                }));
                builder3.CloseComponent();
            }));
            builder2.CloseComponent();
        }));
        builder.CloseComponent();
    };

    private BadgeStyle GetRoleBadgeStyle(string role)
    {
        return role switch
        {
            "Admin" => BadgeStyle.Danger,
            "Manager" => BadgeStyle.Warning,
            "User" => BadgeStyle.Primary,
            _ => BadgeStyle.Secondary
        };
    }

    public class RoleOption
    {
        public string Value { get; set; } = "";
        public string Text { get; set; } = "";
    }

    public class PageSizeOption
    {
        public int Value { get; set; }
        public string Text { get; set; } = "";
    }
}