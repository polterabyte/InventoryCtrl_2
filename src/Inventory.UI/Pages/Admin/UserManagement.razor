@page "/admin/users"
@using Inventory.Shared.DTOs
@using Inventory.UI.Services
@using Inventory.UI.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@inject IUserManagementService UserService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>User Management - Inventory Control</PageTitle>

<AdminGuard>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2><i class="fas fa-users me-2"></i>User Management</h2>
                <div class="btn-group" role="group">
                    <button class="btn btn-outline-primary" @onclick="RefreshUsers">
                        <i class="fas fa-sync-alt me-1"></i>Refresh
                    </button>
                    <button class="btn btn-outline-success" @onclick="ExportUsers">
                        <i class="fas fa-download me-1"></i>Export
                    </button>
                </div>
            </div>

            <!-- Filters -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-filter me-2"></i>Filters</h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-4">
                            <label class="form-label">Search</label>
                            <input type="text" class="form-control" @bind="searchTerm" @bind:after="OnFilterChange" 
                                   placeholder="Search by username or email" />
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Role</label>
                            <select class="form-select" @bind="selectedRole" @bind:after="OnFilterChange">
                                <option value="">All Roles</option>
                                <option value="Admin">Admin</option>
                                <option value="Manager">Manager</option>
                                <option value="User">User</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Page Size</label>
                            <select class="form-select" @bind="pageSize" @bind:after="OnFilterChange">
                                <option value="10">10 per page</option>
                                <option value="25">25 per page</option>
                                <option value="50">50 per page</option>
                                <option value="100">100 per page</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <div class="d-flex gap-2 mt-4">
                                <button class="btn btn-primary" @onclick="ApplyFilters">
                                    <i class="fas fa-search me-1"></i>Search
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Statistics -->
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="card text-center">
                        <div class="card-body">
                            <h5 class="card-title text-primary">@totalUsers</h5>
                            <p class="card-text">Total Users</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-center">
                        <div class="card-body">
                            <h5 class="card-title text-success">@adminCount</h5>
                            <p class="card-text">Administrators</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-center">
                        <div class="card-body">
                            <h5 class="card-title text-info">@managerCount</h5>
                            <p class="card-text">Managers</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-center">
                        <div class="card-body">
                            <h5 class="card-title text-warning">@userCount</h5>
                            <p class="card-text">Regular Users</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Users Table -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-list me-2"></i>Users</h5>
                </div>
                <div class="card-body p-0">
                    @if (isLoading)
                    {
                        <div class="text-center p-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading users...</p>
                        </div>
                    }
                    else if (users?.Any() == true)
                    {
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Username</th>
                                        <th>Email</th>
                                        <th>Role</th>
                                        <th>Email Confirmed</th>
                                        <th>Created</th>
                                        <th>Updated</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var user in users)
                                    {
                                        <tr>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    <div class="avatar-sm bg-primary text-white rounded-circle d-flex align-items-center justify-content-center me-2">
                                                        @user.UserName.Substring(0, 1).ToUpper()
                                                    </div>
                                                    <div>
                                                        <div class="fw-bold">@user.UserName</div>
                                                        <small class="text-muted">ID: @user.Id</small>
                                                    </div>
                                                </div>
                                            </td>
                                            <td>
                                                <div>
                                                    <div>@user.Email</div>
                                                    @if (user.EmailConfirmed)
                                                    {
                                                        <small class="text-success"><i class="fas fa-check-circle me-1"></i>Verified</small>
                                                    }
                                                    else
                                                    {
                                                        <small class="text-warning"><i class="fas fa-exclamation-circle me-1"></i>Unverified</small>
                                                    }
                                                </div>
                                            </td>
                                            <td>
                                                <span class="badge @GetRoleBadgeClass(user.Role)">
                                                    @user.Role
                                                </span>
                                            </td>
                                            <td>
                                                @if (user.EmailConfirmed)
                                                {
                                                    <span class="badge bg-success">Yes</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-warning">No</span>
                                                }
                                            </td>
                                            <td>
                                                <small class="text-muted">@user.CreatedAt.ToString("yyyy-MM-dd HH:mm")</small>
                                            </td>
                                            <td>
                                                @if (user.UpdatedAt.HasValue)
                                                {
                                                    <small class="text-muted">@user.UpdatedAt.Value.ToString("yyyy-MM-dd HH:mm")</small>
                                                }
                                                else
                                                {
                                                    <small class="text-muted">-</small>
                                                }
                                            </td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => EditUser(user)" title="Edit User">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-warning" @onclick="() => ChangePassword(user)" title="Change Password">
                                                        <i class="fas fa-key"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteUser(user)" title="Delete User" disabled="@(user.Id == currentUserId)">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination -->
                        @if (totalPages > 1)
                        {
                            <div class="card-footer">
                                <nav aria-label="Users pagination">
                                    <ul class="pagination justify-content-center mb-0">
                                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(1)" disabled="@(currentPage == 1)">
                                                <i class="fas fa-angle-double-left"></i>
                                            </button>
                                        </li>
                                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(currentPage - 1)" disabled="@(currentPage == 1)">
                                                <i class="fas fa-angle-left"></i>
                                            </button>
                                        </li>
                                        
                                        @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                                        {
                                            <li class="page-item @(i == currentPage ? "active" : "")">
                                                <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                                            </li>
                                        }
                                        
                                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(currentPage + 1)" disabled="@(currentPage == totalPages)">
                                                <i class="fas fa-angle-right"></i>
                                            </button>
                                        </li>
                                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(totalPages)" disabled="@(currentPage == totalPages)">
                                                <i class="fas fa-angle-double-right"></i>
                                            </button>
                                        </li>
                                    </ul>
                                </nav>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center p-4">
                            <i class="fas fa-users fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">No users found</h5>
                            <p class="text-muted">Try adjusting your filters or check back later.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Edit User Modal -->
@if (showEditModal && selectedUser != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-edit me-2"></i>Edit User
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseEditModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="editUser" OnValidSubmit="SaveUser">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label class="form-label">Username</label>
                            <InputText class="form-control" @bind-Value="editUser.UserName" />
                            <ValidationMessage For="@(() => editUser.UserName)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <InputText class="form-control" @bind-Value="editUser.Email" />
                            <ValidationMessage For="@(() => editUser.Email)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Role</label>
                            <InputSelect class="form-select" @bind-Value="editUser.Role">
                                <option value="User">User</option>
                                <option value="Manager">Manager</option>
                                <option value="Admin">Admin</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => editUser.Role)" />
                        </div>
                        <div class="mb-3">
                            <div class="form-check">
                                <InputCheckbox class="form-check-input" @bind-Value="editUser.EmailConfirmed" />
                                <label class="form-check-label">Email Confirmed</label>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Cancel</button>
                            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                Save Changes
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

<!-- Change Password Modal -->
@if (showPasswordModal && selectedUser != null)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="fas fa-key me-2"></i>Change Password for @selectedUser.UserName
                    </h5>
                    <button type="button" class="btn-close" @onclick="ClosePasswordModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="passwordDto" OnValidSubmit="SavePassword">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label class="form-label">New Password</label>
                            <InputText type="password" class="form-control" @bind-Value="passwordDto.NewPassword" />
                            <ValidationMessage For="@(() => passwordDto.NewPassword)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Confirm Password</label>
                            <InputText type="password" class="form-control" @bind-Value="passwordDto.ConfirmPassword" />
                            <ValidationMessage For="@(() => passwordDto.ConfirmPassword)" />
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="ClosePasswordModal">Cancel</button>
                            <button type="submit" class="btn btn-warning" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                Change Password
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<UserDto>? users;
    private bool isLoading = true;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;
    private int totalUsers = 0;
    private int adminCount = 0;
    private int managerCount = 0;
    private int userCount = 0;
    private string searchTerm = "";
    private string selectedRole = "";
    private string? currentUserId;

    // Modal states
    private bool showEditModal = false;
    private bool showPasswordModal = false;
    private UserDto? selectedUser;
    private UpdateUserDto editUser = new();
    private ChangePasswordDto passwordDto = new();
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        // Get current user ID for preventing self-deletion
        // This would need to be implemented based on your auth system
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var result = await UserService.GetUsersAsync(currentPage, pageSize, 
                string.IsNullOrEmpty(searchTerm) ? null : searchTerm,
                string.IsNullOrEmpty(selectedRole) ? null : selectedRole);

            if (result?.Success == true && result.Data != null)
            {
                users = result.Data.Items?.ToList();
                totalPages = (int)Math.Ceiling((double)result.Data.TotalCount / pageSize);
                totalUsers = result.Data.TotalCount;
                
                // Calculate role statistics
                if (users?.Any() == true)
                {
                    adminCount = users.Count(u => u.Role == "Admin");
                    managerCount = users.Count(u => u.Role == "Manager");
                    userCount = users.Count(u => u.Role == "User");
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading users:", ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnFilterChange()
    {
        currentPage = 1;
        await LoadUsers();
    }

    private async Task ApplyFilters()
    {
        currentPage = 1;
        await LoadUsers();
    }

    private async Task RefreshUsers()
    {
        await LoadUsers();
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await LoadUsers();
        }
    }

    private async Task ExportUsers()
    {
        try
        {
            var success = await UserService.ExportUsersAsync(
                string.IsNullOrEmpty(searchTerm) ? null : searchTerm,
                string.IsNullOrEmpty(selectedRole) ? null : selectedRole);
            
            if (success)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Users exported successfully!");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error exporting users. Please try again.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error exporting users:", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", $"Error exporting users: {ex.Message}");
        }
    }

    private void EditUser(UserDto user)
    {
        selectedUser = user;
        editUser = new UpdateUserDto
        {
            UserName = user.UserName,
            Email = user.Email,
            Role = user.Role,
            EmailConfirmed = user.EmailConfirmed
        };
        showEditModal = true;
    }

    private void CloseEditModal()
    {
        showEditModal = false;
        selectedUser = null;
        editUser = new();
    }

    private async Task SaveUser()
    {
        if (selectedUser == null) return;

        try
        {
            isSaving = true;
            StateHasChanged();

            var result = await UserService.UpdateUserAsync(selectedUser.Id, editUser);
            
            if (result?.Success == true)
            {
                await JSRuntime.InvokeVoidAsync("alert", "User updated successfully!");
                CloseEditModal();
                await LoadUsers();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error updating user: {result?.ErrorMessage ?? "Unknown error"}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating user: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private void ChangePassword(UserDto user)
    {
        selectedUser = user;
        passwordDto = new ChangePasswordDto();
        showPasswordModal = true;
    }

    private void ClosePasswordModal()
    {
        showPasswordModal = false;
        selectedUser = null;
        passwordDto = new();
    }

    private async Task SavePassword()
    {
        if (selectedUser == null) return;

        try
        {
            isSaving = true;
            StateHasChanged();

            var result = await UserService.ChangePasswordAsync(selectedUser.Id, passwordDto);
            
            if (result?.Success == true)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Password changed successfully!");
                ClosePasswordModal();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error changing password: {result?.ErrorMessage ?? "Unknown error"}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error changing password: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task DeleteUser(UserDto user)
    {
        if (user.Id == currentUserId)
        {
            await JSRuntime.InvokeVoidAsync("alert", "You cannot delete your own account!");
            return;
        }

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Are you sure you want to delete user '{user.UserName}'? This action cannot be undone.");
        
        if (confirmed)
        {
            try
            {
                var result = await UserService.DeleteUserAsync(user.Id);
                
                if (result?.Success == true)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "User deleted successfully!");
                    await LoadUsers();
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"Error deleting user: {result?.ErrorMessage ?? "Unknown error"}");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting user: {ex.Message}");
            }
        }
    }

    private string GetRoleBadgeClass(string role)
    {
        return role switch
        {
            "Admin" => "bg-danger",
            "Manager" => "bg-warning",
            "User" => "bg-primary",
            _ => "bg-secondary"
        };
    }
}
</AdminGuard>
