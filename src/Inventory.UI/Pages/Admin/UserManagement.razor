@page "/admin/users"
@using Inventory.Shared.DTOs
@using Inventory.Shared.Interfaces
@using Inventory.UI.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Radzen
@using Radzen.Blazor

@inject IUserManagementService UserService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>User Management - Inventory Control</PageTitle>

<AdminGuard>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2><i class="fas fa-users me-2"></i>User Management</h2>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem">
                    <RadzenButton Text="Create User" 
                                 Icon="add" 
                                 ButtonStyle="ButtonStyle.Success" 
                                 @onclick="CreateUser" />
                    <RadzenButton Text="Refresh" 
                                 Icon="refresh" 
                                 ButtonStyle="ButtonStyle.Primary" 
                                 Variant="Variant.Outlined"
                                 @onclick="RefreshUsers" />
                    <RadzenButton Text="Export" 
                                 Icon="download" 
                                 ButtonStyle="ButtonStyle.Success" 
                                 Variant="Variant.Outlined"
                                 @onclick="ExportUsers" />
                </RadzenStack>
            </div>

            <!-- Filters -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-filter me-2"></i>Filters</h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-4">
                            <RadzenFormField Text="Search" class="mb-3">
                                <RadzenTextBox @bind-Value="searchTerm" @bind-Value:after="OnFilterChange" 
                                              Placeholder="Search by username or email" />
                            </RadzenFormField>
                        </div>
                        <div class="col-md-3">
                            <RadzenFormField Text="Role" class="mb-3">
                                <RadzenDropDown @bind-Value="selectedRole" @bind-Value:after="OnFilterChange"
                                               Data="@roleOptions" 
                                               ValueProperty="Value" 
                                               TextProperty="Text"
                                               Placeholder="All Roles" />
                            </RadzenFormField>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Page Size</label>
                            <select class="form-select" @bind="pageSize" @bind:after="OnFilterChange">
                                <option value="10">10 per page</option>
                                <option value="25">25 per page</option>
                                <option value="50">50 per page</option>
                                <option value="100">100 per page</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <div class="d-flex gap-2 mt-4">
                                <button class="btn btn-primary" @onclick="ApplyFilters">
                                    <i class="fas fa-search me-1"></i>Search
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Statistics -->
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="card text-center">
                        <div class="card-body">
                            <h5 class="card-title text-primary">@totalUsers</h5>
                            <p class="card-text">Total Users</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-center">
                        <div class="card-body">
                            <h5 class="card-title text-success">@adminCount</h5>
                            <p class="card-text">Administrators</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-center">
                        <div class="card-body">
                            <h5 class="card-title text-info">@managerCount</h5>
                            <p class="card-text">Managers</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-center">
                        <div class="card-body">
                            <h5 class="card-title text-warning">@userCount</h5>
                            <p class="card-text">Regular Users</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Users Table -->
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="fas fa-list me-2"></i>Users</h5>
                </div>
                <div class="card-body p-0">
                    @if (isLoading)
                    {
                        <div class="text-center p-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading users...</p>
                        </div>
                    }
                    else if (users?.Any() == true)
                    {
                        <RadzenDataGrid Data="@users" TItem="UserDto" AllowPaging="true" PageSize="@pageSize" 
                                       AllowSorting="true" FilterMode="FilterMode.Advanced" 
                                       class="rz-datagrid-custom">
                            <Columns>
                                <RadzenDataGridColumn TItem="UserDto" Property="UserName" Title="Username" Width="200px">
                                    <Template Context="user">
                                        <div class="d-flex align-items-center">
                                            <div class="avatar-sm bg-primary text-white rounded-circle d-flex align-items-center justify-content-center me-2">
                                                @user.UserName.Substring(0, 1).ToUpper()
                                            </div>
                                            <div>
                                                <div class="fw-bold">@user.UserName</div>
                                                <small class="text-muted">ID: @user.Id</small>
                                            </div>
                                        </div>
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="UserDto" Property="Email" Title="Email" Width="250px">
                                    <Template Context="user">
                                        <div>
                                            <div>@user.Email</div>
                                            @if (user.EmailConfirmed)
                                            {
                                                <small class="text-success"><i class="fas fa-check-circle me-1"></i>Verified</small>
                                            }
                                            else
                                            {
                                                <small class="text-warning"><i class="fas fa-exclamation-circle me-1"></i>Unverified</small>
                                            }
                                        </div>
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="UserDto" Property="Role" Title="Role" Width="100px">
                                    <Template Context="user">
                                        <span class="badge @GetRoleBadgeClass(user.Role)">
                                            @user.Role
                                        </span>
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="UserDto" Property="EmailConfirmed" Title="Email Confirmed" Width="120px">
                                    <Template Context="user">
                                        @if (user.EmailConfirmed)
                                        {
                                            <span class="badge bg-success">Yes</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-warning">No</span>
                                        }
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="UserDto" Property="CreatedAt" Title="Created" Width="150px">
                                    <Template Context="user">
                                        <small class="text-muted">@user.CreatedAt.ToString("yyyy-MM-dd HH:mm")</small>
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="UserDto" Property="UpdatedAt" Title="Updated" Width="150px">
                                    <Template Context="user">
                                        @if (user.UpdatedAt.HasValue)
                                        {
                                            <small class="text-muted">@user.UpdatedAt.Value.ToString("yyyy-MM-dd HH:mm")</small>
                                        }
                                        else
                                        {
                                            <small class="text-muted">-</small>
                                        }
                                    </Template>
                                </RadzenDataGridColumn>
                                <RadzenDataGridColumn TItem="UserDto" Title="Actions" Width="150px" Sortable="false" Filterable="false">
                                    <Template Context="user">
                                        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.25rem">
                                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Primary" 
                                                         Variant="Variant.Outlined" Size="ButtonSize.Small"
                                                         @onclick="() => EditUser(user)" title="Edit User" />
                                            <RadzenButton Icon="key" ButtonStyle="ButtonStyle.Warning" 
                                                         Variant="Variant.Outlined" Size="ButtonSize.Small"
                                                         @onclick="() => ChangePassword(user)" title="Change Password" />
                                            <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" 
                                                         Variant="Variant.Outlined" Size="ButtonSize.Small"
                                                         @onclick="() => DeleteUser(user)" title="Delete User" 
                                                         Disabled="false" />
                                        </RadzenStack>
                                    </Template>
                                </RadzenDataGridColumn>
                            </Columns>
                        </RadzenDataGrid>

                        <!-- Pagination -->
                        @if (totalPages > 1)
                        {
                            <div class="card-footer">
                                <nav aria-label="Users pagination">
                                    <ul class="pagination justify-content-center mb-0">
                                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(1)" disabled="@(currentPage == 1)">
                                                <i class="fas fa-angle-double-left"></i>
                                            </button>
                                        </li>
                                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(currentPage - 1)" disabled="@(currentPage == 1)">
                                                <i class="fas fa-angle-left"></i>
                                            </button>
                                        </li>
                                        
                                        @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                                        {
                                            <li class="page-item @(i == currentPage ? "active" : "")">
                                                <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                                            </li>
                                        }
                                        
                                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(currentPage + 1)" disabled="@(currentPage == totalPages)">
                                                <i class="fas fa-angle-right"></i>
                                            </button>
                                        </li>
                                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => ChangePage(totalPages)" disabled="@(currentPage == totalPages)">
                                                <i class="fas fa-angle-double-right"></i>
                                            </button>
                                        </li>
                                    </ul>
                                </nav>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center p-4">
                            <i class="fas fa-users fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">No users found</h5>
                            <p class="text-muted">Try adjusting your filters or check back later.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Edit User Dialog -->

<!-- Change Password Dialog -->

<!-- Create User Dialog -->

@code {
    private List<UserDto>? users;
    private bool isLoading = true;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;
    private int totalUsers = 0;
    private int adminCount = 0;
    private int managerCount = 0;
    private int userCount = 0;
    private string searchTerm = "";
    private string selectedRole = "";
    // private string? currentUserId; // Removed: was never initialized

    private List<RoleOption> roleOptions = new()
    {
        new() { Value = "", Text = "All Roles" },
        new() { Value = "Admin", Text = "Admin" },
        new() { Value = "Manager", Text = "Manager" },
        new() { Value = "User", Text = "User" }
    };

    // Modal states
    private bool showEditModal = false;
    private bool showPasswordModal = false;
    private bool showCreateModal = false;
    private UserDto? selectedUser;
    private UpdateUserDto editUser = new();
    private CreateUserDto createUser = new();
    private ChangePasswordDto passwordDto = new();
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        // Get current user ID for preventing self-deletion
        // This would need to be implemented based on your auth system
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var result = await UserService.GetUsersAsync(currentPage, pageSize, 
                string.IsNullOrEmpty(searchTerm) ? null : searchTerm,
                string.IsNullOrEmpty(selectedRole) ? null : selectedRole);

            if (result?.Success == true && result.Data != null)
            {
                users = result.Data.Items?.ToList();
                totalPages = (int)Math.Ceiling((double)result.Data.TotalCount / pageSize);
                totalUsers = result.Data.TotalCount;
                
                // Calculate role statistics
                if (users?.Any() == true)
                {
                    adminCount = users.Count(u => u.Role == "Admin");
                    managerCount = users.Count(u => u.Role == "Manager");
                    userCount = users.Count(u => u.Role == "User");
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading users:", ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnFilterChange()
    {
        currentPage = 1;
        await LoadUsers();
    }

    private async Task ApplyFilters()
    {
        currentPage = 1;
        await LoadUsers();
    }

    private async Task RefreshUsers()
    {
        await LoadUsers();
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await LoadUsers();
        }
    }

    private async Task ExportUsers()
    {
        try
        {
            var success = await UserService.ExportUsersAsync(
                string.IsNullOrEmpty(searchTerm) ? null : searchTerm,
                string.IsNullOrEmpty(selectedRole) ? null : selectedRole);
            
            if (success)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Users exported successfully!");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error exporting users. Please try again.");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error exporting users:", ex.Message);
            await JSRuntime.InvokeVoidAsync("alert", $"Error exporting users: {ex.Message}");
        }
    }

    private void EditUser(UserDto user)
    {
        selectedUser = user;
        editUser = new UpdateUserDto
        {
            UserName = user.UserName,
            Email = user.Email,
            Role = user.Role,
            EmailConfirmed = user.EmailConfirmed
        };
        showEditModal = true;
    }

    private void CloseEditModal()
    {
        showEditModal = false;
        selectedUser = null;
        editUser = new();
    }

    private async Task OnSubmitEditUser(UpdateUserDto model)
    {
        if (selectedUser == null) return;

        try
        {
            isSaving = true;
            StateHasChanged();

            var result = await UserService.UpdateUserAsync(selectedUser.Id, editUser);
            
            if (result?.Success == true)
            {
                await JSRuntime.InvokeVoidAsync("alert", "User updated successfully!");
                CloseEditModal();
                await LoadUsers();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error updating user: {result?.ErrorMessage ?? "Unknown error"}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error updating user: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private void ChangePassword(UserDto user)
    {
        selectedUser = user;
        passwordDto = new ChangePasswordDto();
        showPasswordModal = true;
    }

    private void ClosePasswordModal()
    {
        showPasswordModal = false;
        selectedUser = null;
        passwordDto = new();
    }

    private void CreateUser()
    {
        createUser = new CreateUserDto();
        showCreateModal = true;
    }

    private void CloseCreateModal()
    {
        showCreateModal = false;
        createUser = new();
    }

    private async Task OnSubmitPassword(ChangePasswordDto model)
    {
        if (selectedUser == null) return;

        try
        {
            isSaving = true;
            StateHasChanged();

            var result = await UserService.ChangePasswordAsync(selectedUser.Id, passwordDto);
            
            if (result?.Success == true)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Password changed successfully!");
                ClosePasswordModal();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error changing password: {result?.ErrorMessage ?? "Unknown error"}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error changing password: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task OnSubmitCreateUser(CreateUserDto model)
    {
        try
        {
            isSaving = true;
            StateHasChanged();

            var result = await UserService.CreateUserAsync(createUser);
            
            if (result?.Success == true)
            {
                await JSRuntime.InvokeVoidAsync("alert", "User created successfully!");
                CloseCreateModal();
                await LoadUsers();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error creating user: {result?.ErrorMessage ?? "Unknown error"}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error creating user: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task DeleteUser(UserDto user)
    {
        // Note: Self-deletion prevention removed due to currentUserId not being initialized

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Are you sure you want to delete user '{user.UserName}'? This action cannot be undone.");
        
        if (confirmed)
        {
            try
            {
                var result = await UserService.DeleteUserAsync(user.Id);
                
                if (result?.Success == true)
                {
                    await JSRuntime.InvokeVoidAsync("alert", "User deleted successfully!");
                    await LoadUsers();
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"Error deleting user: {result?.ErrorMessage ?? "Unknown error"}");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting user: {ex.Message}");
            }
        }
    }

    private string GetRoleBadgeClass(string role)
    {
        return role switch
        {
            "Admin" => "bg-danger",
            "Manager" => "bg-warning",
            "User" => "bg-primary",
            _ => "bg-secondary"
        };
    }

    public class RoleOption
    {
        public string Value { get; set; } = "";
        public string Text { get; set; } = "";
    }
}
</AdminGuard>
