@page "/requests"
@using Radzen
@using Radzen.Blazor
@inject HttpClient Http
@inject NavigationManager Nav

<h3>Заявки</h3>

<div class="row mb-2">
  <div class="col">
    <RadzenButton Text="Обновить" Click="LoadAsync" Style="margin-right:10px" Icon="refresh" />
    <RadzenButton Text="Создать заявку" Click="CreateSample" Icon="add_circle" ButtonStyle="ButtonStyle.Primary" />
  </div>
</div>

@if (error != null)
{
  <RadzenAlert Severity="AlertSeverity.Error">@error</RadzenAlert>
}

<RadzenDataGrid Data="items" TItem="RequestDto" AllowFiltering="true" AllowPaging="true" PageSize="10" AllowSorting="true"
                RowSelect="OnSelect" SelectionMode="DataGridSelectionMode.Single">
  <Columns>
    <RadzenDataGridColumn TItem="RequestDto" Property="Id" Title="#" Width="60px" />
    <RadzenDataGridColumn TItem="RequestDto" Property="Title" Title="Название" />
    <RadzenDataGridColumn TItem="RequestDto" Property="Status" Title="Статус" />
    <RadzenDataGridColumn TItem="RequestDto" Property="CreatedAt" Title="Создано" FormatString="{0:yyyy-MM-dd HH:mm}" />
  </Columns>
  <Template>
    @if (loading)
    {
      <RadzenProgressBar ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    }
  </Template>
</RadzenDataGrid>

@if (selected is not null)
{
  <RadzenCard Style="margin-top:15px">
    <ChildContent>
      <h4>Заявка #@selected.Id — @selected.Title</h4>
      <p><b>Статус:</b> @selected.Status</p>
      @if (selectedDetails is not null)
      {
        <p><b>Создано:</b> @selectedDetails.CreatedAt.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</p>
        <p><b>Обновлено:</b> @(selectedDetails.UpdatedAt.HasValue ? selectedDetails.UpdatedAt.Value.ToLocalTime().ToString("yyyy-MM-dd HH:mm") : "—")</p>
        <p><b>Автор:</b> @selectedDetails.CreatedByUserId</p>
      }
      <p>@selected.Description</p>

      <div class="mb-2">
        <RadzenButton Text="Добавить позицию" Click="OpenAddItem" Icon="add" Style="margin-right:8px" />
        <RadzenButton Text="Отправить" Click="SubmitSelected" Disabled="@(!CanSubmit)" Style="margin-right:8px" />
        <RadzenButton Text="Одобрить" Click="ApproveSelected" Disabled="@(!CanApprove)" Style="margin-right:8px" />
        <RadzenButton Text="Поступило" Click="ReceivedSelected" Disabled="@(!CanReceive)" Style="margin-right:8px" />
        <RadzenButton Text="Установлено" Click="InstalledSelected" Disabled="@(!CanInstall)" Style="margin-right:8px" />
        <RadzenButton Text="Завершить" Click="CompleteSelected" Disabled="@(!CanComplete)" Style="margin-right:8px" />
        <RadzenButton Text="Отменить" Click="CancelSelected" ButtonStyle="ButtonStyle.Secondary" Style="margin-right:8px" />
        <RadzenButton Text="Отклонить" Click="RejectSelected" ButtonStyle="ButtonStyle.Secondary" />
      </div>

      @if (selectedDetails is not null)
      {
        <RadzenCard Style="margin-top:10px">
          <ChildContent>
            <h5>Позиции</h5>
            <RadzenDataGrid Data="selectedDetails.Transactions" TItem="TransactionRow" PageSize="5" AllowPaging="true">
              <Columns>
                <RadzenDataGridColumn TItem="TransactionRow" Property="Type" Title="Тип" />
                <RadzenDataGridColumn TItem="TransactionRow" Property="Quantity" Title="Кол-во" Width="80px" />
                <RadzenDataGridColumn TItem="TransactionRow" Property="Date" Title="Когда" FormatString="{0:yyyy-MM-dd HH:mm}" />
                <RadzenDataGridColumn TItem="TransactionRow" Title="Товар">
                  <Template Context="row">
                    <a href="@(row.ProductId.HasValue ? $"/products/{row.ProductId}" : "/products")" target="_self">Перейти</a>
                  </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="TransactionRow" Title="Склад">
                  <Template Context="row">
                    <a href="@(row.WarehouseId.HasValue ? $"/warehouses/{row.WarehouseId}" : "/warehouses")" target="_self">Перейти</a>
                  </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="TransactionRow" Property="Description" Title="Описание" />
              </Columns>
            </RadzenDataGrid>

            <h5 class="mt-3">История</h5>
            <RadzenDataGrid Data="selectedDetails.History" TItem="HistoryRow" PageSize="5" AllowPaging="true">
              <Columns>
                <RadzenDataGridColumn TItem="HistoryRow" Property="OldStatus" Title="Было" />
                <RadzenDataGridColumn TItem="HistoryRow" Property="NewStatus" Title="Стало" />
                <RadzenDataGridColumn TItem="HistoryRow" Property="ChangedAt" Title="Когда" FormatString="{0:yyyy-MM-dd HH:mm}" />
                <RadzenDataGridColumn TItem="HistoryRow" Property="ChangedByUserId" Title="Кем" />
                <RadzenDataGridColumn TItem="HistoryRow" Property="Comment" Title="Комментарий" />
              </Columns>
            </RadzenDataGrid>
          </ChildContent>
        </RadzenCard>
      }

      <RadzenDialog Visible="@showAddItem" Title="Добавление позиции" Close="CloseAddItem">
        <ChildContent>
          <div class="row">
            <div class="col-md-4">
              <RadzenNumeric @bind-Value="addProductId" Placeholder="ProductId" Style="width:100%" />
            </div>
            <div class="col-md-4">
              <RadzenNumeric @bind-Value="addWarehouseId" Placeholder="WarehouseId" Style="width:100%" />
            </div>
            <div class="col-md-4">
              <RadzenNumeric @bind-Value="addQuantity" Placeholder="Количество" Style="width:100%" />
            </div>
          </div>
          <div class="row mt-2">
            <div class="col-md-12">
              <RadzenTextBox @bind-Value="addDescription" Placeholder="Описание (необязательно)" Style="width:100%" />
            </div>
          </div>
          <div class="mt-3">
            <RadzenButton Text="Сохранить" Click="SaveAddItem" ButtonStyle="ButtonStyle.Primary" Style="margin-right:8px" />
            <RadzenButton Text="Отмена" Click="CloseAddItem" ButtonStyle="ButtonStyle.Secondary" />
          </div>
        </ChildContent>
      </RadzenDialog>
    </ChildContent>
  </RadzenCard>
}

@code {
  class RequestDto { public int Id { get; set; } public string Title { get; set; } = string.Empty; public string? Description { get; set; } public string Status { get; set; } = string.Empty; public DateTime CreatedAt { get; set; } }
  class PagedResponse { public int total { get; set; } public int page { get; set; } public int pageSize { get; set; } public List<RequestDto> items { get; set; } = new(); }
  class RequestDetailsDto { public int Id { get; set; } public string Title { get; set; } = string.Empty; public string? Description { get; set; } public string Status { get; set; } = string.Empty; public DateTime CreatedAt { get; set; } public DateTime? UpdatedAt { get; set; } public string CreatedByUserId { get; set; } = string.Empty; public List<TransactionRow> Transactions { get; set; } = new(); public List<HistoryRow> History { get; set; } = new(); }
  class TransactionRow { public string Type { get; set; } = string.Empty; public int Quantity { get; set; } public DateTime Date { get; set; } public string? Description { get; set; } public int? ProductId { get; set; } public int? WarehouseId { get; set; } }
  class HistoryRow { public string OldStatus { get; set; } = string.Empty; public string NewStatus { get; set; } = string.Empty; public DateTime ChangedAt { get; set; } public string ChangedByUserId { get; set; } = string.Empty; public string? Comment { get; set; } }

  List<RequestDto> items = new();
  RequestDto? selected;
  RequestDetailsDto? selectedDetails;
  bool loading;
  string? error;

  // Add Item dialog state
  bool showAddItem;
  int addProductId;
  int addWarehouseId;
  int addQuantity = 1;
  string? addDescription;

  bool CanSubmit => selected?.Status == "Draft";
  bool CanApprove => selected?.Status == "Submitted";
  bool CanReceive => selected?.Status == "Approved" || selected?.Status == "InProgress";
  bool CanInstall => selected?.Status == "ItemsReceived" || selected?.Status == "InProgress";
  bool CanComplete => selected?.Status == "ItemsInstalled" || selected?.Status == "ItemsReceived" || selected?.Status == "InProgress";

  protected override async Task OnInitializedAsync() => await LoadAsync();

  string ApiBase => Nav.BaseUri.TrimEnd('/');
  string Url(string path) => $"{ApiBase}/{path}";

  async Task LoadAsync()
  {
    loading = true; error = null;
    try
    {
      var resp = await Http.GetFromJsonAsync<PagedResponse>(Url("api/requests?page=1&pageSize=50"));
      items = resp?.items ?? new();
    }
    catch (Exception ex) { error = ex.Message; }
    finally { loading = false; StateHasChanged(); }
  }

  async void OnSelect(RequestDto dto)
  {
    selected = dto;
    try
    {
      selectedDetails = await Http.GetFromJsonAsync<RequestDetailsDto>(Url($"api/requests/{dto.Id}"));
    }
    catch (Exception ex)
    {
      error = ex.Message;
      selectedDetails = null;
    }
    StateHasChanged();
  }

  async Task CreateSample()
  {
    try
    {
      var body = new { title = $"Sample {DateTime.Now:HH:mm:ss}", description = "via UI" };
      var r = await Http.PostAsJsonAsync(Url("api/requests"), body);
      r.EnsureSuccessStatusCode();
      await LoadAsync();
    }
    catch (Exception ex) { error = ex.Message; }
  }

  async Task Transition(int id, string action)
  {
    try
    {
      var r = await Http.PostAsJsonAsync(Url($"api/requests/{id}/{action}"), new { comment = $"{action} via UI" });
      r.EnsureSuccessStatusCode();
      await LoadAsync();
    }
    catch (Exception ex) { error = ex.Message; }
  }

  // Button handlers without inline lambdas
  async Task SubmitSelected()    { if (selected is not null) await Transition(selected.Id, "submit"); }
  async Task ApproveSelected()   { if (selected is not null) await Transition(selected.Id, "approve"); }
  async Task ReceivedSelected()  { if (selected is not null) await Transition(selected.Id, "received"); }
  async Task InstalledSelected() { if (selected is not null) await Transition(selected.Id, "installed"); }
  async Task CompleteSelected()  { if (selected is not null) await Transition(selected.Id, "complete"); }
  async Task CancelSelected()    { if (selected is not null) await Transition(selected.Id, "cancel"); }
  async Task RejectSelected()    { if (selected is not null) await Transition(selected.Id, "reject"); }

  void OpenAddItem()
  {
    addProductId = 0; addWarehouseId = 0; addQuantity = 1; addDescription = null;
    showAddItem = true;
  }

  void CloseAddItem() => showAddItem = false;

  async Task SaveAddItem()
  {
    if (selected is null) { showAddItem = false; return; }
    try
    {
      var body = new { productId = addProductId, warehouseId = addWarehouseId, quantity = addQuantity, locationId = (int?)null, unitPrice = (decimal?)null, description = addDescription };
      var r = await Http.PostAsJsonAsync(Url($"api/requests/{selected.Id}/items"), body);
      r.EnsureSuccessStatusCode();
      showAddItem = false;
      await LoadAsync();
    }
    catch (Exception ex)
    {
      error = ex.Message;
    }
  }
}
