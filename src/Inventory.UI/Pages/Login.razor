@page "/login"

@using Inventory.UI.Services

@inject NavigationManager Navigation
@inject IAuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject IAuthenticationService AuthenticationService

<AuthorizeView>
    <Authorized Context="authContext">
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Redirecting...</span>
            </div>
            <p class="mt-3 text-muted">You are already logged in. Redirecting...</p>
        </div>
    </Authorized>
    <NotAuthorized Context="notAuthContext">
        <div class="text-center mb-5">
            <h2 class="fw-bold text-primary">Inventory Control System</h2>
            <p class="lead text-muted">Manage your inventory efficiently</p>
        </div>

        <div class="container">
            <div class="row justify-content-center">
                <div class="col-md-6">
                    <div class="card shadow-lg border-0">
                        <div class="card-body p-5">
                            <div class="text-center mb-4">
                                <h5 class="card-title fw-bold text-primary">Welcome Back</h5>
                                <p class="text-muted">Sign in to your account</p>
                            </div>
                            
                            <RadzenTemplateForm Data="@loginModel" Submit="@(async (LoginRequest model) => await HandleLogin())">
                                <ChildContent Context="formContext">
                                    <div @onkeypress="@OnKeyPress"></div>
                                
                                <div class="mb-3">
                                    <Radzen.Blazor.RadzenFormField Text="Username:" class="mb-3">
                                        <RadzenTextBox @bind-Value="loginModel.Username" 
                                                      @oninput="OnUsernameChanged"
                                                      class="@GetUsernameClass()" 
                                                      Name="username" />
                                        <RadzenRequiredValidator Component="username" Text="Username is required" />
                                    </Radzen.Blazor.RadzenFormField>
                                </div>
                                
                                <div class="mb-3">
                                    <RadzenFormField Text="Password:" class="mb-3">
                                        <RadzenPassword @bind-Value="loginModel.Password" 
                                                       @oninput="OnPasswordChanged"
                                                       class="@GetPasswordClass()" 
                                                       Name="password" />
                                        <RadzenRequiredValidator Component="password" Text="Password is required" />
                                    </RadzenFormField>
                                </div>
                                
                                <div class="d-grid">
                                    <RadzenButton Text="@GetLoginButtonText()" 
                                                 ButtonType="ButtonType.Submit"
                                                 ButtonStyle="ButtonStyle.Primary" 
                                                 Size="ButtonSize.Large"
                                                 Disabled="@(isLoading || isRedirecting)"
                                                 class="fw-semibold py-3" />
                                </div>
                                </ChildContent>
                            </RadzenTemplateForm>
                            
                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <RadzenAlert AlertStyle="AlertStyle.Danger" class="rz-mt-3" ShowIcon="true">
                                    @errorMessage
                                </RadzenAlert>
                            }
                            
                            @if (!string.IsNullOrEmpty(successMessage))
                            {
                                <RadzenAlert AlertStyle="AlertStyle.Success" class="rz-mt-3" ShowIcon="true">
                                    @successMessage
                                </RadzenAlert>
                            }
                            
                            <div class="mt-4 text-center">
                                <p class="text-muted">Don't have an account? 
                                    <a href="/register" @onclick="NavigateToRegister" 
                                       class="text-primary text-decoration-none fw-semibold" 
                                       style="cursor: pointer; transition: color 0.3s ease;">
                                        Create one here
                                    </a>
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private LoginRequest loginModel = new() { Username = string.Empty, Password = string.Empty };
    private bool isLoading = false;
    private bool isRedirecting = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    
    // Real-time validation
    private bool IsUsernameTouched = false;
    private bool IsPasswordTouched = false;
    private bool IsUsernameValid => !string.IsNullOrWhiteSpace(loginModel.Username) && loginModel.Username.Length >= 3;
    private bool IsPasswordValid => !string.IsNullOrWhiteSpace(loginModel.Password) && loginModel.Password.Length >= 6;

    private async Task HandleLogin(LoginRequest? model = null)
    {
        isLoading = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            var result = await AuthService.LoginAsync(loginModel);
            
            if (result.Success && !string.IsNullOrEmpty(result.Token))
            {
                var customAuthProvider = (ICustomAuthenticationStateProvider)AuthStateProvider;
                await customAuthProvider.MarkUserAsAuthenticatedAsync(result.Token);
                
                successMessage = "Login successful! Redirecting...";
                isRedirecting = true;
                StateHasChanged(); // Force UI update
                
                // Получаем URL для возврата
                var returnUrl = await AuthenticationService.GetReturnUrlAsync();
                
                // Очищаем сохраненный URL
                await AuthenticationService.ClearReturnUrlAsync();
                
                // Smooth redirect with progress indication
                await Task.Delay(650); // Show success message and redirect progress
                
                // Перенаправляем на сохраненный URL или на главную страницу
                var redirectUrl = !string.IsNullOrEmpty(returnUrl) ? $"/{returnUrl}" : "/";
                Navigation.NavigateTo(redirectUrl, true);
            }
            else
            {
                errorMessage = result.ErrorMessage ?? "Login failed. Please check your credentials.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Login error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            isRedirecting = false;
        }
    }

    private void NavigateToRegister()
    {
        Navigation.NavigateTo("/register");
    }
    
    private void OnUsernameChanged(ChangeEventArgs e)
    {
        IsUsernameTouched = true;
        StateHasChanged();
    }
    
    private void OnPasswordChanged(ChangeEventArgs e)
    {
        IsPasswordTouched = true;
        StateHasChanged();
    }
    
    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !isLoading && !isRedirecting)
        {
            await HandleLogin();
        }
    }
    
    private string GetUsernameClass()
    {
        var baseClass = "form-control";
        if (IsUsernameValid) return $"{baseClass} is-valid";
        if (IsUsernameTouched) return $"{baseClass} is-invalid";
        return baseClass;
    }
    
    private string GetPasswordClass()
    {
        var baseClass = "form-control";
        if (IsPasswordValid) return $"{baseClass} is-valid";
        if (IsPasswordTouched) return $"{baseClass} is-invalid";
        return baseClass;
    }

    private string GetLoginButtonText()
    {
        if (isLoading) return "Signing in...";
        if (isRedirecting) return "Redirecting...";
        return "Sign In";
    }
}
