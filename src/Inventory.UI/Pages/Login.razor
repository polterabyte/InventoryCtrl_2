@page "/login"

@using Inventory.UI.Services
@using Inventory.UI.Utilities
@using Radzen
@using Radzen.Blazor

@inject NavigationManager Navigation
@inject IAuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject IAuthenticationService AuthenticationService

<AuthorizeView Context="authState">
    <Authorized>
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="@RadzenUi.Gap">
            <RadzenProgressBarCircular Mode="ProgressBarMode.Indeterminate" Style="width:48px;height:48px;" />
            <RadzenText class="rz-text-secondary">You are already logged in. Redirecting...</RadzenText>
        </RadzenStack>
    </Authorized>
    <NotAuthorized>
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="@RadzenUi.GapLarge" Style="margin-top: 2rem;">
            <RadzenText TextStyle="TextStyle.H4" class="rz-text-primary">Inventory Control System</RadzenText>
            <RadzenText TextStyle="TextStyle.Subtitle1" class="rz-text-secondary">Manage your inventory efficiently</RadzenText>

            <RadzenCard Style="max-width: 520px; width: 100%;">
                <RadzenStack Orientation="Orientation.Vertical" Gap="@RadzenUi.Gap">
                    <RadzenText TextStyle="TextStyle.H5" class="rz-text-primary">Welcome Back</RadzenText>
                    <RadzenText class="rz-text-secondary">Sign in to your account</RadzenText>

                    <RadzenTemplateForm Data="@loginModel" Submit="@(async (LoginRequest model) => await HandleLogin())">
                        <RadzenFormField Text="Username:">
                            <RadzenTextBox @bind-Value="loginModel.Username" Name="username" />
                            <RadzenRequiredValidator Component="username" Text="Username is required" />
                        </RadzenFormField>

                        <RadzenFormField Text="Password:">
                            <RadzenPassword @bind-Value="loginModel.Password" Name="password" />
                            <RadzenRequiredValidator Component="password" Text="Password is required" />
                        </RadzenFormField>

                        <RadzenButton Text="@GetLoginButtonText()" ButtonType="ButtonType.Submit"
                                      ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Medium"
                                      Disabled="@(isLoading || isRedirecting)" />
                    </RadzenTemplateForm>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <RadzenAlert AlertStyle="AlertStyle.Danger" class="rz-mt-3" ShowIcon="true">
                            @errorMessage
                        </RadzenAlert>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <RadzenAlert AlertStyle="AlertStyle.Success" class="rz-mt-3" ShowIcon="true">
                            @successMessage
                        </RadzenAlert>
                    }

                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center">
                        <RadzenText class="rz-text-secondary">
                            Don't have an account?
                            <a href="/register" @onclick="NavigateToRegister" class="rz-text-primary" style="cursor: pointer;">Create one here</a>
                        </RadzenText>
                    </RadzenStack>
                </RadzenStack>
            </RadzenCard>
        </RadzenStack>
    </NotAuthorized>
</AuthorizeView>

@code {
    private LoginRequest loginModel = new() { Username = string.Empty, Password = string.Empty };
    private bool isLoading = false;
    private bool isRedirecting = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    private async Task HandleLogin(LoginRequest? model = null)
    {
        isLoading = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            var result = await AuthService.LoginAsync(loginModel);

            if (result.Success && !string.IsNullOrEmpty(result.Token))
            {
                var customAuthProvider = (ICustomAuthenticationStateProvider)AuthStateProvider;
                await customAuthProvider.MarkUserAsAuthenticatedAsync(result.Token, result.RefreshToken ?? string.Empty);

                successMessage = "Login successful! Redirecting...";
                isRedirecting = true;
                StateHasChanged();

                var returnUrl = await AuthenticationService.GetReturnUrlAsync();
                await AuthenticationService.ClearReturnUrlAsync();

                await Task.Delay(650);

                var redirectUrl = !string.IsNullOrEmpty(returnUrl) ? $"/{returnUrl}" : "/";
                Navigation.NavigateTo(redirectUrl, true);
            }
            else
            {
                errorMessage = result.ErrorMessage ?? "Login failed. Please check your credentials.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Login error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            isRedirecting = false;
        }
    }

    private void NavigateToRegister()
    {
        Navigation.NavigateTo("/register");
    }

    private string GetLoginButtonText()
    {
        if (isLoading) return "Signing in...";
        if (isRedirecting) return "Redirecting...";
        return "Sign In";
    }
}
