@using Inventory.Shared.DTOs
@using Inventory.Shared.Components
@using Radzen
@using Radzen.Blazor
@inherits LocalizedComponentBase

<RadzenCard class="@GetCardCssClass()" Style="@Style">
    <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem">
        <!-- Product info section -->
        <RadzenStack Orientation="Orientation.Vertical" class="flex-grow-1">
            <RadzenText TextStyle="TextStyle.H6" Style="font-weight: bold;">@Product.Name</RadzenText>

            <RadzenStack Orientation="Orientation.Vertical" Gap="0.25rem">
                <RadzenText TextStyle="TextStyle.Body2">
                    <strong>@GetString("Product.SKU"):</strong> @Product.SKU
                </RadzenText>
                <RadzenText TextStyle="TextStyle.Body2">
                    <strong>@GetString("Product.Category"):</strong> @Product.CategoryName
                </RadzenText>
                <RadzenText TextStyle="TextStyle.Body2">
                    <strong>@GetString("Product.Manufacturer"):</strong> @Product.ManufacturerName
                </RadzenText>
            </RadzenStack>

            @if (!string.IsNullOrEmpty(Product.Description))
            {
                <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-secondary); margin-top: 0.5rem;">
                    @Product.Description
                </RadzenText>
            }
        </RadzenStack>

        <!-- Stock and actions section -->
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.End" Gap="0.5rem">
            <RadzenBadge Text="@GetStockText()"
                        BadgeStyle="@GetStockBadgeStyle()"
                        Style="font-size: 0.875rem;" />

            @if (Product.MinStock > 0 || Product.MaxStock > 0)
            {
                <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary);">
                    @GetString("Product.MinMax", Product.MinStock, Product.MaxStock)
                </RadzenText>
            }

            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.25rem">
                <RadzenButton Icon="edit"
                             ButtonStyle="ButtonStyle.Primary"
                             Variant="Variant.Outlined"
                             Size="ButtonSize.Small"
                             Click="() => OnEdit.InvokeAsync(Product)"
                             title="@GetString(\"Action.Edit\")" />

                @if (ShowDeleteButton)
                {
                    <RadzenButton Icon="delete"
                                 ButtonStyle="ButtonStyle.Danger"
                                 Variant="Variant.Outlined"
                                 Size="ButtonSize.Small"
                                 Click="() => OnDelete.InvokeAsync(Product)"
                                 title="@GetString(\"Action.Delete\")" />
                }
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
</RadzenCard>

@code {
    /// <summary>
    /// The product data to display
    /// </summary>
    [Parameter, EditorRequired] public ProductDto Product { get; set; } = new();
    
    /// <summary>
    /// Whether to show the delete button
    /// </summary>
    [Parameter] public bool ShowDeleteButton { get; set; } = true;
    
    /// <summary>
    /// Event callback when the edit button is clicked
    /// </summary>
    [Parameter] public EventCallback<ProductDto> OnEdit { get; set; }
    
    /// <summary>
    /// Event callback when the delete button is clicked
    /// </summary>
    [Parameter] public EventCallback<ProductDto> OnDelete { get; set; }
    
    /// <summary>
    /// Additional CSS classes
    /// </summary>
    [Parameter] public string? CssClass { get; set; }
    
    /// <summary>
    /// Additional inline styles
    /// </summary>
    [Parameter] public string? Style { get; set; }

    private string GetCardCssClass()
    {
        var classes = new List<string> { "mb-3" };
        if (!string.IsNullOrWhiteSpace(CssClass))
            classes.Add(CssClass);
        return string.Join(" ", classes);
    }

    private BadgeStyle GetStockBadgeStyle()
    {
        if (Product.Quantity <= Product.MinStock)
            return BadgeStyle.Danger;
        if (Product.Quantity >= Product.MaxStock)
            return BadgeStyle.Warning;
        return BadgeStyle.Success;
    }
    
    private string GetStockText()
    {
        return $"{FormatNumber(Product.Quantity)} {Product.UnitOfMeasureSymbol}";
    }
}
