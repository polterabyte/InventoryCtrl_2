@using Inventory.Shared.Models
@using Inventory.Shared.Services
@inject INotificationService NotificationService

<div class="toast-notification @GetTypeClass() @GetAnimationClass()" role="alert">
    <div class="toast-header">
        <div class="toast-icon">
            @GetIcon()
        </div>
        <div class="toast-content">
            <h6 class="toast-title">@Notification.Title</h6>
            <p class="toast-message">@Notification.Message</p>
        </div>
        @if (Notification.IsDismissible)
        {
            <button type="button" class="btn-close" @onclick="Dismiss" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        }
    </div>
    
    @if (Notification.OnRetry != null)
    {
        <div class="toast-actions">
            <button type="button" class="btn btn-sm btn-outline-light" @onclick="Retry">
                @(Notification.RetryText ?? "Retry")
            </button>
        </div>
    }
    
    @if (Notification.Duration > 0)
    {
        <div class="toast-progress">
            <div class="toast-progress-bar" style="animation-duration: @(Notification.Duration)ms;"></div>
        </div>
    }
</div>

@code {
    [Parameter] public Notification Notification { get; set; } = new();
    [Parameter] public EventCallback<string> OnDismiss { get; set; }
    [Parameter] public EventCallback OnRetry { get; set; }

    private bool _isAnimating = false;

    protected override void OnInitialized()
    {
        _isAnimating = true;
    }

    private string GetTypeClass()
    {
        return Notification.Type switch
        {
            NotificationType.Success => "toast-success",
            NotificationType.Error => "toast-error",
            NotificationType.Warning => "toast-warning",
            NotificationType.Info => "toast-info",
            NotificationType.Debug => "toast-debug",
            _ => "toast-info"
        };
    }

    private string GetAnimationClass()
    {
        return _isAnimating ? "toast-enter" : "toast-exit";
    }

    private string GetIcon()
    {
        return Notification.Type switch
        {
            NotificationType.Success => "✓",
            NotificationType.Error => "✕",
            NotificationType.Warning => "⚠",
            NotificationType.Info => "ℹ",
            NotificationType.Debug => "🐛",
            _ => "ℹ"
        };
    }

    private async Task Dismiss()
    {
        _isAnimating = false;
        StateHasChanged();
        
        await Task.Delay(300); // Wait for exit animation
        await OnDismiss.InvokeAsync(Notification.Id);
    }

    private async Task Retry()
    {
        Notification.OnRetry?.Invoke();
        await OnRetry.InvokeAsync();
    }
}
