@using Inventory.Shared.Models
@using Inventory.Shared.Services
@using Radzen
@using Radzen.Blazor
@inject IUINotificationService NotificationService

<RadzenAlert AlertStyle="@GetAlertStyle()"
             ShowIcon="true"
             AllowClose="@Notification.IsDismissible"
             Close="@Dismiss"
             Style="@GetAnimationStyle()">
    <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem">
        <RadzenStack Orientation="Orientation.Vertical" class="flex-grow-1" Gap="0.25rem">
            <RadzenText TextStyle="TextStyle.Body1" Style="font-weight: 600;">
                @Notification.Title
            </RadzenText>
            <RadzenText TextStyle="TextStyle.Body2">
                @Notification.Message
            </RadzenText>
        </RadzenStack>

        @if (Notification.OnRetry != null)
        {
            <RadzenButton Text="@(Notification.RetryText ?? "Retry")"
                         Size="ButtonSize.Small"
                         ButtonStyle="ButtonStyle.Light"
                         Variant="Variant.Outlined"
                         Click="Retry" />
        }
    </RadzenStack>
</RadzenAlert>

@code {
    [Parameter] public Notification Notification { get; set; } = new();
    [Parameter] public EventCallback<string> OnDismiss { get; set; }
    [Parameter] public EventCallback OnRetry { get; set; }

    private bool _isAnimating = false;

    protected override void OnInitialized()
    {
        _isAnimating = true;
    }

    private string GetTypeClass()
    {
        return Notification.Type switch
        {
            NotificationType.Success => "toast-success",
            NotificationType.Error => "toast-error",
            NotificationType.Warning => "toast-warning",
            NotificationType.Info => "toast-info",
            NotificationType.Debug => "toast-debug",
            _ => "toast-info"
        };
    }

    private string GetAnimationClass()
    {
        return _isAnimating ? "toast-enter" : "toast-exit";
    }

    private string GetIcon()
    {
        return Notification.Type switch
        {
            NotificationType.Success => "✓",
            NotificationType.Error => "✕",
            NotificationType.Warning => "⚠",
            NotificationType.Info => "ℹ",
            NotificationType.Debug => "🐛",
            _ => "ℹ"
        };
    }

    private async Task Dismiss()
    {
        _isAnimating = false;
        StateHasChanged();
        
        await Task.Delay(300); // Wait for exit animation
        await OnDismiss.InvokeAsync(Notification.Id);
    }

    private async Task Retry()
    {
        Notification.OnRetry?.Invoke();
        await OnRetry.InvokeAsync();
    }

    private AlertStyle GetAlertStyle()
    {
        return Notification.Type switch
        {
            NotificationType.Success => AlertStyle.Success,
            NotificationType.Error => AlertStyle.Danger,
            NotificationType.Warning => AlertStyle.Warning,
            NotificationType.Info => AlertStyle.Info,
            NotificationType.Debug => AlertStyle.Secondary,
            _ => AlertStyle.Info
        };
    }

    private string GetAnimationStyle()
    {
        return _isAnimating ? "animation: toast-enter 0.3s ease-out;" : "animation: toast-exit 0.3s ease-in;";
    }
}
