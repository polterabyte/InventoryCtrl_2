@using Inventory.Shared.DTOs
@using Radzen
@using Radzen.Blazor

<RadzenCard class="mb-3">
    <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem">
        <!-- Product info section -->
        <RadzenStack Orientation="Orientation.Vertical" class="flex-grow-1">
            <RadzenText TextStyle="TextStyle.H6" Style="font-weight: bold;">@Product.Name</RadzenText>

            <RadzenStack Orientation="Orientation.Vertical" Gap="0.25rem">
                <RadzenText TextStyle="TextStyle.Body2">
                    <strong>SKU:</strong> @Product.SKU
                </RadzenText>
                <RadzenText TextStyle="TextStyle.Body2">
                    <strong>Категория:</strong> @Product.CategoryName
                </RadzenText>
                <RadzenText TextStyle="TextStyle.Body2">
                    <strong>Производитель:</strong> @Product.ManufacturerName
                </RadzenText>
            </RadzenStack>

            @if (!string.IsNullOrEmpty(Product.Description))
            {
                <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-secondary); margin-top: 0.5rem;">
                    @Product.Description
                </RadzenText>
            }
        </RadzenStack>

        <!-- Stock and actions section -->
        <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.End" Gap="0.5rem">
            <RadzenBadge Text="@($"{Product.Quantity} {Product.UnitOfMeasureSymbol}")"
                        BadgeStyle="@GetStockBadgeStyle()"
                        Style="font-size: 0.875rem;" />

            @if (Product.MinStock > 0 || Product.MaxStock > 0)
            {
                <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary);">
                    Мин: @Product.MinStock | Макс: @Product.MaxStock
                </RadzenText>
            }

            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.25rem">
                <RadzenButton Icon="edit"
                             ButtonStyle="ButtonStyle.Primary"
                             Variant="Variant.Outlined"
                             Size="ButtonSize.Small"
                             Click="() => OnEdit.InvokeAsync(Product)"
                             title="Изменить" />

                @if (ShowDeleteButton)
                {
                    <RadzenButton Icon="delete"
                                 ButtonStyle="ButtonStyle.Danger"
                                 Variant="Variant.Outlined"
                                 Size="ButtonSize.Small"
                                 Click="() => OnDelete.InvokeAsync(Product)"
                                 title="Удалить" />
                }
            </RadzenStack>
        </RadzenStack>
    </RadzenStack>
</RadzenCard>

@code {
    [Parameter] public ProductDto Product { get; set; } = new();
    [Parameter] public bool ShowDeleteButton { get; set; } = true;
    [Parameter] public EventCallback<ProductDto> OnEdit { get; set; }
    [Parameter] public EventCallback<ProductDto> OnDelete { get; set; }

    private BadgeStyle GetStockBadgeStyle()
    {
        if (Product.Quantity <= Product.MinStock)
            return BadgeStyle.Danger;
        if (Product.Quantity >= Product.MaxStock)
            return BadgeStyle.Warning;
        return BadgeStyle.Success;
    }
}
