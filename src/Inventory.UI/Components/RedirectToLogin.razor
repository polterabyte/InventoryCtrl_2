@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider

<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="text-center mb-5">
                <LoadingSpinner Message="Перенаправление на страницу авторизации..." 
                               LoadingText="Redirecting..." 
                               Color="SpinnerColor.Primary" 
                               Size="SpinnerSize.Large" />
                <h1 class="display-4 text-primary mb-4">Система управления складом</h1>
                <p class="lead text-dark">Эффективное управление товарами и запасами</p>
            </div>
        </div>
    </div>
</div>

@code {
    private bool isRedirecting = false;

    protected override async Task OnInitializedAsync()
    {
        if (!isRedirecting)
        {
            await PerformRedirect();
        }
    }

    private async Task PerformRedirect()
    {
        isRedirecting = true;
        StateHasChanged();

        try
        {
            // Проверяем, есть ли сохраненный URL для возврата
            var returnUrl = await LocalStorage.GetItemAsStringAsync("returnUrl");
            
            // Если нет сохраненного URL, сохраняем текущий
            if (string.IsNullOrEmpty(returnUrl))
            {
                var currentUrl = Navigation.ToBaseRelativePath(Navigation.Uri);
                if (!string.IsNullOrEmpty(currentUrl) && currentUrl != "login")
                {
                    await LocalStorage.SetItemAsStringAsync("returnUrl", currentUrl);
                }
            }

            // Очищаем токен аутентификации, если он есть
            await LocalStorage.RemoveItemAsync("authToken");
            
            // Уведомляем о изменении состояния аутентификации
            if (AuthStateProvider is ICustomAuthenticationStateProvider customProvider)
            {
                await customProvider.MarkUserAsLoggedOutAsync();
            }

            // Небольшая задержка для показа сообщения
            await Task.Delay(800);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Redirect error: {ex.Message}");
        }
        finally
        {
            // Перенаправляем на страницу входа
            Navigation.NavigateTo("/login", true);
        }
    }
}
