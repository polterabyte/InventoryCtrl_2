@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components

@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation

@if (isAuthorized)
{
    @ChildContent
}
else if (showLoading)
{
    <LoadingSpinner Message="@LoadingMessage" 
                   LoadingText="@LoadingText" 
                   Color="@LoadingColor" 
                   Size="@LoadingSize" />
}
else if (showAccessDenied)
{
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-body text-center">
                        <i class="bi bi-shield-exclamation text-danger" style="font-size: 4rem;"></i>
                        <h4 class="mt-3">Access Denied</h4>
                        <p class="text-muted">@AccessDeniedMessage</p>
                        <button class="btn btn-primary" @onclick="GoHome">Go Home</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string? RequiredRole { get; set; }
    [Parameter] public string? RequiredPermission { get; set; }
    [Parameter] public bool RequireAuthentication { get; set; } = true;
    [Parameter] public bool ShowLoading { get; set; } = true;
    [Parameter] public bool ShowAccessDenied { get; set; } = true;
    [Parameter] public string LoadingMessage { get; set; } = "Checking authorization...";
    [Parameter] public string LoadingText { get; set; } = "Loading...";
    [Parameter] public SpinnerColor LoadingColor { get; set; } = SpinnerColor.Primary;
    [Parameter] public SpinnerSize LoadingSize { get; set; } = SpinnerSize.Medium;
    [Parameter] public string AccessDeniedMessage { get; set; } = "You don't have permission to access this resource.";
    [Parameter] public EventCallback OnAccessDenied { get; set; }

    private bool isAuthorized = false;
    private bool showLoading = false;
    private bool showAccessDenied = false;

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthorization();
    }

    private async Task CheckAuthorization()
    {
        showLoading = ShowLoading;
        showAccessDenied = false;
        isAuthorized = false;
        StateHasChanged();

        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (RequireAuthentication && user.Identity?.IsAuthenticated != true)
            {
                Navigation.NavigateTo("/login");
                return;
            }

            if (!string.IsNullOrEmpty(RequiredRole) && !user.IsInRole(RequiredRole))
            {
                await HandleAccessDenied();
                return;
            }

            if (!string.IsNullOrEmpty(RequiredPermission) && !user.HasClaim("Permission", RequiredPermission))
            {
                await HandleAccessDenied();
                return;
            }

            // All checks passed
            isAuthorized = true;
            showLoading = false;
            showAccessDenied = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Authorization check failed: {ex.Message}");
            await HandleAccessDenied();
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task HandleAccessDenied()
    {
        isAuthorized = false;
        showLoading = false;
        
        if (ShowAccessDenied)
        {
            showAccessDenied = true;
        }
        else
        {
            Navigation.NavigateTo("/login");
        }

        if (OnAccessDenied.HasDelegate)
        {
            await OnAccessDenied.InvokeAsync();
        }
    }

    private void GoHome()
    {
        Navigation.NavigateTo("/");
    }
}
