@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Routing
@using Inventory.Shared.Models
@using System.Security.Claims
@using Inventory.UI
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">@AppTitle</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<AuthorizeView>
    <Authorized>
        <div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
            <nav class="nav flex-column">
                @foreach (var item in MenuItems)
                {
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="@item.Url" Match="@(Enum.Parse<NavLinkMatch>(item.Match))">
                            @if (!string.IsNullOrEmpty(item.Icon))
                            {
                                <span class="@item.Icon" aria-hidden="true"></span>
                            }
                            @item.Text
                        </NavLink>
                    </div>
                }
                
                @* Admin links *@
                <AuthorizeView>
                    <Authorized Context="authContext">
                        @if (authContext.User.IsInRole("Admin"))
                        {
                            <div class="nav-item px-3">
                                <NavLink class="nav-link" href="admin/reference-data">
                                    <span class="bi bi-gear" aria-hidden="true"></span>
                                    Управление справочниками
                                </NavLink>
                            </div>
                            <div class="nav-item px-3">
                                <NavLink class="nav-link" href="admin/users">
                                    <span class="bi bi-people" aria-hidden="true"></span>
                                    Управление пользователями
                                </NavLink>
                            </div>
                            <div class="nav-item px-3">
                                <NavLink class="nav-link" href="admin/audit-logs">
                                    <span class="bi bi-clipboard-list" aria-hidden="true"></span>
                                    Audit Logs
                                </NavLink>
                            </div>
                        }
                        @if (authContext.User.IsInRole("SuperUser") || authContext.User.IsInRole("Admin"))
                        {
                            <div class="nav-item px-3">
                                <NavLink class="nav-link" href="debug">
                                    <span class="bi bi-bug" aria-hidden="true"></span>
                                    Debug Logs
                                </NavLink>
                            </div>
                        }
                    </Authorized>
                </AuthorizeView>
                
                @* Logout button *@
                <div class="nav-item px-3 mt-3">
                    <button class="btn btn-outline-danger w-100" @onclick="Logout">
                        <span class="bi bi-box-arrow-right" aria-hidden="true"></span>
                        Выйти
                    </button>
                </div>
            </nav>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    [Parameter] public string AppTitle { get; set; } = "Inventory App";
    [Parameter] public List<NavMenuItem> MenuItems { get; set; } = new();

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task Logout()
    {
        if (AuthStateProvider is ICustomAuthenticationStateProvider customProvider)
        {
            await customProvider.MarkUserAsLoggedOutAsync();
        }
        Navigation.NavigateTo("/", true);
    }

    protected override void OnInitialized()
    {
        if (!MenuItems.Any())
        {
            // Default menu items
            MenuItems = new List<NavMenuItem>
            {
                new() { Text = "Главная", Url = "", Icon = "bi bi-house-door-fill-nav-menu", Match = "All" },
                new() { Text = "Товары", Url = "products", Icon = "bi bi-box-seam" },
                new() { Text = "Категории", Url = "categories", Icon = "bi bi-tags" },
                new() { Text = "Склады", Url = "warehouses", Icon = "bi bi-building" },
                new() { Text = "Отчеты", Url = "reports", Icon = "bi bi-graph-up" }
            };
        }
    }
}
