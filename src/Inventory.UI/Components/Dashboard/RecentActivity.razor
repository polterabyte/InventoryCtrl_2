@using Inventory.Shared.DTOs
@using Inventory.UI.Utilities
@inject IDashboardService DashboardService

<RadzenCard Style="width:100%;">
    <ChildContent>
        <RadzenStack Orientation="Orientation.Vertical" Gap="@RadzenUi.GapLarge">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem" JustifyContent="JustifyContent.SpaceBetween">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                    <RadzenIcon Icon="schedule" />
                    <RadzenText TextStyle="TextStyle.H6">Последняя активность</RadzenText>
                </RadzenStack>

                <RadzenButton Icon="refresh"
                              Text="Обновить"
                              ButtonStyle="ButtonStyle.Secondary"
                              Variant="Variant.Outlined"
                              Size="ButtonSize.Small"
                              Click="RefreshActivity" />
            </RadzenStack>

            <RadzenBusyIndicator IsBusy="@isLoading">
                @if (recentActivity?.RecentTransactions?.Any() == true)
                {
                    <RadzenStack Orientation="Orientation.Vertical" Gap="@RadzenUi.Gap">
                        @foreach (var transaction in recentActivity.RecentTransactions.Take(5))
                        {
                            <RadzenStack Orientation="Orientation.Horizontal" Gap="@RadzenUi.Gap" AlignItems="AlignItems.Start" Style="padding:0.75rem; border:1px solid var(--rz-border); border-radius:var(--rz-border-radius);">
                                <RadzenIcon Icon="@GetTransactionIcon(transaction.Type)" Style="color:@GetTransactionColor(transaction.Type); font-size:1.6rem;" />
                                <RadzenStack Orientation="Orientation.Vertical" Gap="0.3rem" Style="flex:1;">
                                    <RadzenText TextStyle="TextStyle.Body1">
                                        @GetTransactionTitle(transaction.Type) товара <strong>@transaction.ProductName</strong>
                                    </RadzenText>
                                    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center">
                                        <RadzenBadge Text=$"{transaction.Quantity} {transaction.ProductSku}"
                                                     Style="@GetTransactionBadgeStyle(transaction.Type)" />
                                        <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary);">
                                            @transaction.UserName • @transaction.WarehouseName
                                        </RadzenText>
                                    </RadzenStack>
                                    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.25rem" AlignItems="AlignItems.Center" Style="color: var(--rz-text-secondary);">
                                        <RadzenIcon Icon="access_time" />
                                        <RadzenText TextStyle="TextStyle.Caption">@transaction.Date.ToString("dd.MM.yyyy HH:mm")</RadzenText>
                                    </RadzenStack>
                                </RadzenStack>
                            </RadzenStack>
                        }

                        @if (recentActivity.RecentTransactions.Count > 5)
                        {
                            <RadzenButton Text=$"Показать все ({recentActivity.RecentTransactions.Count})"
                                          ButtonStyle="ButtonStyle.Secondary"
                                          Variant="Variant.Outlined"
                                          Icon="list"
                                          Size="ButtonSize.Small" />
                        }
                    </RadzenStack>
                }
                else
                {
                    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="0.5rem" Style="padding:1rem; color: var(--rz-text-secondary);">
                        <RadzenIcon Icon="inbox" Style="font-size:2rem;" />
                        <RadzenText TextStyle="TextStyle.Body1">Нет недавней активности</RadzenText>
                    </RadzenStack>
                }
            </RadzenBusyIndicator>
        </RadzenStack>
    </ChildContent>
</RadzenCard>

@code {
    private RecentActivityDto? recentActivity;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadRecentActivity();
    }

    private async Task LoadRecentActivity()
    {
        try
        {
            isLoading = true;
            recentActivity = await DashboardService.GetRecentActivityAsync();
        }
        catch (Exception ex)
        {
            // Handle error - could show notification
            Console.WriteLine($"Error loading recent activity: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshActivity()
    {
        await LoadRecentActivity();
    }

    private string GetTransactionIcon(string type)
    {
        return type.ToLower() switch
        {
            "income" => "bi bi-arrow-down-circle",
            "outcome" => "bi bi-arrow-up-circle",
            "install" => "bi bi-tools",
            _ => "bi bi-arrow-right-circle"
        };
    }

    private string GetTransactionIconClass(string type)
    {
        return type.ToLower() switch
        {
            "income" => "text-success",
            "outcome" => "text-warning",
            "install" => "text-info",
            _ => "text-primary"
        };
    }

    private string GetTransactionTitle(string type)
    {
        return type.ToLower() switch
        {
            "income" => "Приход",
            "outcome" => "Расход",
            "install" => "Установка",
            _ => "Операция"
        };
    }

    private string GetTransactionBadgeClass(string type)
    {
        return type.ToLower() switch
        {
            "income" => "bg-success",
            "outcome" => "bg-warning",
            "install" => "bg-info",
            _ => "bg-primary"
        };
    }
}
