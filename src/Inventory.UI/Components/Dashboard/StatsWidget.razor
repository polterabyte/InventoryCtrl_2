@using Inventory.Shared.DTOs
@using Inventory.UI.Utilities
@using Inventory.Shared.Components
@inherits LocalizedComponentBase

<RadzenCard class="@GetCardCssClass()" Style="@Style">
    <div class="stats-widget__icon">
        <RadzenIcon Icon="@Icon" Style="@($"font-size:2rem; color:{GetAccentColor()};")" />
    </div>
    <RadzenStack Orientation="Orientation.Vertical" Gap="0.25rem" class="stats-widget__content">
        <span class="stats-value">@FormatValue()</span>
        <span class="stats-label">@Label</span>
        @if (!string.IsNullOrEmpty(SubLabel))
        {
            <span class="stats-sublabel">@SubLabel</span>
        }
    </RadzenStack>
</RadzenCard>

@code {
    /// <summary>
    /// The main label text for the statistic
    /// </summary>
    [Parameter, EditorRequired] public string Label { get; set; } = string.Empty;
    
    /// <summary>
    /// The numeric value to display
    /// </summary>
    [Parameter] public decimal Value { get; set; }
    
    /// <summary>
    /// Optional secondary label text
    /// </summary>
    [Parameter] public string? SubLabel { get; set; }
    
    /// <summary>
    /// Material Design icon name
    /// </summary>
    [Parameter] public string Icon { get; set; } = "insights";
    
    /// <summary>
    /// Theme class for the card (primary, success, warning, danger, info)
    /// </summary>
    [Parameter] public string CardClass { get; set; } = "primary";
    
    /// <summary>
    /// Additional CSS classes to apply
    /// </summary>
    [Parameter] public string? CssClass { get; set; }
    
    /// <summary>
    /// Additional inline styles
    /// </summary>
    [Parameter] public string? Style { get; set; }
    
    /// <summary>
    /// Optional click event handler
    /// </summary>
    [Parameter] public EventCallback OnClick { get; set; }
    
    /// <summary>
    /// Number format string for the value
    /// </summary>
    [Parameter] public string? NumberFormat { get; set; }

    private string GetCardCssClass()
    {
        var classes = new List<string> { "stats-widget", $"border-{CardClass}" };
        if (!string.IsNullOrWhiteSpace(CssClass))
            classes.Add(CssClass);
        return string.Join(" ", classes);
    }

    private string GetAccentColor() => CardClass switch
    {
        "success" => "var(--rz-success)",
        "warning" => "var(--rz-warning)",
        "danger" => "var(--rz-danger)",
        "info" => "var(--rz-info)",
        _ => "var(--rz-primary)"
    };
    
    private string FormatValue()
    {
        return !string.IsNullOrWhiteSpace(NumberFormat)
            ? Value.ToString(NumberFormat, CultureService.CurrentCulture)
            : FormatNumber(Value);
    }
}
