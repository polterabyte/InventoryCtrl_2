@using Radzen.Blazor
@using Inventory.UI.Utils
@using Inventory.UI.Components.Radzen

<RadzenStandardLayout Title="Radzen Components Test">
    <RadzenSpacing Orientation="@RadzenUtils.Vertical" Gap="@RadzenUtils.LargeGap">
        
        @* Buttons Test *@
        <RadzenSpacing Orientation="@RadzenUtils.Vertical" Gap="@RadzenUtils.SmallGap">
            <RadzenText TextStyle="@RadzenUtils.Header4">Buttons</RadzenText>
            <RadzenSpacing Orientation="@RadzenUtils.Horizontal" Gap="@RadzenUtils.SmallGap">
                <RadzenActionButton Text="Primary" Icon="@RadzenUtils.Icons.Add" ButtonStyle="@RadzenUtils.PrimaryButton" />
                <RadzenActionButton Text="Secondary" Icon="@RadzenUtils.Icons.Edit" ButtonStyle="@RadzenUtils.SecondaryButton" />
                <RadzenActionButton Text="Success" Icon="@RadzenUtils.Icons.Check" ButtonStyle="@RadzenUtils.SuccessButton" />
                <RadzenActionButton Text="Danger" Icon="@RadzenUtils.Icons.Delete" ButtonStyle="@RadzenUtils.DangerButton" />
            </RadzenSpacing>
        </RadzenSpacing>

        @* Form Fields Test *@
        <RadzenSpacing Orientation="@RadzenUtils.Vertical" Gap="@RadzenUtils.SmallGap">
            <RadzenText TextStyle="@RadzenUtils.Header4">Form Fields</RadzenText>
            <RadzenFormField Label="Text Input">
                <RadzenTextBox @bind-Value="@testText" Placeholder="Enter text..." />
            </RadzenFormField>
            
            <RadzenFormField Label="Dropdown">
                <RadzenDropDown @bind-Value="@selectedValue" 
                               Data="@dropdownData" 
                               ValueProperty="Value" 
                               TextProperty="Text" 
                               Placeholder="Select option..." />
            </RadzenFormField>
            
            <RadzenFormField Label="Date Picker">
                <RadzenDatePicker @bind-Value="@testDate" />
            </RadzenFormField>
            
            <RadzenFormField Label="Checkbox">
                <RadzenCheckBox @bind-Value="@isChecked" />
            </RadzenFormField>
        </RadzenSpacing>

        @* Data Grid Test *@
        <RadzenSpacing Orientation="@RadzenUtils.Vertical" Gap="@RadzenUtils.SmallGap">
            <RadzenText TextStyle="@RadzenUtils.Header4">Data Grid</RadzenText>
            <RadzenDataGrid Data="@testData" TItem="TestItem" AllowPaging="true" PageSize="@RadzenUtils.StandardPageSize">
                <Columns>
                    <RadzenDataGridColumn TItem="TestItem" Property="Id" Title="ID" Width="100px" />
                    <RadzenDataGridColumn TItem="TestItem" Property="Name" Title="Name" />
                    <RadzenDataGridColumn TItem="TestItem" Property="Value" Title="Value" />
                    <RadzenDataGridColumn TItem="TestItem" Title="Actions">
                        <Template Context="item">
                            <RadzenSpacing Orientation="@RadzenUtils.Horizontal" Gap="@RadzenUtils.SmallGap">
                                <RadzenActionButton Icon="@RadzenUtils.Icons.Edit" ButtonStyle="@RadzenUtils.PrimaryButton" Size="@RadzenUtils.SmallSize" />
                                <RadzenActionButton Icon="@RadzenUtils.Icons.Delete" ButtonStyle="@RadzenUtils.DangerButton" Size="@RadzenUtils.SmallSize" />
                            </RadzenSpacing>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenSpacing>

        @* Notifications Test *@
        <RadzenSpacing Orientation="@RadzenUtils.Vertical" Gap="@RadzenUtils.SmallGap">
            <RadzenText TextStyle="@RadzenUtils.Header4">Notifications</RadzenText>
            <RadzenSpacing Orientation="@RadzenUtils.Horizontal" Gap="@RadzenUtils.SmallGap">
                <RadzenActionButton Text="Success" Icon="@RadzenUtils.Icons.Success" ButtonStyle="@RadzenUtils.SuccessButton" OnClick="@(() => ShowNotification(NotificationSeverity.Success, "Success", "Operation completed successfully"))" />
                <RadzenActionButton Text="Info" Icon="@RadzenUtils.Icons.Info" ButtonStyle="@RadzenUtils.InfoButton" OnClick="@(() => ShowNotification(NotificationSeverity.Info, "Info", "This is an informational message"))" />
                <RadzenActionButton Text="Warning" Icon="@RadzenUtils.Icons.Warning" ButtonStyle="@RadzenUtils.WarningButton" OnClick="@(() => ShowNotification(NotificationSeverity.Warning, "Warning", "Please be careful"))" />
                <RadzenActionButton Text="Error" Icon="@RadzenUtils.Icons.Error" ButtonStyle="@RadzenUtils.DangerButton" OnClick="@(() => ShowNotification(NotificationSeverity.Error, "Error", "Something went wrong"))" />
            </RadzenSpacing>
        </RadzenSpacing>

        @* Layout Test *@
        <RadzenSpacing Orientation="@RadzenUtils.Vertical" Gap="@RadzenUtils.SmallGap">
            <RadzenText TextStyle="@RadzenUtils.Header4">Layout Components</RadzenText>
            <RadzenSpacing Orientation="@RadzenUtils.Horizontal" Gap="@RadzenUtils.StandardGap">
                <RadzenCard Style="flex: 1;">
                    <RadzenText TextStyle="@RadzenUtils.Header5">Card 1</RadzenText>
                    <RadzenText>This is the first card with some content.</RadzenText>
                </RadzenCard>
                <RadzenCard Style="flex: 1;">
                    <RadzenText TextStyle="@RadzenUtils.Header5">Card 2</RadzenText>
                    <RadzenText>This is the second card with some content.</RadzenText>
                </RadzenCard>
            </RadzenSpacing>
        </RadzenSpacing>

    </RadzenSpacing>

    @* Notification Service *@
    <RadzenNotificationWrapper @ref="notificationWrapper" />
</RadzenStandardLayout>

@code {
    private string testText = "";
    private string selectedValue = "";
    private DateTime? testDate = DateTime.Now;
    private bool isChecked = false;
    private RadzenNotificationWrapper notificationWrapper;

    private List<DropdownItem> dropdownData = new()
    {
        new DropdownItem { Value = "1", Text = "Option 1" },
        new DropdownItem { Value = "2", Text = "Option 2" },
        new DropdownItem { Value = "3", Text = "Option 3" }
    };

    private List<TestItem> testData = new()
    {
        new TestItem { Id = 1, Name = "Item 1", Value = "Value 1" },
        new TestItem { Id = 2, Name = "Item 2", Value = "Value 2" },
        new TestItem { Id = 3, Name = "Item 3", Value = "Value 3" },
        new TestItem { Id = 4, Name = "Item 4", Value = "Value 4" },
        new TestItem { Id = 5, Name = "Item 5", Value = "Value 5" }
    };

    private void ShowNotification(NotificationSeverity severity, string summary, string detail)
    {
        notificationWrapper?.ShowNotification(severity, summary, detail);
    }

    public class DropdownItem
    {
        public string Value { get; set; }
        public string Text { get; set; }
    }

    public class TestItem
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Value { get; set; }
    }
}
