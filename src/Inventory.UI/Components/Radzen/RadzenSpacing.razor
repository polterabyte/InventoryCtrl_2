@using Radzen.Blazor
@using Inventory.UI.Utils

@if (Orientation == RadzenUtils.Vertical)
{
    <RadzenStack Orientation="Orientation.Vertical" 
                 Gap="@Gap" 
                 JustifyContent="@JustifyContent" 
                 AlignItems="@AlignItems"
                 Style="@Style"
                 Class="@Class">
        @ChildContent
    </RadzenStack>
}
else
{
    <RadzenStack Orientation="Orientation.Horizontal" 
                 Gap="@Gap" 
                 JustifyContent="@JustifyContent" 
                 AlignItems="@AlignItems"
                 Style="@Style"
                 Class="@Class">
        @ChildContent
    </RadzenStack>
}

@code {
    /// <summary>
    /// Ориентация стека
    /// </summary>
    [Parameter] public Orientation Orientation { get; set; } = RadzenUtils.Vertical;

    /// <summary>
    /// Расстояние между элементами
    /// </summary>
    [Parameter] public string Gap { get; set; } = RadzenUtils.StandardGap;

    /// <summary>
    /// Выравнивание по главной оси
    /// </summary>
    [Parameter] public JustifyContent JustifyContent { get; set; } = JustifyContent.FlexStart;

    /// <summary>
    /// Выравнивание по поперечной оси
    /// </summary>
    [Parameter] public AlignItems AlignItems { get; set; } = AlignItems.FlexStart;

    /// <summary>
    /// Дополнительные стили
    /// </summary>
    [Parameter] public string Style { get; set; } = string.Empty;

    /// <summary>
    /// Дополнительные CSS классы
    /// </summary>
    [Parameter] public string Class { get; set; } = string.Empty;

    /// <summary>
    /// Содержимое стека
    /// </summary>
    [Parameter] public RenderFragment ChildContent { get; set; }
}
