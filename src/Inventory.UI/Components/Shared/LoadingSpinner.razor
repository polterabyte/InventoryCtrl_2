@using Microsoft.AspNetCore.Components

<div class="loading-spinner @GetSpinnerClass()" @attributes="AdditionalAttributes">
    <div class="spinner-border @GetSizeClass() @GetColorClass()" role="status">
        <span class="visually-hidden">@LoadingText</span>
    </div>
    @if (!string.IsNullOrEmpty(Message))
    {
        <div class="loading-message mt-2">
            <p class="text-muted mb-0">@Message</p>
        </div>
    }
</div>

@code {
    [Parameter] public string LoadingText { get; set; } = "Loading...";
    [Parameter] public string Message { get; set; } = string.Empty;
    [Parameter] public SpinnerSize Size { get; set; } = SpinnerSize.Medium;
    [Parameter] public SpinnerColor Color { get; set; } = SpinnerColor.Primary;
    [Parameter] public bool Centered { get; set; } = true;
    [Parameter] public bool FullScreen { get; set; } = false;
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object>? AdditionalAttributes { get; set; }

    private string GetSpinnerClass()
    {
        var classes = new List<string>();
        
        if (Centered) classes.Add("text-center");
        if (FullScreen) classes.Add("loading-fullscreen");
        
        return string.Join(" ", classes);
    }

    private string GetSizeClass()
    {
        return Size switch
        {
            SpinnerSize.Small => "spinner-border-sm",
            SpinnerSize.Medium => "",
            SpinnerSize.Large => "spinner-border-lg",
            _ => ""
        };
    }

    private string GetColorClass()
    {
        return Color switch
        {
            SpinnerColor.Primary => "text-primary",
            SpinnerColor.Secondary => "text-secondary",
            SpinnerColor.Success => "text-success",
            SpinnerColor.Danger => "text-danger",
            SpinnerColor.Warning => "text-warning",
            SpinnerColor.Info => "text-info",
            SpinnerColor.Light => "text-light",
            SpinnerColor.Dark => "text-dark",
            _ => "text-primary"
        };
    }
}
