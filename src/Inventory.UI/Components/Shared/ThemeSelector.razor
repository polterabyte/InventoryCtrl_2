@using Inventory.Shared.Interfaces
@using Inventory.Shared.Models
@using Microsoft.AspNetCore.Components
@using Radzen
@using Radzen.Blazor
@implements IDisposable

@inject IThemeService ThemeService

<div class="theme-selector">
    <RadzenDropDown @bind-Value="@selectedTheme" 
                    Data="@availableThemes" 
                    TextProperty="DisplayName" 
                    ValueProperty="Name"
                    Change="@OnThemeChanged"
                    Placeholder="Select Theme"
                    Style="min-width: 180px;"
                    AllowClear="false">
        <Template Context="theme">
            <div class="theme-option">
                <div class="theme-info">
                    <span class="theme-name">@theme.DisplayName</span>
                    <span class="theme-category @GetCategoryClass(theme.Category)">
                        @theme.Category
                    </span>
                </div>
                <div class="theme-preview">
                    @if (theme.Category == ThemeCategory.Light)
                    {
                        <div class="color-sample light-sample" title="Light theme"></div>
                    }
                    else
                    {
                        <div class="color-sample dark-sample" title="Dark theme"></div>
                    }
                </div>
            </div>
        </Template>
    </RadzenDropDown>
</div>

@code {
    private string selectedTheme = "material";
    private ThemeInfo[] availableThemes = Array.Empty<ThemeInfo>();
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get available themes
            availableThemes = ThemeService.GetAvailableThemes();
            
            // Get current theme
            selectedTheme = ThemeService.GetCurrentTheme();
            
            // Subscribe to theme changes from other sources
            ThemeService.ThemeChanged += OnThemeChangedExternally;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to initialize theme selector: {ex.Message}");
        }
    }
    
    private async Task OnThemeChanged(object value)
    {
        if (value is string themeName && !string.IsNullOrEmpty(themeName))
        {
            try
            {
                await ThemeService.SetThemeAsync(themeName);
                selectedTheme = themeName;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to change theme: {ex.Message}");
            }
        }
    }
    
    private void OnThemeChangedExternally(object? sender, ThemeChangedEventArgs e)
    {
        selectedTheme = e.ThemeName;
        InvokeAsync(StateHasChanged);
    }
    
    private string GetCategoryClass(ThemeCategory category)
    {
        return category == ThemeCategory.Dark ? "category-dark" : "category-light";
    }
    
    public void Dispose()
    {
        if (ThemeService != null)
        {
            ThemeService.ThemeChanged -= OnThemeChangedExternally;
        }
    }
}