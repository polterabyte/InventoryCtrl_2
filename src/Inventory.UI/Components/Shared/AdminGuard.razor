@using Microsoft.AspNetCore.Components
@using Radzen
@using Radzen.Blazor

@inject IAuthenticationService AuthenticationService
@inject NavigationManager Navigation

@if (isLoading)
{
    <RadzenStack Orientation="Orientation.Vertical"
                 AlignItems="AlignItems.Center"
                 JustifyContent="JustifyContent.Center"
                 Style="min-height: 100vh;">
        <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        <RadzenText TextStyle="TextStyle.Body1" Style="margin-top: 1rem;">
            Проверка прав администратора...
        </RadzenText>
    </RadzenStack>
}
else if (isAuthorized)
{
    @ChildContent
}
else
{
    <RadzenStack Orientation="Orientation.Vertical" Gap="1rem" class="container-fluid">
        <RadzenRow JustifyContent="JustifyContent.Center">
            <RadzenColumn Size="12">
                <RadzenCard>
                    <RadzenStack Orientation="Orientation.Vertical"
                                AlignItems="AlignItems.Center"
                                Gap="1rem"
                                Style="text-align: center; padding: 2rem;">
                        <RadzenIcon Icon="security" Style="font-size: 4rem; color: var(--rz-danger);" />
                        <RadzenText TextStyle="TextStyle.H4" Style="color: var(--rz-danger);">
                            Доступ запрещен
                        </RadzenText>
                        <RadzenText TextStyle="TextStyle.Body1">
                            У вас нет прав для доступа к этой странице.
                            Требуется роль администратора.
                        </RadzenText>
                        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem">
                            <RadzenButton Text="На главную"
                                         Icon="home"
                                         ButtonStyle="ButtonStyle.Primary"
                                         Click="GoHome" />
                            <RadzenButton Text="Назад"
                                         Icon="arrow_back"
                                         ButtonStyle="ButtonStyle.Light"
                                         Variant="Variant.Outlined"
                                         Click="GoBack" />
                        </RadzenStack>
                    </RadzenStack>
                </RadzenCard>
            </RadzenColumn>
        </RadzenRow>
    </RadzenStack>
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private bool isLoading = true;
    private bool isAuthorized = false;

    protected override async Task OnInitializedAsync()
    {
        await CheckAdminAuthorization();
    }

    private async Task CheckAdminAuthorization()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Проверяем аутентификацию
            var isAuth = await AuthenticationService.IsAuthenticatedAsync();
            if (!isAuth)
            {
                isAuthorized = false;
                return;
            }

            // Проверяем валидность токена
            var isTokenValid = await AuthenticationService.IsTokenValidAsync();
            if (!isTokenValid)
            {
                isAuthorized = false;
                return;
            }

            // Здесь нужно добавить проверку роли администратора
            // Пока что просто разрешаем доступ для тестирования
            // В реальном приложении нужно получить информацию о ролях пользователя
            isAuthorized = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Admin authorization check failed: {ex.Message}");
            isAuthorized = false;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void GoHome()
    {
        Navigation.NavigateTo("/");
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }
}
