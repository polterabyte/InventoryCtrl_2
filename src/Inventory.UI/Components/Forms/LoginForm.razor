@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Json
@using Inventory.Shared.DTOs
@using Inventory.Shared.Interfaces
@using Radzen
@using Radzen.Blazor
@inject HttpClient Http
@inject IAuthService AuthService

<h3>@Title</h3>

<RadzenTemplateForm Data="@loginModel" Submit="@(async (LoginRequest model) => await HandleLogin())">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <RadzenFormField Text="Логин:" class="rz-mb-3">
            <RadzenTextBox @bind-Value="loginModel.Username" Name="username" />
            <RadzenRequiredValidator Component="username" Text="Логин обязателен" />
        </RadzenFormField>
    </div>
    <div class="mb-3">
        <RadzenFormField Text="Пароль:" class="rz-mb-3">
            <RadzenPassword @bind-Value="loginModel.Password" Name="password" />
            <RadzenRequiredValidator Component="password" Text="Пароль обязателен" />
        </RadzenFormField>
    </div>
    <div class="mb-3">
        <RadzenButton Text="@(isLoading ? "Вход..." : "Войти")"
                      ButtonType="ButtonType.Submit"
                      ButtonStyle="ButtonStyle.Primary"
                      Disabled="@isLoading" />
    </div>
</RadzenTemplateForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <RadzenAlert AlertStyle="AlertStyle.Danger" ShowIcon="true" class="rz-mt-3">
        @errorMessage
    </RadzenAlert>
}

@if (ShowRegisterLink)
{
    <p>Нет аккаунта? <a href="@RegisterLink">Зарегистрироваться</a></p>
}

@code {
    [Parameter] public string Title { get; set; } = "Вход";
    [Parameter] public bool ShowRegisterLink { get; set; } = true;
    [Parameter] public string RegisterLink { get; set; } = "/register";
    [Parameter] public EventCallback<AuthResult> OnLoginSuccess { get; set; }
    [Parameter] public EventCallback<string> OnLoginError { get; set; }

    private LoginRequest loginModel = new() { Username = string.Empty, Password = string.Empty };
    private string? errorMessage;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        errorMessage = null;
        isLoading = true;

        try
        {
            var result = await AuthService.LoginAsync(loginModel);
            
            if (result.Success)
            {
                await OnLoginSuccess.InvokeAsync(result);
            }
            else
            {
                errorMessage = result.ErrorMessage ?? "Ошибка авторизации";
                await OnLoginError.InvokeAsync(errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка: {ex.Message}";
            await OnLoginError.InvokeAsync(errorMessage);
        }
        finally
        {
            isLoading = false;
        }
    }
}
