@using Microsoft.AspNetCore.Components.Forms
@using Inventory.Shared.DTOs
@using Inventory.Shared.Interfaces
@using Radzen
@using Radzen.Blazor
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject IManufacturerService ManufacturerService
@inject IProductModelService ProductModelService
@inject IProductGroupService ProductGroupService
@inject IUnitOfMeasureApiService UnitOfMeasureService

<RadzenStack Orientation="Orientation.Vertical" Gap="1rem">
    <RadzenText TextStyle="TextStyle.H5">@Title</RadzenText>

    <RadzenTemplateForm Data="productModel" Submit="@(async (CreateProductDto model) => await HandleSubmit())">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Name and SKU row -->
        <RadzenRow Gap="1rem">
            <RadzenColumn Size="12" SizeMd="6">
                <RadzenFormField Text="Название товара:">
                    <RadzenTextBox @bind-Value="productModel.Name" Name="productName" />
                    <RadzenRequiredValidator Component="productName" Text="Название товара обязательно" />
                </RadzenFormField>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMd="6">
                <RadzenFormField Text="SKU:">
                    <RadzenTextBox @bind-Value="productModel.SKU" Name="productSku" />
                    <RadzenRequiredValidator Component="productSku" Text="SKU обязательно" />
                </RadzenFormField>
            </RadzenColumn>
        </RadzenRow>

        <!-- Description -->
        <RadzenFormField Text="Описание:">
            <RadzenTextArea @bind-Value="productModel.Description" Rows="3" Name="description" />
        </RadzenFormField>

        <!-- Category and Manufacturer row -->
        <RadzenRow Gap="1rem">
            <RadzenColumn Size="12" SizeMd="6">
                <RadzenFormField Text="Категория:">
                    <RadzenDropDown @bind-Value="productModel.CategoryId"
                                   Data="@categories"
                                   ValueProperty="Id"
                                   TextProperty="Name"
                                   Placeholder="Выберите категорию"
                                   Name="categoryId" />
                </RadzenFormField>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMd="6">
                <RadzenFormField Text="Производитель:">
                    <RadzenDropDown @bind-Value="productModel.ManufacturerId"
                                   @bind-Value:after="@OnManufacturerChanged"
                                   Data="@manufacturers"
                                   ValueProperty="Id"
                                   TextProperty="Name"
                                   Placeholder="Выберите производителя"
                                   Name="manufacturerId" />
                </RadzenFormField>
            </RadzenColumn>
        </RadzenRow>

        <!-- Product Model and Group row -->
        <RadzenRow Gap="1rem">
            <RadzenColumn Size="12" SizeMd="6">
                <RadzenFormField Text="Модель товара:">
                    <RadzenDropDown @bind-Value="productModel.ProductModelId"
                                   Data="@productModels"
                                   ValueProperty="Id"
                                   TextProperty="Name"
                                   Placeholder="Выберите модель"
                                   Name="productModelId" />
                </RadzenFormField>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMd="6">
                <RadzenFormField Text="Группа товара:">
                    <RadzenDropDown @bind-Value="productModel.ProductGroupId"
                                   Data="@productGroups"
                                   ValueProperty="Id"
                                   TextProperty="Name"
                                   Placeholder="Выберите группу"
                                   Name="productGroupId" />
                </RadzenFormField>
            </RadzenColumn>
        </RadzenRow>

        <!-- Unit of Measure and Active status row -->
        <RadzenRow Gap="1rem">
            <RadzenColumn Size="12" SizeMd="6">
                <RadzenFormField Text="Единица измерения:">
                    <RadzenDropDown @bind-Value="productModel.UnitOfMeasureId"
                                   Data="@unitOfMeasures"
                                   ValueProperty="Id"
                                   TextProperty="Name"
                                   Placeholder="Выберите единицу измерения"
                                   Name="unitOfMeasureId" />
                </RadzenFormField>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMd="6">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                    <RadzenCheckBox @bind-Value="productModel.IsActive" Name="isActive" />
                    <RadzenLabel Text="Активный товар" For="isActive" />
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>

        <!-- Min and Max stock row -->
        <RadzenRow Gap="1rem">
            <RadzenColumn Size="12" SizeMd="6">
                <RadzenFormField Text="Минимальный остаток:">
                    <RadzenNumeric @bind-Value="productModel.MinStock" Name="minStock" />
                </RadzenFormField>
            </RadzenColumn>
            <RadzenColumn Size="12" SizeMd="6">
                <RadzenFormField Text="Максимальный остаток:">
                    <RadzenNumeric @bind-Value="productModel.MaxStock" Name="maxStock" />
                </RadzenFormField>
            </RadzenColumn>
        </RadzenRow>

        <!-- Note -->
        <RadzenFormField Text="Примечание:">
            <RadzenTextArea @bind-Value="productModel.Note" Rows="2" Name="note" />
        </RadzenFormField>

        <!-- Action buttons -->
        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem">
            <RadzenButton Text="@(isLoading ? "Сохранение..." : SubmitButtonText)"
                         ButtonStyle="ButtonStyle.Primary"
                         ButtonType="ButtonType.Submit"
                         Disabled="@isLoading" />
            <RadzenButton Text="Отмена"
                         ButtonStyle="ButtonStyle.Light"
                         Variant="Variant.Outlined"
                         Click="OnCancel" />
        </RadzenStack>
    </RadzenTemplateForm>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <RadzenAlert AlertStyle="AlertStyle.Danger" ShowIcon="true">
            @errorMessage
        </RadzenAlert>
    }
</RadzenStack>

@code {
    [Parameter] public string Title { get; set; } = "Товар";
    [Parameter] public CreateProductDto? InitialProduct { get; set; }
    [Parameter] public EventCallback<ProductDto> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private CreateProductDto productModel = new();
    private List<CategoryDto> categories = new();
    private List<ManufacturerDto> manufacturers = new();
    private List<ProductModelDto> productModels = new();
    private List<ProductGroupDto> productGroups = new();
    private List<UnitOfMeasureDto> unitOfMeasures = new();
    private string? errorMessage;
    private bool isLoading = false;

    private string SubmitButtonText => InitialProduct == null ? "Создать товар" : "Обновить товар";

    protected override async Task OnInitializedAsync()
    {
        await LoadReferenceData();
        
        if (InitialProduct != null)
        {
            productModel = InitialProduct;
        }
    }

    private async Task LoadReferenceData()
    {
        try
        {
            categories = await CategoryService.GetAllCategoriesAsync();
            manufacturers = await ManufacturerService.GetAllManufacturersAsync();
            productModels = await ProductModelService.GetAllProductModelsAsync();
            productGroups = await ProductGroupService.GetAllProductGroupsAsync();
            var unitOfMeasuresResponse = await UnitOfMeasureService.GetAllAsync();
            unitOfMeasures = unitOfMeasuresResponse.Data ?? new List<UnitOfMeasureDto>();
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка загрузки справочников: {ex.Message}";
        }
    }

    private async Task OnManufacturerChanged()
    {
        if (productModel.ManufacturerId > 0)
        {
            try
            {
                productModels = await ProductModelService.GetProductModelsByManufacturerAsync(productModel.ManufacturerId);
                productModel.ProductModelId = 0; // Reset model selection
                StateHasChanged();
            }
            catch (Exception ex)
            {
                errorMessage = $"Ошибка загрузки моделей: {ex.Message}";
            }
        }
        else
        {
            productModels = new List<ProductModelDto>();
            productModel.ProductModelId = 0;
            StateHasChanged();
        }
    }

    private async Task HandleSubmit()
    {
        errorMessage = null;
        isLoading = true;

        try
        {
            if (InitialProduct == null)
            {
                var result = await ProductService.CreateProductAsync(productModel);
                await OnSave.InvokeAsync(result);
            }
            else
            {
                // TODO: Implement update functionality
                // var updateDto = new UpdateProductDto { ... };
                // var result = await ProductService.UpdateProductAsync(productId, updateDto);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка сохранения: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
