@using Microsoft.AspNetCore.Components.Authorization
@using Inventory.Shared.Interfaces
@using Inventory.Shared.DTOs
@using Blazored.LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage

<div class="user-greeting">
    <AuthorizeView>
        <Authorized>
            <div class="user-info">
                <span class="greeting-text">
                    <i class="bi bi-person-circle me-2"></i>
                    Привет, @context.User.Identity?.Name!
                </span>
                <button class="btn btn-outline-danger btn-sm ms-3" @onclick="LogoutAsync">
                    <i class="bi bi-box-arrow-right me-1"></i>
                    Выход
                </button>
            </div>
        </Authorized>
    </AuthorizeView>
</div>

@code {
    private async Task LogoutAsync()
    {
        try
        {
            // Get current token from storage
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            
            if (!string.IsNullOrEmpty(token))
            {
                await AuthService.LogoutAsync(token);
            }
            
            // Clear local storage and redirect to login
            await ClearAuthDataAsync();
            Navigation.NavigateTo("/login", true);
        }
        catch (Exception ex)
        {
            // Log error but still redirect to login
            Console.WriteLine($"Logout error: {ex.Message}");
            await ClearAuthDataAsync();
            Navigation.NavigateTo("/login", true);
        }
    }
    
    private async Task ClearAuthDataAsync()
    {
        // Clear token from local storage
        await LocalStorage.RemoveItemAsync("authToken");
        
        // Notify authentication state provider about logout
        if (AuthenticationStateProvider is ICustomAuthenticationStateProvider customProvider)
        {
            await customProvider.MarkUserAsLoggedOutAsync();
        }
    }
}
