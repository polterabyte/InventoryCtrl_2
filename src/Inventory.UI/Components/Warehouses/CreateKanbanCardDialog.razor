@using Inventory.Shared.DTOs
@using Inventory.Shared.Interfaces
@inject IWarehouseService WarehouseService
@inject IProductService ProductService
@inject IKanbanCardService KanbanCardService
@inject Inventory.Shared.Services.IErrorHandlingService ErrorHandlingService
@inject Radzen.NotificationService NotificationService
@inject Radzen.DialogService DialogService


<RadzenStack Orientation="Orientation.Vertical" Gap="0.75rem">
    <RadzenDropDown Data="@allWarehouses"
                     TextProperty="Name"
                     @bind-Value="selectedWarehouse"
                     Placeholder="Склад" />

    <RadzenDropDown Data="@allProducts"
                     TextProperty="Name"
                     @bind-Value="selectedProduct"
                     AllowFiltering="true"
                     FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                     Placeholder="Товар (поиск)"
                     FilterOperator="StringFilterOperator.Contains" />

    <RadzenNumeric @bind-Value="@minThreshold" TValue="int" Placeholder="Минимум" />
    <RadzenNumeric @bind-Value="@maxThreshold" TValue="int" Placeholder="Максимум" />

    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
        <RadzenButton Text="Отмена" Click="@Cancel" />
        <RadzenButton Text="Создать" ButtonStyle="ButtonStyle.Primary" Disabled="@(
                saving || selectedWarehouse == null || selectedProduct == null || minThreshold < 0 || maxThreshold < minThreshold
            )" Click="@SaveAsync" />
    </RadzenStack>
</RadzenStack>


@code {
    [Parameter] public WarehouseDto? PreselectedWarehouse { get; set; }

    private List<WarehouseDto> allWarehouses = new();
    private List<ProductDto> allProducts = new();
    private WarehouseDto? selectedWarehouse;
    private ProductDto? selectedProduct;
    private int minThreshold;
    private int maxThreshold;
    private bool saving;

    protected override async Task OnInitializedAsync()
    {
        allWarehouses = await WarehouseService.GetAllWarehousesAsync();
        allProducts = await ProductService.GetAllProductsAsync();
        selectedWarehouse = PreselectedWarehouse ?? allWarehouses.FirstOrDefault();
    }



    private async Task SaveAsync()
    {
        Console.WriteLine($"SaveAsync called - selectedWarehouse: {(selectedWarehouse != null ? $"{selectedWarehouse.Id} - {selectedWarehouse.Name}" : "null")}, selectedProduct: {(selectedProduct != null ? $"{selectedProduct.Id} - {selectedProduct.Name}" : "null")}");

        if (selectedWarehouse == null || selectedProduct == null)
        {
            Console.WriteLine("Validation failed: selectedWarehouse or selectedProduct is null");
            return;
        }

        if (minThreshold < 0 || maxThreshold < minThreshold)
        {
            Console.WriteLine($"Validation failed: invalid thresholds - min: {minThreshold}, max: {maxThreshold}");
            return;
        }

        saving = true;
        try
        {
            Console.WriteLine($"Creating Kanban card - ProductId: {selectedProduct.Id}, WarehouseId: {selectedWarehouse.Id}, Product: {selectedProduct.Name}, Warehouse: {selectedWarehouse.Name}");

            var dto = new CreateKanbanCardDto
            {
                ProductId = selectedProduct.Id,
                WarehouseId = selectedWarehouse.Id,
                MinThreshold = minThreshold,
                MaxThreshold = maxThreshold
            };

            Console.WriteLine($"Sending DTO to API: ProductId={dto.ProductId}, WarehouseId={dto.WarehouseId}, MinThreshold={dto.MinThreshold}, MaxThreshold={dto.MaxThreshold}");

            await KanbanCardService.CreateAsync(dto);
            Console.WriteLine("Kanban card created successfully");
            DialogService.Close(true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating Kanban card: {ex.Message}");
            await ErrorHandlingService.HandleErrorAsync(
                ex,
                "Create Kanban Card",
                new { WarehouseId = selectedWarehouse.Id, ProductId = selectedProduct.Id, minThreshold, maxThreshold }
            );
        }
        finally
        {
            saving = false;
        }
    }

    private void Cancel() => DialogService.Close(false);
}