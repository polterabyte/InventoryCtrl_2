@using Inventory.Shared.DTOs
@using Inventory.Shared.Interfaces
@using Inventory.Shared.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject IUnitOfMeasureApiService UnitOfMeasureService
@inject IUINotificationService NotificationService
@inject IJSRuntime JSRuntime

<AuthorizeView Roles="Admin">
    <Authorized>
        <div class="reference-data-widget">
            <div class="widget-header">
                <h4><i class="fas fa-ruler"></i> Units of Measure Management</h4>
                <div class="widget-actions">
                    <button class="btn btn-primary btn-sm" @onclick="ShowCreateModal">
                        <i class="fas fa-plus"></i> Add New Unit
                    </button>
                    <button class="btn btn-outline-secondary btn-sm" @onclick="RefreshData">
                        <i class="fas fa-refresh"></i> Refresh
                    </button>
                </div>
            </div>

            <div class="widget-filters">
                <div class="row">
                    <div class="col-md-4">
                        <input type="text" class="form-control" placeholder="Search units..." @bind="searchTerm" @onkeyup="OnSearchKeyUp" />
                    </div>
                    <div class="col-md-2">
                        <select class="form-select" @bind="isActiveFilter">
                            <option value="">All</option>
                            <option value="true">Active</option>
                            <option value="false">Inactive</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <select class="form-select" @bind="pageSize">
                            <option value="10">10 per page</option>
                            <option value="25">25 per page</option>
                            <option value="50">50 per page</option>
                        </select>
                    </div>
                </div>
            </div>

            <div class="widget-content">
                @if (isLoading)
                {
                    <div class="text-center p-4">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else if (data?.Any() == true)
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Symbol</th>
                                    <th>Description</th>
                                    <th>Status</th>
                                    <th>Created</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in data)
                                {
                                    <tr>
                                        <td><strong>@item.Name</strong></td>
                                        <td><span class="badge bg-secondary">@item.Symbol</span></td>
                                        <td>@(item.Description ?? "-")</td>
                                        <td>
                                            @if (item.IsActive)
                                            {
                                                <span class="badge bg-success">Active</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-secondary">Inactive</span>
                                            }
                                        </td>
                                        <td>@item.CreatedAt.ToString("MMM dd, yyyy")</td>
                                        <td>
                                            <div class="btn-group btn-group-sm">
                                                <button class="btn btn-outline-primary" @onclick="() => EditItem(item)" title="Edit">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-outline-danger" @onclick="() => DeleteItem(item)" title="Delete">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    @if (totalPages > 1)
                    {
                        <nav aria-label="Page navigation">
                            <ul class="pagination justify-content-center">
                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(1)">First</button>
                                </li>
                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Previous</button>
                                </li>
                                
                                @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                                {
                                    <li class="page-item @(i == currentPage ? "active" : "")">
                                        <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                                    </li>
                                }
                                
                                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Next</button>
                                </li>
                                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(totalPages)">Last</button>
                                </li>
                            </ul>
                        </nav>
                    }
                }
                else
                {
                    <div class="text-center p-4">
                        <p class="text-muted">No units of measure found</p>
                    </div>
                }
            </div>
        </div>

        <!-- Create/Edit Modal -->
        <div class="modal @(showModal ? "show d-block" : "d-none")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(isEditing ? "Edit" : "Create") Unit of Measure</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@currentItem" OnValidSubmit="@SaveItem" Context="editFormContext">
                            <DataAnnotationsValidator />
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Name *</label>
                                        <InputText class="form-control" @bind-Value="currentItem.Name" />
                                        <ValidationMessage For="@(() => currentItem.Name)" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label class="form-label">Symbol *</label>
                                        <InputText class="form-control" @bind-Value="currentItem.Symbol" />
                                        <ValidationMessage For="@(() => currentItem.Symbol)" />
                                    </div>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Description</label>
                                <InputTextArea class="form-control" @bind-Value="currentItem.Description" rows="3" />
                                <ValidationMessage For="@(() => currentItem.Description)" />
                            </div>
                            @if (isEditing)
                            {
                                <div class="mb-3">
                                    <div class="form-check">
                                        <InputCheckbox class="form-check-input" @bind-Value="isActive" />
                                        <label class="form-check-label">Active</label>
                                    </div>
                                </div>
                            }
                        </EditForm>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="SaveItem" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            @(isEditing ? "Update" : "Create")
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="alert alert-danger">
            <i class="fas fa-exclamation-triangle"></i>
            Access denied. Administrator role required.
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<UnitOfMeasureDto> data = new();
    private bool isLoading = false;
    private bool showModal = false;
    private bool isEditing = false;
    private bool isSaving = false;
    private string searchTerm = "";
    private string isActiveFilter = "";
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 0;
    private int totalCount = 0;

    private CreateUnitOfMeasureDto currentItem = new();
    private UnitOfMeasureDto? selectedItem = null;
    private bool isActive = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            var response = await UnitOfMeasureService.GetPagedAsync(
                currentPage, 
                pageSize, 
                string.IsNullOrEmpty(searchTerm) ? null : searchTerm,
                string.IsNullOrEmpty(isActiveFilter) ? null : bool.Parse(isActiveFilter)
            );

            if (response.Success && response.Data != null)
            {
                data = response.Data.Items;
                totalCount = response.Data.TotalCount;
                totalPages = response.Data.TotalPages;
            }
            else
            {
                NotificationService.ShowError("Error", response.ErrorMessage ?? "Failed to load data");
                data = new();
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError("Error", $"An error occurred: {ex.Message}");
            data = new();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshData()
    {
        currentPage = 1;
        await LoadData();
    }

    private async Task OnSearchKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            currentPage = 1;
            await LoadData();
        }
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages && page != currentPage)
        {
            currentPage = page;
            await LoadData();
        }
    }

    private void ShowCreateModal()
    {
        currentItem = new CreateUnitOfMeasureDto();
        isActive = true;
        isEditing = false;
        showModal = true;
    }

    private void EditItem(UnitOfMeasureDto item)
    {
        selectedItem = item;
        currentItem = new CreateUnitOfMeasureDto
        {
            Name = item.Name,
            Symbol = item.Symbol,
            Description = item.Description
        };
        isActive = item.IsActive;
        isEditing = true;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentItem = new CreateUnitOfMeasureDto();
        selectedItem = null;
        isEditing = false;
    }

    private async Task SaveItem()
    {
        isSaving = true;
        try
        {
            ApiResponse<UnitOfMeasureDto> response;
            
            if (isEditing && selectedItem != null)
            {
                var updateDto = new UpdateUnitOfMeasureDto
                {
                    Name = currentItem.Name,
                    Symbol = currentItem.Symbol,
                    Description = currentItem.Description,
                    IsActive = isActive
                };
                response = await UnitOfMeasureService.UpdateAsync(selectedItem.Id, updateDto);
            }
            else
            {
                response = await UnitOfMeasureService.CreateAsync(currentItem);
            }

            if (response.Success)
            {
                NotificationService.ShowSuccess("Success", isEditing ? "Unit updated successfully" : "Unit created successfully");
                CloseModal();
                await RefreshData();
            }
            else
            {
                var errorMessage = response.ErrorMessage ?? "Failed to save unit";
                if (response.Errors != null && response.Errors.Any())
                {
                    var validationErrors = string.Join(", ", response.Errors);
                    errorMessage = $"{errorMessage}: {validationErrors}";
                }
                NotificationService.ShowError("Error", errorMessage);
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError("Error", $"An error occurred: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeleteItem(UnitOfMeasureDto item)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{item.Name}'?");
        if (confirmed)
        {
            try
            {
                var response = await UnitOfMeasureService.DeleteAsync(item.Id);
                if (response.Success)
                {
                    NotificationService.ShowSuccess("Success", "Unit deleted successfully");
                    await RefreshData();
                }
                else
                {
                    NotificationService.ShowError("Error", response.ErrorMessage ?? "Failed to delete unit");
                }
            }
            catch (Exception ex)
            {
                NotificationService.ShowError("Error", $"An error occurred: {ex.Message}");
            }
        }
    }
}
