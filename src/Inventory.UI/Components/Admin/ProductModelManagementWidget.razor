@using Inventory.Shared.DTOs
@using Inventory.Shared.Interfaces
@using Inventory.Shared.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject IProductModelService ProductModelService
@inject IManufacturerService ManufacturerService
@inject IUINotificationService NotificationService
@inject IJSRuntime JSRuntime

<AuthorizeView Roles="Admin">
    <Authorized>
        <div class="reference-data-widget">
            <div class="widget-header">
                <h4><i class="fas fa-cube"></i> Product Models Management</h4>
                <div class="widget-actions">
                    <button class="btn btn-primary btn-sm" @onclick="ShowCreateModal">
                        <i class="fas fa-plus"></i> Add New Model
                    </button>
                    <button class="btn btn-outline-secondary btn-sm" @onclick="RefreshData">
                        <i class="fas fa-refresh"></i> Refresh
                    </button>
                </div>
            </div>

            <div class="widget-content">
                @if (isLoading)
                {
                    <div class="text-center p-4">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else if (data?.Any() == true)
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Manufacturer</th>
                                    <th>Status</th>
                                    <th>Created</th>
                                    <th>Updated</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in data)
                                {
                                    <tr>
                                        <td><strong>@item.Name</strong></td>
                                        <td>@item.ManufacturerName</td>
                                        <td>
                                            @if (item.IsActive)
                                            {
                                                <span class="badge bg-success">Active</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-secondary">Inactive</span>
                                            }
                                        </td>
                                        <td>@item.CreatedAt.ToString("MMM dd, yyyy")</td>
                                        <td>@(item.UpdatedAt?.ToString("MMM dd, yyyy") ?? "-")</td>
                                        <td>
                                            <div class="btn-group btn-group-sm">
                                                <button class="btn btn-outline-primary" @onclick="() => EditItem(item)" title="Edit">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-outline-danger" @onclick="() => DeleteItem(item)" title="Delete">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center p-4">
                        <p class="text-muted">No product models found</p>
                    </div>
                }
            </div>
        </div>

        <!-- Create/Edit Modal -->
        <div class="modal @(showModal ? "show d-block" : "d-none")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(isEditing ? "Edit" : "Create") Product Model</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <div class="modal-body">
                        <RadzenTemplateForm Data="@currentItem" Submit="@SaveItem">
                            <DataAnnotationsValidator />
                            <div class="mb-3">
                                <RadzenFormField Text="Name *" class="rz-mb-3">
                                    <RadzenTextBox @bind-Value="currentItem.Name" Name="productModelName" />
                                    <RadzenRequiredValidator Component="productModelName" Text="Name is required" />
                                </RadzenFormField>
                            </div>
                            <div class="mb-3">
                                <RadzenFormField Text="Manufacturer *" class="rz-mb-3">
                                    <RadzenDropDown @bind-Value="currentItem.ManufacturerId"
                                                   Data="@manufacturerOptions"
                                                   ValueProperty="Value"
                                                   TextProperty="Text"
                                                   Placeholder="Select Manufacturer"
                                                   Name="manufacturerId" />
                                    <RadzenRequiredValidator Component="manufacturerId" Text="Manufacturer is required" />
                                </RadzenFormField>
                            </div>
                            @if (isEditing)
                            {
                                <div class="mb-3">
                                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                                        <RadzenCheckBox @bind-Value="isActive" Name="isActive" />
                                        <RadzenLabel Text="Active" For="isActive" />
                                    </RadzenStack>
                                </div>
                            }
                        </RadzenTemplateForm>
                    </div>
                    <div class="modal-footer">
                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
                            <RadzenButton Text="Cancel" ButtonStyle="ButtonStyle.Light" 
                                         Variant="Variant.Outlined" @onclick="CloseModal" />
                            <RadzenButton Text="@(isSaving ? (isEditing ? "Updating..." : "Creating...") : (isEditing ? "Update" : "Create"))" 
                                         ButtonStyle="ButtonStyle.Primary" 
                                         @onclick="SaveItem" 
                                         Disabled="@isSaving" />
                        </RadzenStack>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="alert alert-danger">
            <i class="fas fa-exclamation-triangle"></i>
            Access denied. Administrator role required.
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<ProductModelDto> data = new();
    private List<ManufacturerDto> manufacturers = new();
    private bool isLoading = false;
    private bool showModal = false;
    private bool isEditing = false;
    private bool isSaving = false;

    private CreateProductModelDto currentItem = new();
    private ProductModelDto? selectedItem = null;
    private bool isActive = true;

    private List<ManufacturerOption> manufacturerOptions = new();

    public class ManufacturerOption
    {
        public Guid Value { get; set; }
        public string Text { get; set; } = "";
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadManufacturers();
        await LoadData();
    }

    private async Task LoadManufacturers()
    {
        try
        {
            manufacturers = await ManufacturerService.GetAllManufacturersAsync();
            
            // Create options for RadzenDropDown
            manufacturerOptions = new List<ManufacturerOption>();
            
            foreach (var manufacturer in manufacturers)
            {
                manufacturerOptions.Add(new ManufacturerOption
                {
                    Value = manufacturer.Id,
                    Text = manufacturer.Name
                });
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError("Error", $"Failed to load manufacturers: {ex.Message}");
        }
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            data = await ProductModelService.GetAllProductModelsAsync();
        }
        catch (Exception ex)
        {
            NotificationService.ShowError("Error", $"An error occurred: {ex.Message}");
            data = new();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshData()
    {
        await LoadData();
    }

    private void ShowCreateModal()
    {
        currentItem = new CreateProductModelDto();
        isActive = true;
        isEditing = false;
        showModal = true;
    }

    private void EditItem(ProductModelDto item)
    {
        selectedItem = item;
        currentItem = new CreateProductModelDto
        {
            Name = item.Name,
            ManufacturerId = item.ManufacturerId
        };
        isActive = item.IsActive;
        isEditing = true;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentItem = new CreateProductModelDto();
        selectedItem = null;
        isEditing = false;
    }

    private async Task SaveItem()
    {
        isSaving = true;
        try
        {
            if (isEditing && selectedItem != null)
            {
                var updateDto = new UpdateProductModelDto
                {
                    Name = currentItem.Name,
                    ManufacturerId = currentItem.ManufacturerId,
                    IsActive = isActive
                };
                var result = await ProductModelService.UpdateProductModelAsync(selectedItem.Id, updateDto);
                if (result != null)
                {
                    NotificationService.ShowSuccess("Success", "Product model updated successfully");
                    CloseModal();
                    await RefreshData();
                }
                else
                {
                    NotificationService.ShowError("Error", "Failed to update product model");
                }
            }
            else
            {
                var result = await ProductModelService.CreateProductModelAsync(currentItem);
                if (result != null)
                {
                    NotificationService.ShowSuccess("Success", "Product model created successfully");
                    CloseModal();
                    await RefreshData();
                }
                else
                {
                    NotificationService.ShowError("Error", "Failed to create product model");
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError("Error", $"An error occurred: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeleteItem(ProductModelDto item)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{item.Name}'?");
        if (confirmed)
        {
            try
            {
                var success = await ProductModelService.DeleteProductModelAsync(item.Id);
                if (success)
                {
                    NotificationService.ShowSuccess("Success", "Product model deleted successfully");
                    await RefreshData();
                }
                else
                {
                    NotificationService.ShowError("Error", "Failed to delete product model");
                }
            }
            catch (Exception ex)
            {
                NotificationService.ShowError("Error", $"An error occurred: {ex.Message}");
            }
        }
    }
}
