@using Inventory.Shared.DTOs
@using Inventory.Shared.Interfaces
@using Inventory.Shared.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject IWarehouseService WarehouseService
@inject IUINotificationService NotificationService
@inject IJSRuntime JSRuntime
@inject ILocationService LocationService

<AuthorizeView Roles="Admin">
    <Authorized>
        <div class="reference-data-widget">
            <div class="widget-header">
                <h4><i class="fas fa-warehouse"></i> Warehouses Management</h4>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem">
                    <RadzenButton Text="Add New Warehouse" 
                                 Icon="add" 
                                 ButtonStyle="ButtonStyle.Primary" 
                                 Size="ButtonSize.Small"
                                 @onclick="ShowCreateModal" />
                    <RadzenButton Text="Refresh" 
                                 Icon="refresh" 
                                 ButtonStyle="ButtonStyle.Secondary" 
                                 Variant="Variant.Outlined"
                                 Size="ButtonSize.Small"
                                 @onclick="RefreshData" />
                </RadzenStack>
            </div>

            <div class="widget-filters">
                <div class="row">
                    <div class="col-md-4">
                        <RadzenTextBox @bind-Value="searchTerm" @bind-Value:after="OnSearchKeyUp" 
                                       Placeholder="Search warehouses..." Name="searchTerm" />
                    </div>
                    <div class="col-md-2">
                        <RadzenDropDown @bind-Value="isActiveFilter" 
                                       Data="@statusOptions" 
                                       ValueProperty="Value" 
                                       TextProperty="Text"
                                       Placeholder="All"
                                       Name="isActiveFilter" />
                    </div>
                    <div class="col-md-2">
                        <RadzenDropDown @bind-Value="pageSize" 
                                       Data="@pageSizeOptions" 
                                       ValueProperty="Value" 
                                       TextProperty="Text"
                                       Name="pageSize" />
                    </div>
                </div>
            </div>

            <div class="widget-content">
                @if (isLoading)
                {
                    <div class="text-center p-4">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else if (data?.Any() == true)
                {
                    <RadzenDataGrid Data="@data" TItem="WarehouseDto" AllowPaging="true" PageSize="10" 
                                   AllowSorting="true" FilterMode="FilterMode.Advanced" 
                                   class="rz-datagrid-custom">
                        <Columns>
                            <RadzenDataGridColumn TItem="WarehouseDto" Property="Name" Title="Name" Width="150px">
                                <Template Context="item">
                                    <strong>@item.Name</strong>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="WarehouseDto" Property="Description" Title="Description" Width="200px">
                                <Template Context="item">
                                    @(item.Description ?? "-")
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="WarehouseDto" Property="LocationName" Title="Location" Width="150px">
                                <Template Context="item">
                                    @(item.LocationName ?? "-")
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="WarehouseDto" Property="ContactInfo" Title="Contact Info" Width="150px">
                                <Template Context="item">
                                    @(item.ContactInfo ?? "-")
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="WarehouseDto" Property="IsActive" Title="Status" Width="100px">
                                <Template Context="item">
                                    @if (item.IsActive)
                                    {
                                        <span class="badge bg-success">Active</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">Inactive</span>
                                    }
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="WarehouseDto" Property="CreatedAt" Title="Created" Width="120px">
                                <Template Context="item">
                                    @item.CreatedAt.ToString("MMM dd, yyyy")
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="WarehouseDto" Title="Actions" Width="120px" Sortable="false" Filterable="false">
                                <Template Context="item">
                                    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.25rem">
                                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Primary" 
                                                     Variant="Variant.Outlined" Size="ButtonSize.Small"
                                                     @onclick="() => EditItem(item)" title="Edit" />
                                        <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" 
                                                     Variant="Variant.Outlined" Size="ButtonSize.Small"
                                                     @onclick="() => DeleteItem(item)" title="Delete" />
                                    </RadzenStack>
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>

                    @if (totalPages > 1)
                    {
                        <nav aria-label="Page navigation">
                            <ul class="pagination justify-content-center">
                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(1)">First</button>
                                </li>
                                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Previous</button>
                                </li>
                                
                                @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                                {
                                    <li class="page-item @(i == currentPage ? "active" : "")">
                                        <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                                    </li>
                                }
                                
                                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Next</button>
                                </li>
                                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(totalPages)">Last</button>
                                </li>
                            </ul>
                        </nav>
                    }
                }
                else
                {
                    <div class="text-center p-4">
                        <p class="text-muted">No warehouses found</p>
                    </div>
                }
            </div>
        </div>

        <!-- Create/Edit Dialog -->
        <RadzenDialog @bind-Visible="showModal" Style="min-width: 600px;">
            <RadzenTemplateForm Data="@currentItem" Submit="@SaveItem">
                <RadzenStack>
                    <RadzenText TextStyle="TextStyle.H4" class="rz-mb-3">
                        @(isEditing ? "Edit" : "Create") Warehouse
                    </RadzenText>
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <RadzenFormField Text="Name *" class="rz-mb-3">
                                            <RadzenTextBox @bind-Value="currentItem.Name" Name="name" />
                                            <RadzenRequiredValidator Component="name" Text="Name is required" />
                                        </RadzenFormField>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <RadzenFormField Text="Location" class="rz-mb-3">
                                            <RadzenDropDown @bind-Value="currentItem.LocationId" 
                                                           Data="@locations" 
                                                           ValueProperty="Id" 
                                                           TextProperty="Name"
                                                           Placeholder="Select location..."
                                                           Name="locationId" />
                                        </RadzenFormField>
                                    </div>
                                </div>
                            </div>
                            <div class="mb-3">
                                <RadzenFormField Text="Description" class="rz-mb-3">
                                    <RadzenTextArea @bind-Value="currentItem.Description" Rows="2" Name="description" />
                                    <RadzenRequiredValidator Component="description" Text="Description is required" />
                                </RadzenFormField>
                            </div>
                            <div class="mb-3">
                                <RadzenFormField Text="Contact Info" class="rz-mb-3">
                                    <RadzenTextBox @bind-Value="currentItem.ContactInfo" Name="contactInfo" />
                                </RadzenFormField>
                            </div>
                            @if (isEditing)
                            {
                                <div class="mb-3">
                                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                                        <RadzenCheckBox @bind-Value="isActive" Name="isActive" />
                                        <RadzenLabel Text="Active" For="isActive" />
                                    </RadzenStack>
                                </div>
                            }
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
                        <RadzenButton Text="Cancel" ButtonStyle="ButtonStyle.Light" 
                                     Variant="Variant.Outlined" @onclick="CloseModal" />
                        <RadzenButton Text="@(isSaving ? (isEditing ? "Updating..." : "Creating...") : (isEditing ? "Update" : "Create"))" 
                                     ButtonStyle="ButtonStyle.Primary" 
                                     @onclick="SaveItem" 
                                     Disabled="@isSaving" />
                    </RadzenStack>
                </RadzenStack>
            </RadzenTemplateForm>
        </RadzenDialog>
    </Authorized>
    <NotAuthorized>
        <RadzenAlert AlertStyle="AlertStyle.Danger" ShowIcon="true">
            <i class="fas fa-exclamation-triangle"></i>
            Access denied. Administrator role required.
        </RadzenAlert>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<WarehouseDto> data = new();
    private List<LocationDto> locations = new();
    private bool isLoading = false;
    private bool showModal = false;
    private bool isEditing = false;
    private bool isSaving = false;
    private string searchTerm = "";
    private string isActiveFilter = "";
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 0;
    private int totalCount = 0;

    private CreateWarehouseDto currentItem = new();
    private WarehouseDto? selectedItem = null;
    private bool isActive = true;

    private List<StatusOption> statusOptions = new()
    {
        new() { Value = "", Text = "All" },
        new() { Value = "true", Text = "Active" },
        new() { Value = "false", Text = "Inactive" }
    };

    private List<PageSizeOption> pageSizeOptions = new()
    {
        new() { Value = 10, Text = "10 per page" },
        new() { Value = 25, Text = "25 per page" },
        new() { Value = 50, Text = "50 per page" }
    };

    public class StatusOption
    {
        public string Value { get; set; } = "";
        public string Text { get; set; } = "";
    }

    public class PageSizeOption
    {
        public int Value { get; set; }
        public string Text { get; set; } = "";
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await LoadLocations();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            var allWarehouses = await WarehouseService.GetAllWarehousesAsync();
            
            // Apply filters
            var filteredWarehouses = allWarehouses.AsEnumerable();
            
            if (!string.IsNullOrEmpty(searchTerm))
            {
                filteredWarehouses = filteredWarehouses.Where(w => 
                    w.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    (w.Description?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (w.LocationName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false));
            }
            
            if (!string.IsNullOrEmpty(isActiveFilter))
            {
                var isActive = bool.Parse(isActiveFilter);
                filteredWarehouses = filteredWarehouses.Where(w => w.IsActive == isActive);
            }
            
            var warehousesList = filteredWarehouses.ToList();
            totalCount = warehousesList.Count;
            totalPages = (int)Math.Ceiling((double)totalCount / pageSize);
            
            // Apply pagination
            data = warehousesList
                .Skip((currentPage - 1) * pageSize)
                .Take(pageSize)
                .ToList();
        }
        catch (Exception ex)
        {
            NotificationService.ShowError("Error", $"An error occurred: {ex.Message}");
            data = new();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshData()
    {
        currentPage = 1;
        await LoadData();
    }

    private async Task OnSearchKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            currentPage = 1;
            await LoadData();
        }
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages && page != currentPage)
        {
            currentPage = page;
            await LoadData();
        }
    }

    private void ShowCreateModal()
    {
        currentItem = new CreateWarehouseDto();
        isActive = true;
        isEditing = false;
        showModal = true;
    }

    private void EditItem(WarehouseDto item)
    {
        selectedItem = item;
        currentItem = new CreateWarehouseDto
        {
            Name = item.Name,
            Description = item.Description,
            LocationId = item.LocationId,
            ContactInfo = item.ContactInfo
        };
        isActive = item.IsActive;
        isEditing = true;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentItem = new CreateWarehouseDto();
        selectedItem = null;
        isEditing = false;
    }

    private async Task SaveItem()
    {
        isSaving = true;
        try
        {
            if (isEditing && selectedItem != null)
            {
                var updateDto = new UpdateWarehouseDto
                {
                    Name = currentItem.Name,
                    LocationId = currentItem.LocationId,
                    Description = currentItem.Description,
                    ContactInfo = currentItem.ContactInfo,
                    IsActive = isActive
                };
                var result = await WarehouseService.UpdateWarehouseAsync(selectedItem.Id, updateDto);
                if (result != null)
                {
                    NotificationService.ShowSuccess("Success", "Warehouse updated successfully");
                    CloseModal();
                    await RefreshData();
                }
                else
                {
                    NotificationService.ShowError("Error", "Failed to update warehouse");
                }
            }
            else
            {
                var result = await WarehouseService.CreateWarehouseAsync(currentItem);
                if (result != null)
                {
                    NotificationService.ShowSuccess("Success", "Warehouse created successfully");
                    CloseModal();
                    await RefreshData();
                }
                else
                {
                    NotificationService.ShowError("Error", "Failed to create warehouse");
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError("Error", $"An error occurred: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeleteItem(WarehouseDto item)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{item.Name}'?");
        if (confirmed)
        {
            try
            {
                var success = await WarehouseService.DeleteWarehouseAsync(item.Id);
                if (success)
                {
                    NotificationService.ShowSuccess("Success", "Warehouse deleted successfully");
                    await RefreshData();
                }
                else
                {
                    NotificationService.ShowError("Error", "Failed to delete warehouse");
                }
            }
            catch (Exception ex)
            {
                NotificationService.ShowError("Error", $"An error occurred: {ex.Message}");
            }
        }
    }

    private async Task LoadLocations()
    {
        try
        {
            var fetched = await LocationService.GetAllLocationsAsync();
            locations = fetched.ToList();
        }
        catch
        {
            locations = new();
        }
    }
}
