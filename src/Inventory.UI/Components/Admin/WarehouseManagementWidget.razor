@using Inventory.Shared.Services
@using System.Linq
@using Inventory.UI.Utilities

<AuthorizeView Roles="Admin">
    <Authorized>
        <RadzenCard Style="width:100%;">
            <ChildContent>
                <RadzenStack Orientation="Orientation.Vertical" Gap="@RadzenUi.GapLarge">
                    <RadzenStack Orientation="Orientation.Horizontal"
                                 JustifyContent="JustifyContent.SpaceBetween"
                                 AlignItems="AlignItems.Center"
                                 Wrap="true"
                                 Gap="@RadzenUi.Gap">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                            <RadzenIcon Icon="warehouse" />
                            <RadzenText TextStyle="TextStyle.H5">Warehouses Management</RadzenText>
                        </RadzenStack>

                        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.75rem">
                            <RadzenButton Icon="add"
                                          Text="Add"
                                          ButtonStyle="ButtonStyle.Primary"
                                          Click="ShowCreateModal" />
                            <RadzenButton Icon="refresh"
                                          Text="Refresh"
                                          Variant="Variant.Outlined"
                                          ButtonStyle="ButtonStyle.Secondary"
                                          Click="RefreshData" />
                        </RadzenStack>
                    </RadzenStack>

                    <RadzenStack Orientation="Orientation.Horizontal" Gap="@RadzenUi.Gap" Wrap="true">
                        <RadzenTextBox @bind-Value="searchTerm"
                                       Placeholder="Search warehouses..."
                                       Style="min-width:220px;"
                                       @onkeyup="OnSearchKeyUp" />

                        <RadzenDropDown Data="@statusFilterOptions"
                                       TextProperty="Text"
                                       ValueProperty="Value"
                                       @bind-Value="isActiveFilter"
                                       Placeholder="Filter by status"
                                       Style="min-width:180px;"
                                       Change="@(args => OnFilterChanged())" />

                        <RadzenDropDown Data="@pageSizeOptions"
                                       @bind-Value="pageSize"
                                       Style="min-width:160px;"
                                       Change="@(args => OnPageSizeChanged(args))" />
                    </RadzenStack>

                    <RadzenBusyIndicator IsBusy="@isLoading">
                        @if (data?.Any() == true)
                        {
                            <RadzenDataGrid TItem="WarehouseDto"
                                             Data="@data"
                                             AllowPaging="true"
                                             PageSize="@pageSize"
                                             AllowSorting="true"
                                             FilterMode="FilterMode.Advanced"
                                             Responsive="true">
                                <Columns>
                                    <RadzenDataGridColumn TItem="WarehouseDto" Title="Name" Property="Name">
                                        <Template Context="item">
                                            <RadzenText>@item.Name</RadzenText>
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="WarehouseDto" Title="Description" Property="Description">
                                        <Template Context="item">@(item.Description ?? "-")</Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="WarehouseDto" Title="Location" Property="LocationName">
                                        <Template Context="item">@(item.LocationName ?? "-")</Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="WarehouseDto" Title="Contact Info" Property="ContactInfo">
                                        <Template Context="item">@(item.ContactInfo ?? "-")</Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="WarehouseDto" Title="Status" Property="IsActive">
                                        <Template Context="item">
                                            @if (item.IsActive)
                                            {
                                                <RadzenBadge Text="Active" Style="success" />
                                            }
                                            else
                                            {
                                                <RadzenBadge Text="Inactive" Style="secondary" />
                                            }
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="WarehouseDto" Title="Actions">
                                        <Template Context="item">
                                            <RadzenButton Icon="edit" Size="ButtonSize.Small" Variant="Variant.Text" Click="@(args => EditItem(item))" />
                                            <RadzenButton Icon="delete" Size="ButtonSize.Small" Variant="Variant.Text" ButtonStyle="ButtonStyle.Danger" Click="@(args => DeleteItem(item))" />
                                        </Template>
                                    </RadzenDataGridColumn>
                                </Columns>
                            </RadzenDataGrid>
                        }
                        else
                        {
                            <RadzenStack Orientation="Orientation.Vertical"
                                         AlignItems="AlignItems.Center"
                                         Gap="0.5rem"
                                         Style="padding: 1.5rem;">
                                <RadzenIcon Icon="warehouse" Style="font-size:32px; color: var(--rz-text-secondary);" />
                                <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary);">No warehouses found</RadzenText>
                            </RadzenStack>
                        }
                    </RadzenBusyIndicator>
                </RadzenStack>
            </ChildContent>
        </RadzenCard>

        <RadzenDialog Visible="@showModal"
                      Title="@(isEditing ? "Edit" : "Create") Warehouse"
                      Close="@(args => CloseModal())"
                      Width="680px">
            <ChildContent>
                <RadzenTemplateForm Data="@currentItem" Submit="@(async (CreateWarehouseDto model) => await OnSubmit(model))">
                    <ChildContent Context="formContext">
                        <DataAnnotationsValidator />
                        <RadzenStack Orientation="Orientation.Vertical" Gap="@RadzenUi.Gap">
                            <RadzenStack Orientation="Orientation.Horizontal" Wrap="true" Gap="@RadzenUi.Gap">
                                <RadzenStack Orientation="Orientation.Vertical" Style="flex:1 1 260px;">
                                    <RadzenFormField Text="Name *">
                                        <RadzenTextBox @bind-Value="currentItem.Name" Name="warehouseName" />
                                        <RadzenRequiredValidator Component="warehouseName" Text="Name is required" />
                                    </RadzenFormField>
                                </RadzenStack>
                                <RadzenStack Orientation="Orientation.Vertical" Style="flex:1 1 260px;">
                                    <RadzenFormField Text="Location *">
                                        <RadzenDropDown @bind-Value="currentItem.LocationId"
                                                       Data="@locations"
                                                       ValueProperty="Id"
                                                       TextProperty="Name"
                                                       Placeholder="Select location"
                                                       Name="locationId" />
                                        <RadzenRequiredValidator Component="locationId" Text="Location is required" />
                                    </RadzenFormField>
                                </RadzenStack>
                            </RadzenStack>

                            <RadzenFormField Text="Contact Info">
                                <RadzenTextBox @bind-Value="currentItem.ContactInfo" Name="contactInfo" />
                            </RadzenFormField>

                            <RadzenFormField Text="Description">
                                <RadzenTextArea @bind-Value="currentItem.Description" Rows="3" Name="description" />
                            </RadzenFormField>

                            @if (isEditing)
                            {
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                                    <RadzenCheckBox @bind-Value="isActive" Name="isActive" />
                                    <RadzenLabel Text="Active" For="isActive" />
                                </RadzenStack>
                            }

                            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.75rem">
                                <RadzenButton Text="Cancel"
                                              ButtonStyle="ButtonStyle.Light"
                                              Variant="Variant.Outlined"
                                              Click="@(args => CloseModal())" />
                                <RadzenButton Text="@(isSaving ? (isEditing ? "Updating..." : "Creating...") : (isEditing ? "Update" : "Create"))"
                                              ButtonStyle="ButtonStyle.Primary"
                                              ButtonType="ButtonType.Submit"
                                              Disabled="@isSaving" />
                            </RadzenStack>
                        </RadzenStack>
                    </ChildContent>
                </RadzenTemplateForm>
            </ChildContent>
        </RadzenDialog>
    </Authorized>
    <NotAuthorized>
        <RadzenAlert AlertStyle="AlertStyle.Danger" ShowIcon="true">
            Access denied. Administrator role required.
        </RadzenAlert>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<WarehouseDto> data = new();
    private List<LocationDto> locations = new();
    private bool isLoading = false;
    private bool showModal = false;
    private bool isEditing = false;
    private bool isSaving = false;
    private readonly FilterOption[] statusFilterOptions = new[]
    {
        new FilterOption("", "All statuses"),
        new FilterOption("true", "Active"),
        new FilterOption("false", "Inactive")
    };

    private readonly int[] pageSizeOptions = new[] { 10, 25, 50 };
    private string searchTerm = "";
    private string isActiveFilter = "";
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 0;
    private int totalCount = 0;

    private CreateWarehouseDto currentItem = new();
    private WarehouseDto? selectedItem = null;
    private bool isActive = true;

    private record FilterOption(string Value, string Text);

protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await LoadLocations();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            var allWarehouses = await WarehouseService.GetAllWarehousesAsync();
            
            // Apply filters
            var filteredWarehouses = allWarehouses.AsEnumerable();
            
            if (!string.IsNullOrEmpty(searchTerm))
            {
                filteredWarehouses = filteredWarehouses.Where(w => 
                    w.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    (w.Description?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (w.LocationName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false));
            }
            
            if (!string.IsNullOrEmpty(isActiveFilter))
            {
                var isActive = bool.Parse(isActiveFilter);
                filteredWarehouses = filteredWarehouses.Where(w => w.IsActive == isActive);
            }
            
            var warehousesList = filteredWarehouses.ToList();
            totalCount = warehousesList.Count;
            totalPages = (int)Math.Ceiling((double)totalCount / pageSize);
            
            // Apply pagination
            data = warehousesList
                .Skip((currentPage - 1) * pageSize)
                .Take(pageSize)
                .ToList();
        }
        catch (Exception ex)
        {
            NotificationService.ShowError("Error", $"An error occurred: {ex.Message}");
            data = new();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshData()
    {
        currentPage = 1;
        await LoadData();
    }

    private async Task OnSearchKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            currentPage = 1;
            await LoadData();
        }
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages && page != currentPage)
        {
            currentPage = page;
            await LoadData();
        }
    }

    private async Task OnFilterChanged()
    {
        currentPage = 1;
        await LoadData();
    }

    private async Task OnPageSizeChanged(object? value)
    {
        if (value is int size && size > 0)
        {
            pageSize = size;
            currentPage = 1;
            await LoadData();
        }
    }

    private void ShowCreateModal()
    {
        currentItem = new CreateWarehouseDto();
        isActive = true;
        isEditing = false;
        showModal = true;
    }

    private void EditItem(WarehouseDto item)
    {
        selectedItem = item;
        currentItem = new CreateWarehouseDto
        {
            Name = item.Name,
            Description = item.Description,
            LocationId = item.LocationId,
            ContactInfo = item.ContactInfo
        };
        isActive = item.IsActive;
        isEditing = true;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentItem = new CreateWarehouseDto();
        selectedItem = null;
        isEditing = false;
    }

    private async Task OnSubmit(CreateWarehouseDto model)
    {
        isSaving = true;
        try
        {
            if (isEditing && selectedItem != null)
            {
                var updateDto = new UpdateWarehouseDto
                {
                    Name = model.Name,
                    LocationId = model.LocationId,
                    Description = model.Description,
                    ContactInfo = model.ContactInfo,
                    IsActive = isActive
                };
                var result = await WarehouseService.UpdateWarehouseAsync(selectedItem.Id, updateDto);
                if (result != null)
                {
                    NotificationService.ShowSuccess("Success", "Warehouse updated successfully");
                    CloseModal();
                    await RefreshData();
                }
                else
                {
                    NotificationService.ShowError("Error", "Failed to update warehouse");
                }
            }
            else
            {
                var result = await WarehouseService.CreateWarehouseAsync(model);
                if (result != null)
                {
                    NotificationService.ShowSuccess("Success", "Warehouse created successfully");
                    CloseModal();
                    await RefreshData();
                }
                else
                {
                    NotificationService.ShowError("Error", "Failed to create warehouse");
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError("Error", $"An error occurred: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeleteItem(WarehouseDto item)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{item.Name}'?");
        if (confirmed)
        {
            try
            {
                var success = await WarehouseService.DeleteWarehouseAsync(item.Id);
                if (success)
                {
                    NotificationService.ShowSuccess("Success", "Warehouse deleted successfully");
                    await RefreshData();
                }
                else
                {
                    NotificationService.ShowError("Error", "Failed to delete warehouse");
                }
            }
            catch (Exception ex)
            {
                NotificationService.ShowError("Error", $"An error occurred: {ex.Message}");
            }
        }
    }

    private async Task LoadLocations()
    {
        try
        {
            var fetched = await LocationService.GetAllLocationsAsync();
            locations = fetched.ToList();
        }
        catch
        {
            locations = new();
        }
    }
}
