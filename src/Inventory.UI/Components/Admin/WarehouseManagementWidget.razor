@using Inventory.Shared.Services
@using System.Linq
@using Inventory.UI.Utilities
@using Inventory.Shared.DTOs
@using Inventory.Shared.Interfaces
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject IWarehouseService WarehouseService
@inject ILocationService LocationService
@inject IUINotificationService UiNotificationService
@inject IJSRuntime JSRuntime
@inject DialogService DialogService

<AuthorizeView Roles="Admin">
    <Authorized Context="_">
        <RadzenCard Style="width:100%;">
            <RadzenStack Orientation="Orientation.Vertical" Gap="@RadzenUi.GapLarge">
                    <RadzenStack Orientation="Orientation.Horizontal"
                                 JustifyContent="JustifyContent.SpaceBetween"
                                 AlignItems="AlignItems.Center"
                                 Wrap="FlexWrap.Wrap"
                                 Gap="@RadzenUi.Gap">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                            <RadzenIcon Icon="warehouse" />
                            <RadzenText TextStyle="TextStyle.H5">Warehouses Management</RadzenText>
                        </RadzenStack>

                        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.75rem">
                            <RadzenButton Icon="add"
                                          Text="Add"
                                          ButtonStyle="ButtonStyle.Primary"
                                          Click="ShowCreateModal" />
                            <RadzenButton Icon="refresh"
                                          Text="Refresh"
                                          Variant="Variant.Outlined"
                                          ButtonStyle="ButtonStyle.Secondary"
                                          Click="RefreshData" />
                        </RadzenStack>
                    </RadzenStack>

                    <RadzenStack Orientation="Orientation.Horizontal" Gap="@RadzenUi.Gap" Wrap="FlexWrap.Wrap">
                        <RadzenTextBox @bind-Value="searchTerm"
                                       Placeholder="Search warehouses..."
                                       Style="min-width:220px;"
                                       @onkeyup="OnSearchKeyUp" />

                        <RadzenDropDown Data="@statusFilterOptions"
                                       TextProperty="Text"
                                       ValueProperty="Value"
                                       @bind-Value="isActiveFilter"
                                       Placeholder="Filter by status"
                                       Style="min-width:180px;"
                                       Change="OnFilterChanged" />

                        <RadzenDropDown Data="@pageSizeOptions"
                                       @bind-Value="pageSize"
                                       Style="min-width:160px;"
                                       Change="OnPageSizeChanged" />
                    </RadzenStack>

                    <RadzenBusyIndicator IsBusy="@isLoading">
                        @if (data?.Any() == true)
                        {
                            <RadzenDataGrid TItem="WarehouseDto"
                                             Data="@data"
                                             AllowPaging="true"
                                             PageSize="@pageSize"
                                             AllowSorting="true"
                                             FilterMode="FilterMode.Advanced"
                                             Responsive="true">
                                <Columns>
                                    <RadzenDataGridColumn TItem="WarehouseDto" Title="Name" Property="Name">
                                        <Template Context="item">
                                            <RadzenText>@item.Name</RadzenText>
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="WarehouseDto" Title="Description" Property="Description">
                                        <Template Context="item">@(item.Description ?? "-")</Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="WarehouseDto" Title="Location" Property="LocationName">
                                        <Template Context="item">@(item.LocationName ?? "-")</Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="WarehouseDto" Title="Contact Info" Property="ContactInfo">
                                        <Template Context="item">@(item.ContactInfo ?? "-")</Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="WarehouseDto" Title="Status" Property="IsActive">
                                        <Template Context="item">
                                            @if (item.IsActive)
                                            {
                                                <RadzenBadge Text="Active" Style="success" />
                                            }
                                            else
                                            {
                                                <RadzenBadge Text="Inactive" Style="secondary" />
                                            }
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="WarehouseDto" Title="Actions">
                                        <Template Context="item">
                                            <RadzenButton Icon="edit" Size="ButtonSize.Small" Variant="Variant.Text" Click="@(() => EditItem(item))" />
                                            <RadzenButton Icon="delete" Size="ButtonSize.Small" Variant="Variant.Text" ButtonStyle="ButtonStyle.Danger" Click="@(() => DeleteItem(item))" />
                                        </Template>
                                    </RadzenDataGridColumn>
                                </Columns>
                            </RadzenDataGrid>
                        }
                        else
                        {
                            <RadzenStack Orientation="Orientation.Vertical"
                                         AlignItems="AlignItems.Center"
                                         Gap="0.5rem"
                                         Style="padding: 1.5rem;">
                                <RadzenIcon Icon="warehouse" Style="font-size:32px; color: var(--rz-text-secondary);" />
                                <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary);">No warehouses found</RadzenText>
                            </RadzenStack>
                        }
                    </RadzenBusyIndicator>
                </RadzenStack>
        </RadzenCard>

        
    </Authorized>
    <NotAuthorized>
        <RadzenAlert AlertStyle="AlertStyle.Danger" ShowIcon="true">
            Access denied. Administrator role required.
        </RadzenAlert>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<WarehouseDto> data = new();
    private List<LocationDto> locations = new();
    private bool isLoading = false;    private bool isEditing = false;
    private bool isSaving = false;
    private readonly FilterOption[] statusFilterOptions = new[]
    {
        new FilterOption("", "All statuses"),
        new FilterOption("true", "Active"),
        new FilterOption("false", "Inactive")
    };

    private readonly int[] pageSizeOptions = new[] { 10, 25, 50 };
    private string searchTerm = "";
    private string isActiveFilter = "";
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 0;
    private int totalCount = 0;

    private CreateWarehouseDto currentItem = new();
    private WarehouseDto? selectedItem = null;
    private bool isActive = true;

    private record FilterOption(string Value, string Text);



protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await LoadLocations();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            var allWarehouses = await WarehouseService.GetAllWarehousesAsync();
            
            // Apply filters
            var filteredWarehouses = allWarehouses.AsEnumerable();
            
            if (!string.IsNullOrEmpty(searchTerm))
            {
                filteredWarehouses = filteredWarehouses.Where(w => 
                    w.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    (w.Description?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (w.LocationName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false));
            }
            
            if (!string.IsNullOrEmpty(isActiveFilter))
            {
                var isActive = bool.Parse(isActiveFilter);
                filteredWarehouses = filteredWarehouses.Where(w => w.IsActive == isActive);
            }
            
            var warehousesList = filteredWarehouses.ToList();
            totalCount = warehousesList.Count;
            totalPages = (int)Math.Ceiling((double)totalCount / pageSize);
            
            // Apply pagination
            data = warehousesList
                .Skip((currentPage - 1) * pageSize)
                .Take(pageSize)
                .ToList();
        }
        catch (Exception ex)
        {
            UiNotificationService.ShowError("Error", $"An error occurred: {ex.Message}");
            data = new();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshData()
    {
        currentPage = 1;
        await LoadData();
    }

    private async Task OnSearchKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            currentPage = 1;
            await LoadData();
        }
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages && page != currentPage)
        {
            currentPage = page;
            await LoadData();
        }
    }

    private async Task OnFilterChanged()
    {
        currentPage = 1;
        await LoadData();
    }

    private async Task OnPageSizeChanged(object? value)
    {
        if (value is int size && size > 0)
        {
            pageSize = size;
            currentPage = 1;
            await LoadData();
        }
    }

        private async Task ShowCreateModal()
    {
        currentItem = new CreateWarehouseDto();
        isActive = true;
        isEditing = false;
        
        await DialogService.OpenAsync("Create Warehouse", ds => CreateWarehouseDialog(ds), new DialogOptions
        {
            Width = "500px",
            Height = "auto",
            CloseDialogOnOverlayClick = true,
            CloseDialogOnEsc = true
        });
    }

    private async Task EditItem(WarehouseDto item)
    {
        selectedItem = item;
        currentItem = new CreateWarehouseDto
        {
            Name = item.Name,
            Description = item.Description,
            LocationId = item.LocationId,
            ContactInfo = item.ContactInfo
        };
        isActive = item.IsActive;
        isEditing = true;

        await DialogService.OpenAsync("Edit Warehouse", ds => CreateWarehouseDialog(ds), new DialogOptions
        {
            Width = "500px",
            Height = "auto",
            CloseDialogOnOverlayClick = true,
            CloseDialogOnEsc = true
        });
    }

        private void CloseModal(DialogService ds)
    {
        ds.Close();
        currentItem = new CreateWarehouseDto();
        selectedItem = null;
        isEditing = false;
    }

    private async Task OnSubmit(CreateWarehouseDto model, DialogService ds)
    {
        isSaving = true;
        try
        {
            if (isEditing && selectedItem != null)
            {
                var updateDto = new UpdateWarehouseDto
                {
                    Name = model.Name,
                    LocationId = model.LocationId,
                    Description = model.Description,
                    ContactInfo = model.ContactInfo,
                    IsActive = isActive
                };
                var result = await WarehouseService.UpdateWarehouseAsync(selectedItem.Id, updateDto);
                if (result != null)
                {
                    UiNotificationService.ShowSuccess("Success", "Warehouse updated successfully");
                    ds.Close();
                    currentItem = new CreateWarehouseDto();
                    selectedItem = null;
                    isEditing = false;await RefreshData();
                }
                else
                {
                    UiNotificationService.ShowError("Error", "Failed to update warehouse");
                }
            }
            else
            {
                var result = await WarehouseService.CreateWarehouseAsync(model);
                if (result != null)
                {
                    UiNotificationService.ShowSuccess("Success", "Warehouse created successfully");
                    ds.Close();
                    currentItem = new CreateWarehouseDto();
                    selectedItem = null;
                    isEditing = false;await RefreshData();
                }
                else
                {
                    UiNotificationService.ShowError("Error", "Failed to create warehouse");
                }
            }
        }
        catch (Exception ex)
        {
            UiNotificationService.ShowError("Error", $"An error occurred: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeleteItem(WarehouseDto item)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{item.Name}'?");
        if (confirmed)
        {
            try
            {
                var success = await WarehouseService.DeleteWarehouseAsync(item.Id);
                if (success)
                {
                    UiNotificationService.ShowSuccess("Success", "Warehouse deleted successfully");
                    await RefreshData();
                }
                else
                {
                    UiNotificationService.ShowError("Error", "Failed to delete warehouse");
                }
            }
            catch (Exception ex)
            {
                UiNotificationService.ShowError("Error", $"An error occurred: {ex.Message}");
            }
        }
    }

    private async Task LoadLocations()
    {
        try
        {
            var fetched = await LocationService.GetAllLocationsAsync();
            locations = fetched.ToList();
        }
        catch
        {
            locations = new();
        }
    }

    private RenderFragment CreateWarehouseDialog(DialogService ds) => builder =>
    {
        builder.OpenComponent<RadzenTemplateForm<CreateWarehouseDto>>(0);
        builder.AddAttribute(1, "Data", currentItem);
        builder.AddAttribute(2, "Submit", EventCallback.Factory.Create<CreateWarehouseDto>(this, async (model) => await OnSubmit(model, ds)));
        builder.AddAttribute(3, "ChildContent", (RenderFragment<EditContext>)((editContext) => (builder2) =>
        {
            builder2.OpenComponent<DataAnnotationsValidator>(0);
            builder2.CloseComponent();

            builder2.OpenComponent<RadzenStack>(1);
            builder2.AddAttribute(2, "Orientation", Orientation.Vertical);
            builder2.AddAttribute(3, "Gap", RadzenUi.Gap);
            builder2.AddAttribute(4, "ChildContent", (RenderFragment)((builder3) =>
            {
                builder3.OpenComponent<RadzenText>(0);
                builder3.AddAttribute(1, "TextStyle", TextStyle.H4);
                builder3.AddAttribute(2, "class", "rz-mb-3");
                builder3.AddAttribute(3, "ChildContent", (RenderFragment)((builder4) =>
                {
                    builder4.AddContent(0, $"{(isEditing ? "Edit" : "Create")} Warehouse");
                }));
                builder3.CloseComponent();

                builder3.OpenComponent<RadzenFormField>(1);
                builder3.AddAttribute(2, "Text", "Name *");
                builder3.AddAttribute(3, "ChildContent", (RenderFragment)((builder4) =>
                {
                    builder4.OpenComponent<RadzenTextBox>(0);
                    builder4.AddAttribute(1, "Value", currentItem.Name);
                    builder4.AddAttribute(2, "ValueChanged", EventCallback.Factory.Create<string>(this, (value) => currentItem.Name = value));
                    builder4.AddAttribute(3, "Name", "warehouseName");
                    builder4.CloseComponent();

                    builder4.OpenComponent<RadzenRequiredValidator>(1);
                    builder4.AddAttribute(2, "Component", "warehouseName");
                    builder4.AddAttribute(3, "Text", "Name is required");
                    builder4.CloseComponent();
                }));
                builder3.CloseComponent();

                builder3.OpenComponent<RadzenFormField>(2);
                builder3.AddAttribute(4, "Text", "Description");
                builder3.AddAttribute(5, "ChildContent", (RenderFragment)((builder4) =>
                {
                    builder4.OpenComponent<RadzenTextArea>(0);
                    builder4.AddAttribute(1, "Value", currentItem.Description);
                    builder4.AddAttribute(2, "ValueChanged", EventCallback.Factory.Create<string>(this, (value) => currentItem.Description = value));
                    builder4.AddAttribute(3, "Name", "warehouseDescription");
                    builder4.AddAttribute(4, "Rows", 3);
                    builder4.CloseComponent();
                }));
                builder3.CloseComponent();

                builder3.OpenComponent<RadzenFormField>(3);
                builder3.AddAttribute(6, "Text", "Location *");
                builder3.AddAttribute(7, "ChildContent", (RenderFragment)((builder4) =>
                {
                    builder4.OpenComponent<RadzenDropDown<int>>(0);
                    builder4.AddAttribute(1, "Data", locations);
                    builder4.AddAttribute(2, "Value", currentItem.LocationId);
                    builder4.AddAttribute(3, "ValueChanged", EventCallback.Factory.Create<int>(this, (value) => currentItem.LocationId = value));
                    builder4.AddAttribute(4, "TextProperty", "Name");
                    builder4.AddAttribute(5, "ValueProperty", "Id");
                    builder4.AddAttribute(6, "Name", "locationId");
                    builder4.CloseComponent();

                    builder4.OpenComponent<RadzenRequiredValidator>(1);
                    builder4.AddAttribute(2, "Component", "locationId");
                    builder4.AddAttribute(3, "Text", "Location is required");
                    builder4.CloseComponent();
                }));
                builder3.CloseComponent();

                builder3.OpenComponent<RadzenFormField>(4);
                builder3.AddAttribute(8, "Text", "Contact Info");
                builder3.AddAttribute(9, "ChildContent", (RenderFragment)((builder4) =>
                {
                    builder4.OpenComponent<RadzenTextBox>(0);
                    builder4.AddAttribute(1, "Value", currentItem.ContactInfo);
                    builder4.AddAttribute(2, "ValueChanged", EventCallback.Factory.Create<string>(this, (value) => currentItem.ContactInfo = value));
                    builder4.AddAttribute(3, "Name", "contactInfo");
                    builder4.CloseComponent();
                }));
                builder3.CloseComponent();

                builder3.OpenComponent<RadzenFormField>(5);
                builder3.AddAttribute(10, "Text", "Status");
                builder3.AddAttribute(11, "ChildContent", (RenderFragment)((builder4) =>
                {
                    builder4.OpenComponent<RadzenCheckBox<bool>>(0);
                    builder4.AddAttribute(1, "Value", isActive);
                    builder4.AddAttribute(2, "ValueChanged", EventCallback.Factory.Create<bool>(this, (value) => isActive = value));
                    builder4.AddAttribute(3, "Name", "isActive");
                    builder4.CloseComponent();
                    builder4.AddMarkupContent(4, "<span class=\"rz-form-text\">Active</span>");
                }));
                builder3.CloseComponent();

                builder3.OpenComponent<RadzenStack>(4);
                builder3.AddAttribute(8, "Orientation", Orientation.Horizontal);
                builder3.AddAttribute(9, "JustifyContent", JustifyContent.End);
                builder3.AddAttribute(10, "Gap", "0.75rem");
                builder3.AddAttribute(11, "ChildContent", (RenderFragment)((builder4) =>
                {
                    builder4.OpenComponent<RadzenButton>(0);
                    builder4.AddAttribute(1, "Text", "Cancel");
                    builder4.AddAttribute(2, "ButtonStyle", ButtonStyle.Light);
                    builder4.AddAttribute(3, "Variant", Variant.Outlined);
                    builder4.AddAttribute(4, "Click", EventCallback.Factory.Create<MouseEventArgs>(this, (args) => CloseModal(ds)));
                    builder4.CloseComponent();

                    builder4.OpenComponent<RadzenButton>(1);
                    builder4.AddAttribute(2, "Text", isSaving ? (isEditing ? "Updating..." : "Creating...") : (isEditing ? "Update" : "Create"));
                    builder4.AddAttribute(3, "ButtonStyle", ButtonStyle.Primary);
                    builder4.AddAttribute(4, "ButtonType", ButtonType.Submit);
                    builder4.AddAttribute(5, "Disabled", isSaving);
                    builder4.CloseComponent();
                }));
                builder3.CloseComponent();
            }));
            builder2.CloseComponent();
        }));
        builder.CloseComponent();
    };
}
