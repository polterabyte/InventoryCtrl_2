@using Inventory.Shared.DTOs
@using Inventory.Shared.Interfaces
@using Inventory.Shared.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject ILocationService LocationService
@inject IUINotificationService NotificationService
@inject IJSRuntime JSRuntime

<AuthorizeView Roles="Admin" Context="authState">
    <Authorized>
        <div class="reference-data-widget">
            <div class="widget-header">
                <h4><i class="fas fa-map-marker-alt"></i> Locations Management</h4>
                <div class="widget-actions">
                    <button class="btn btn-primary btn-sm" @onclick="ShowCreateModal">
                        <i class="fas fa-plus"></i> Add New Location
                    </button>
                    <button class="btn btn-outline-secondary btn-sm" @onclick="RefreshData">
                        <i class="fas fa-refresh"></i> Refresh
                    </button>
                </div>
            </div>

            <div class="widget-filters">
                <div class="row">
                    <div class="col-md-4">
                        <input type="text" class="form-control" placeholder="Search locations..." @bind="searchTerm" @onkeyup="OnSearchKeyUp" />
                    </div>
                    <div class="col-md-2">
                        <select class="form-select" @bind="isActiveFilter">
                            <option value="">All</option>
                            <option value="true">Active</option>
                            <option value="false">Inactive</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <select class="form-select" @bind="parentLocationFilter">
                            <option value="">All Locations</option>
                            <option value="null">Root Locations</option>
                            @foreach (var location in parentLocations)
                            {
                                <option value="@location.Id">@location.Name</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-2">
                        <select class="form-select" @bind="pageSize">
                            <option value="10">10 per page</option>
                            <option value="25">25 per page</option>
                            <option value="50">50 per page</option>
                        </select>
                    </div>
                </div>
            </div>

            <div class="widget-content">
                @if (isLoading)
                {
                    <div class="text-center p-4">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else if (data?.Any() == true)
                {
                    <RadzenDataGrid TItem="LocationDto"
                                     Data="@data"
                                     Count="@totalCount"
                                     AllowPaging="true"
                                     PageSize="@pageSize"
                                     LoadData="@OnGridLoad"
                                     AllowSorting="true"
                                     Responsive="true">
                        <Columns>
                            <RadzenDataGridColumn TItem="LocationDto" Title="Name" Property="Name">
                                <Template Context="item"><strong>@item.Name</strong></Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="LocationDto" Title="Description">
                                <Template Context="item">@(item.Description ?? "-")</Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="LocationDto" Title="Parent Location">
                                <Template Context="item">@(item.ParentLocationName ?? "Root")</Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="LocationDto" Title="Status">
                                <Template Context="item">
                                    @if (item.IsActive)
                                    {
                                        <RadzenBadge Text="Active" Style="success" />
                                    }
                                    else
                                    {
                                        <RadzenBadge Text="Inactive" Style="secondary" />
                                    }
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="LocationDto" Title="Created" Property="CreatedAt">
                                <Template Context="item">@item.CreatedAt.ToString("MMM dd, yyyy")</Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="LocationDto" Title="Actions">
                                <Template Context="item">
                                    <RadzenButton Icon="edit" Size="ButtonSize.Small" Variant="Variant.Text" @onclick="(() => EditItem(item))" />
                                    <RadzenButton Icon="delete" Size="ButtonSize.Small" Variant="Variant.Text" ButtonStyle="ButtonStyle.Danger" @onclick="(() => DeleteItem(item))" />
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                }
                else
                {
                    <div class="text-center p-4">
                        <p class="text-muted">No locations found</p>
                    </div>
                }
            </div>
        </div>

        <RadzenDialog Visible="@showModal"
                      Title="@($"{(isEditing ? "Edit" : "Create")} Location")"
                      Close="CloseModal"
                      Width="650px">
            <ChildContent>
                <RadzenTemplateForm Data="@currentItem" Submit="@(async (CreateLocationDto model) => await OnSubmit(model))">
                    <ChildContent Context="formContext">
                        <DataAnnotationsValidator />
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <RadzenFormField Text="Name *" class="rz-mb-3">
                                        <RadzenTextBox @bind-Value="currentItem.Name" Name="locationName" />
                                        <RadzenRequiredValidator Component="locationName" Text="Name is required" />
                                    </RadzenFormField>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <RadzenFormField Text="Parent Location" class="rz-mb-3">
                                        <RadzenDropDown @bind-Value="currentItem.ParentLocationId"
                                                       Data="@parentLocationOptions"
                                                       ValueProperty="Value"
                                                       TextProperty="Text"
                                                       Placeholder="Root Location"
                                                       Name="parentLocationId" />
                                    </RadzenFormField>
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <RadzenFormField Text="Description" class="rz-mb-3">
                                <RadzenTextArea @bind-Value="currentItem.Description" Rows="2" Name="description" />
                            </RadzenFormField>
                        </div>
                        @if (isEditing)
                        {
                            <div class="mb-3">
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                                    <RadzenCheckBox @bind-Value="isActive" Name="isActive" />
                                    <RadzenLabel Text="Active" For="isActive" />
                                </RadzenStack>
                            </div>
                        }
                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.75rem">
                            <RadzenButton Text="Cancel"
                                          ButtonStyle="ButtonStyle.Light"
                                          Variant="Variant.Outlined"
                                          Click="@(args => CloseModal())" />
                            <RadzenButton Text="@(isSaving ? (isEditing ? "Updating..." : "Creating...") : (isEditing ? "Update" : "Create"))"
                                          ButtonStyle="ButtonStyle.Primary"
                                          ButtonType="ButtonType.Submit"
                                          Disabled="@isSaving" />
                        </RadzenStack>
                    </ChildContent>
                </RadzenTemplateForm>
            </ChildContent>
        </RadzenDialog>
    </Authorized>
    <NotAuthorized>
        <div class="alert alert-danger">
            <i class="fas fa-exclamation-triangle"></i>
            Access denied. Administrator role required.
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<LocationDto> data = new();
    private List<LocationDto> parentLocations = new();
    private List<LocationDto> availableParentLocations = new();
    private bool isLoading = false;
    private bool showModal = false;
    private bool isEditing = false;
    private bool isSaving = false;
    private string searchTerm = "";
    private string isActiveFilter = "";
    private string parentLocationFilter = "";
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 0;
    private int totalCount = 0;

    private CreateLocationDto currentItem = new();
    private LocationDto? selectedItem = null;
    private bool isActive = true;

    private List<ParentLocationOption> parentLocationOptions = new();

    public class ParentLocationOption
    {
        public int? Value { get; set; }
        public string Text { get; set; } = "";
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await LoadParentLocations();
    }

    private async Task OnGridLoad(Radzen.LoadDataArgs args)
    {
        var top = args.Top ?? pageSize;
        var skip = args.Skip ?? 0;
        if (top > 0)
        {
            pageSize = top;
        }
        currentPage = (skip / pageSize) + 1;
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            var allLocations = await LocationService.GetAllLocationsAsync();
            
            // Apply filters
            var filteredLocations = allLocations.AsEnumerable();
            
            if (!string.IsNullOrEmpty(searchTerm))
            {
                filteredLocations = filteredLocations.Where(l => 
                    l.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    (l.Description?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    (l.ParentLocationName?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false));
            }
            
            if (!string.IsNullOrEmpty(isActiveFilter))
            {
                var isActive = bool.Parse(isActiveFilter);
                filteredLocations = filteredLocations.Where(l => l.IsActive == isActive);
            }

            if (!string.IsNullOrEmpty(parentLocationFilter))
            {
                if (parentLocationFilter == "null")
                {
                    filteredLocations = filteredLocations.Where(l => l.ParentLocationId == null);
                }
                else if (int.TryParse(parentLocationFilter, out int parentId))
                {
                    filteredLocations = filteredLocations.Where(l => l.ParentLocationId == parentId);
                }
            }
            
            var locationsList = filteredLocations.ToList();
            totalCount = locationsList.Count;
            totalPages = (int)Math.Ceiling((double)totalCount / pageSize);
            
            // Apply pagination
            data = locationsList
                .Skip((currentPage - 1) * pageSize)
                .Take(pageSize)
                .ToList();
        }
        catch (Exception ex)
        {
            NotificationService.ShowError("Error", $"An error occurred: {ex.Message}");
            data = new();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadParentLocations()
    {
        try
        {
            parentLocations = (await LocationService.GetAllLocationsAsync()).ToList();
            availableParentLocations = parentLocations.ToList();
            
            // Create options for RadzenDropDown
            parentLocationOptions = new List<ParentLocationOption>
            {
                new() { Value = null, Text = "Root Location" }
            };
            
            foreach (var location in availableParentLocations)
            {
                parentLocationOptions.Add(new ParentLocationOption
                {
                    Value = location.Id,
                    Text = location.Name
                });
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError("Error", $"Failed to load parent locations: {ex.Message}");
            parentLocations = new();
            availableParentLocations = new();
        }
    }

    private async Task RefreshData()
    {
        currentPage = 1;
        await LoadData();
    }

    private async Task OnSearchKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            currentPage = 1;
            await LoadData();
        }
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages && page != currentPage)
        {
            currentPage = page;
            await LoadData();
        }
    }

    private void ShowCreateModal()
    {
        currentItem = new CreateLocationDto();
        isActive = true;
        isEditing = false;
        showModal = true;
    }

    private void EditItem(LocationDto item)
    {
        selectedItem = item;
        currentItem = new CreateLocationDto
        {
            Name = item.Name,
            Description = item.Description,
            ParentLocationId = item.ParentLocationId
        };
        isActive = item.IsActive;
        isEditing = true;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentItem = new CreateLocationDto();
        selectedItem = null;
        isEditing = false;
    }

    private async Task OnSubmit(CreateLocationDto model)
    {
        isSaving = true;
        try
        {
            if (isEditing && selectedItem != null)
            {
                var updateDto = new UpdateLocationDto
                {
                    Name = model.Name,
                    Description = model.Description,
                    ParentLocationId = model.ParentLocationId,
                    IsActive = isActive
                };
                var result = await LocationService.UpdateLocationAsync(selectedItem.Id, updateDto);
                if (result != null)
                {
                    NotificationService.ShowSuccess("Success", "Location updated successfully");
                    CloseModal();
                    await RefreshData();
                    await LoadParentLocations(); // Refresh parent locations list
                }
                else
                {
                    NotificationService.ShowError("Error", "Failed to update location");
                }
            }
            else
            {
                var result = await LocationService.CreateLocationAsync(model);
                if (result != null)
                {
                    NotificationService.ShowSuccess("Success", "Location created successfully");
                    CloseModal();
                    await RefreshData();
                    await LoadParentLocations(); // Refresh parent locations list
                }
                else
                {
                    NotificationService.ShowError("Error", "Failed to create location");
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError("Error", $"An error occurred: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeleteItem(LocationDto item)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{item.Name}'?");
        if (confirmed)
        {
            try
            {
                var success = await LocationService.DeleteLocationAsync(item.Id);
                if (success)
                {
                    NotificationService.ShowSuccess("Success", "Location deleted successfully");
                    await RefreshData();
                    await LoadParentLocations(); // Refresh parent locations list
                }
                else
                {
                    NotificationService.ShowError("Error", "Failed to delete location. Make sure the location has no sub-locations.");
                }
            }
            catch (Exception ex)
            {
                NotificationService.ShowError("Error", $"An error occurred: {ex.Message}");
            }
        }
    }
}
