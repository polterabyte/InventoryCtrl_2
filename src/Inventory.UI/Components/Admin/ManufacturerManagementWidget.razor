@using Inventory.Shared.DTOs
@using Inventory.Shared.Interfaces
@using Inventory.Shared.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization

@inject IManufacturerService ManufacturerService
@inject IUINotificationService NotificationService
@inject IJSRuntime JSRuntime

<AuthorizeView Roles="Admin" Context="authState">
    <Authorized>
        <div class="reference-data-widget">
            <div class="widget-header">
                <h4><i class="fas fa-industry"></i> Manufacturers Management</h4>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem">
                    <RadzenButton Text="Add New Manufacturer"
                                  Icon="add"
                                  ButtonStyle="ButtonStyle.Primary"
                                  Size="ButtonSize.Small"
                                  @onclick="ShowCreateModal" />
                    <RadzenButton Text="Refresh"
                                  Icon="refresh"
                                  ButtonStyle="ButtonStyle.Secondary"
                                  Variant="Variant.Outlined"
                                  Size="ButtonSize.Small"
                                  @onclick="RefreshData" />
                </RadzenStack>
            </div>

            <div class="widget-content">
                @if (isLoading)
                {
                    <div class="text-center p-4">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else if (data?.Any() == true)
                {
                    <RadzenDataGrid Data="@data" TItem="ManufacturerDto" AllowPaging="true" PageSize="10"
                                   AllowSorting="true" FilterMode="FilterMode.Advanced"
                                   class="rz-datagrid-custom">
                        <Columns>
                            <RadzenDataGridColumn TItem="ManufacturerDto" Property="Name" Title="Name" Width="200px">
                                <Template Context="item">
                                    <strong>@item.Name</strong>
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="ManufacturerDto" Property="CreatedAt" Title="Created" Width="150px">
                                <Template Context="item">
                                    @item.CreatedAt.ToString("MMM dd, yyyy")
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="ManufacturerDto" Property="UpdatedAt" Title="Updated" Width="150px">
                                <Template Context="item">
                                    @(item.UpdatedAt?.ToString("MMM dd, yyyy") ?? "-")
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="ManufacturerDto" Title="Actions" Width="120px" Sortable="false" Filterable="false">
                                <Template Context="item">
                                    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.25rem">
                                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Primary"
                                                     Variant="Variant.Outlined" Size="ButtonSize.Small"
                                                     @onclick="() => EditItem(item)" title="Edit" />
                                        <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger"
                                                     Variant="Variant.Outlined" Size="ButtonSize.Small"
                                                     @onclick="() => DeleteItem(item)" title="Delete" />
                                    </RadzenStack>
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                }
                else
                {
                    <div class="text-center p-4">
                        <p class="text-muted">No manufacturers found</p>
                    </div>
                }
            </div>
        </div>

        <!-- Create/Edit Dialog -->
        <RadzenDialog @bind-Visible="showModal" @bind-Visible:event="onchange" Style="min-width: 500px;">
                        <RadzenTemplateForm Data="@currentItem" Submit="@(async (CreateManufacturerDto model) => await OnSubmit(model))">
                            <ChildContent Context="formContext">
                                <RadzenStack>
                    <RadzenText TextStyle="TextStyle.H4" class="rz-mb-3">
                        @(isEditing ? "Edit" : "Create") Manufacturer
                    </RadzenText>
                    <RadzenFormField Text="Name *" class="rz-mb-3">
                        <RadzenTextBox @bind-Value="currentItem.Name" Name="manufacturerName" />
                        <RadzenRequiredValidator Component="manufacturerName" Text="Name is required" />
                    </RadzenFormField>
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
                        <RadzenButton Text="Cancel" ButtonStyle="ButtonStyle.Light"
                                     Variant="Variant.Outlined" @onclick="CloseModal" />
                        <RadzenButton Text="@(isSaving ? (isEditing ? "Updating..." : "Creating...") : (isEditing ? "Update" : "Create"))"
                                     ButtonStyle="ButtonStyle.Primary"
                                     type="submit"
                                     Disabled="@isSaving" />
                    </RadzenStack>
                                </RadzenStack>
                            </ChildContent>
                        </RadzenTemplateForm>
        </RadzenDialog>
    </Authorized>
    <NotAuthorized>
        <RadzenAlert AlertStyle="AlertStyle.Danger" ShowIcon="true">
            <i class="fas fa-exclamation-triangle"></i>
            Access denied. Administrator role required.
        </RadzenAlert>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<ManufacturerDto> data = new();
    private bool isLoading = false;
    private bool showModal = false;
    private bool isEditing = false;
    private bool isSaving = false;

    private CreateManufacturerDto currentItem = new();
    private ManufacturerDto? selectedItem = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            data = await ManufacturerService.GetAllManufacturersAsync();
        }
        catch (Exception ex)
        {
            NotificationService.ShowError("Error", $"An error occurred: {ex.Message}");
            data = new();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshData()
    {
        await LoadData();
    }

    private void ShowCreateModal()
    {
        currentItem = new CreateManufacturerDto();
        isEditing = false;
        showModal = true;
    }

    private void EditItem(ManufacturerDto item)
    {
        selectedItem = item;
        currentItem = new CreateManufacturerDto
        {
            Name = item.Name
        };
        isEditing = true;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentItem = new CreateManufacturerDto();
        selectedItem = null;
        isEditing = false;
    }

    private async Task OnSubmit(CreateManufacturerDto model)
    {
        isSaving = true;
        try
        {
            if (isEditing && selectedItem != null)
            {
                var updateDto = new UpdateManufacturerDto
                {
                    Name = model.Name
                };
                var result = await ManufacturerService.UpdateManufacturerAsync(selectedItem.Id, updateDto);
                if (result != null)
                {
                    NotificationService.ShowSuccess("Success", "Manufacturer updated successfully");
                    CloseModal();
                    await RefreshData();
                }
                else
                {
                    NotificationService.ShowError("Error", "Failed to update manufacturer");
                }
            }
            else
            {
                var result = await ManufacturerService.CreateManufacturerAsync(model);
                if (result != null)
                {
                    NotificationService.ShowSuccess("Success", "Manufacturer created successfully");
                    CloseModal();
                    await RefreshData();
                }
                else
                {
                    NotificationService.ShowError("Error", "Failed to create manufacturer");
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError("Error", $"An error occurred: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeleteItem(ManufacturerDto item)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{item.Name}'?");
        if (confirmed)
        {
            try
            {
                var success = await ManufacturerService.DeleteManufacturerAsync(item.Id);
                if (success)
                {
                    NotificationService.ShowSuccess("Success", "Manufacturer deleted successfully");
                    await RefreshData();
                }
                else
                {
                    NotificationService.ShowError("Error", "Failed to delete manufacturer");
                }
            }
            catch (Exception ex)
            {
                NotificationService.ShowError("Error", $"An error occurred: {ex.Message}");
            }
        }
    }
}
