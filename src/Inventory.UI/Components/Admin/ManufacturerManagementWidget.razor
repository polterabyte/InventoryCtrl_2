@using Inventory.Shared.DTOs
@using Inventory.Shared.Interfaces
@using Inventory.Shared.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Inventory.UI.Utilities
@using System.Linq
@inject IManufacturerService ManufacturerService
@inject IUINotificationService UiNotificationService
@inject IJSRuntime JSRuntime
@inject DialogService DialogService

<AuthorizeView Roles="Admin">
    <Authorized Context="_">
        <RadzenCard Style="width:100%;">
            <RadzenStack Orientation="Orientation.Vertical" Gap="@RadzenUi.GapLarge">
                    <RadzenStack Orientation="Orientation.Horizontal"
                                 JustifyContent="JustifyContent.SpaceBetween"
                                 AlignItems="AlignItems.Center"
                                 Wrap="FlexWrap.Wrap"
                                 Gap="@RadzenUi.Gap">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                            <RadzenIcon Icon="factory" />
                            <RadzenText TextStyle="TextStyle.H5">Manufacturers Management</RadzenText>
                        </RadzenStack>

                        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.75rem">
                            <RadzenButton Icon="add"
                                          Text="Add"
                                          ButtonStyle="ButtonStyle.Primary"
                                          Click="ShowCreateModal" />
                            <RadzenButton Icon="refresh"
                                          Text="Refresh"
                                          Variant="Variant.Outlined"
                                          ButtonStyle="ButtonStyle.Secondary"
                                          Click="RefreshData" />
                        </RadzenStack>
                    </RadzenStack>

                    <RadzenBusyIndicator IsBusy="@isLoading">
                        @if (data?.Any() == true)
                        {
                            <RadzenDataGrid TItem="ManufacturerDto"
                                             Data="@data"
                                             AllowPaging="true"
                                             PageSize="10"
                                             AllowSorting="true"
                                             FilterMode="FilterMode.Advanced">
                                <Columns>
                                    <RadzenDataGridColumn TItem="ManufacturerDto" Title="Name" Property="Name">
                                        <Template Context="item">
                                            <RadzenText>@item.Name</RadzenText>
                                        </Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="ManufacturerDto" Title="Created" Property="CreatedAt">
                                        <Template Context="item">@item.CreatedAt.ToString("MMM dd, yyyy")</Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="ManufacturerDto" Title="Updated" Property="UpdatedAt">
                                        <Template Context="item">@(item.UpdatedAt?.ToString("MMM dd, yyyy") ?? "-")</Template>
                                    </RadzenDataGridColumn>
                                    <RadzenDataGridColumn TItem="ManufacturerDto" Title="Actions">
                                        <Template Context="item">
                                            <RadzenButton Icon="edit" Size="ButtonSize.Small" Variant="Variant.Text" Click="@(() => EditItem(item))" />
                                            <RadzenButton Icon="delete" Size="ButtonSize.Small" Variant="Variant.Text" ButtonStyle="ButtonStyle.Danger" Click="@(() => DeleteItem(item))" />
                                        </Template>
                                    </RadzenDataGridColumn>
                                </Columns>
                            </RadzenDataGrid>
                        }
                        else
                        {
                            <RadzenStack Orientation="Orientation.Vertical"
                                         AlignItems="AlignItems.Center"
                                         Gap="0.5rem"
                                         Style="padding: 1.5rem;">
                                <RadzenIcon Icon="store_mall_directory" Style="font-size:32px; color: var(--rz-text-secondary);" />
                                <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary);">No manufacturers found</RadzenText>
                            </RadzenStack>
                        }
                    </RadzenBusyIndicator>
                </RadzenStack>
        </RadzenCard>

    </Authorized>
    <NotAuthorized>
        <RadzenAlert AlertStyle="AlertStyle.Danger" ShowIcon="true">
            Access denied. Administrator role required.
        </RadzenAlert>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<ManufacturerDto> data = new();
    private bool isLoading = false;
    private bool isEditing = false;
    private bool isSaving = false;

    private CreateManufacturerDto currentItem = new();
    private ManufacturerDto? selectedItem = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            data = await ManufacturerService.GetAllManufacturersAsync();
        }
        catch (Exception ex)
        {
            UiNotificationService.ShowError("Error", $"An error occurred: {ex.Message}");
            data = new();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshData()
    {
        await LoadData();
    }

    private async Task ShowCreateModal()
    {
        currentItem = new CreateManufacturerDto();
        isEditing = false;
        
        await DialogService.OpenAsync("Create Manufacturer", ds => CreateManufacturerDialog(ds), new DialogOptions
        {
            Width = "500px",
            Height = "auto",
            CloseDialogOnOverlayClick = true,
            CloseDialogOnEsc = true
        });
    }

    private async Task EditItem(ManufacturerDto item)
    {
        selectedItem = item;
        currentItem = new CreateManufacturerDto
        {
            Name = item.Name
        };
        isEditing = true;
        
        await DialogService.OpenAsync("Edit Manufacturer", ds => CreateManufacturerDialog(ds), new DialogOptions
        {
            Width = "500px",
            Height = "auto",
            CloseDialogOnOverlayClick = true,
            CloseDialogOnEsc = true
        });
    }

    private void CloseModal(DialogService ds)
    {
        ds.Close();
        currentItem = new CreateManufacturerDto();
        selectedItem = null;
        isEditing = false;
    }

    private async Task OnSubmit(CreateManufacturerDto model, DialogService ds)
    {
        isSaving = true;
        try
        {
            if (isEditing && selectedItem != null)
            {
                var updateDto = new UpdateManufacturerDto
                {
                    Name = model.Name
                };
                var result = await ManufacturerService.UpdateManufacturerAsync(selectedItem.Id, updateDto);
                if (result != null)
                {
                    UiNotificationService.ShowSuccess("Success", "Manufacturer updated successfully");
                    ds.Close();
                    currentItem = new CreateManufacturerDto();
                    selectedItem = null;
                    isEditing = false;
                    await RefreshData();
                }
                else
                {
                    UiNotificationService.ShowError("Error", "Failed to update manufacturer");
                }
            }
            else
            {
                var result = await ManufacturerService.CreateManufacturerAsync(model);
                if (result != null)
                {
                    UiNotificationService.ShowSuccess("Success", "Manufacturer created successfully");
                    ds.Close();
                    currentItem = new CreateManufacturerDto();
                    selectedItem = null;
                    isEditing = false;
                    await RefreshData();
                }
                else
                {
                    UiNotificationService.ShowError("Error", "Failed to create manufacturer");
                }
            }
        }
        catch (Exception ex)
        {
            UiNotificationService.ShowError("Error", $"An error occurred: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeleteItem(ManufacturerDto item)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{item.Name}'?");
        if (confirmed)
        {
            try
            {
                var success = await ManufacturerService.DeleteManufacturerAsync(item.Id);
                if (success)
                {
                    UiNotificationService.ShowSuccess("Success", "Manufacturer deleted successfully");
                    await RefreshData();
                }
                else
                {
                    UiNotificationService.ShowError("Error", "Failed to delete manufacturer");
                }
            }
            catch (Exception ex)
            {
                UiNotificationService.ShowError("Error", $"An error occurred: {ex.Message}");
            }
        }
    }

    private RenderFragment CreateManufacturerDialog(DialogService ds) => builder =>
    {
        builder.OpenComponent<RadzenTemplateForm<CreateManufacturerDto>>(0);
        builder.AddAttribute(1, "Data", currentItem);
        builder.AddAttribute(2, "Submit", EventCallback.Factory.Create<CreateManufacturerDto>(this, async (model) => await OnSubmit(model, ds)));
        builder.AddAttribute(3, "ChildContent", (RenderFragment)((builder2) =>
        {
            builder2.OpenComponent<DataAnnotationsValidator>(0);
            builder2.CloseComponent();

            builder2.OpenComponent<RadzenStack>(1);
            builder2.AddAttribute(2, "Orientation", Orientation.Vertical);
            builder2.AddAttribute(3, "Gap", RadzenUi.Gap);
            builder2.AddAttribute(4, "ChildContent", (RenderFragment)((builder3) =>
            {
                builder3.OpenComponent<RadzenText>(0);
                builder3.AddAttribute(1, "TextStyle", TextStyle.H4);
                builder3.AddAttribute(2, "class", "rz-mb-3");
                builder3.AddAttribute(3, "ChildContent", (RenderFragment)((builder4) =>
                {
                    builder4.AddContent(0, $"{(isEditing ? "Edit" : "Create")} Manufacturer");
                }));
                builder3.CloseComponent();

                builder3.OpenComponent<RadzenFormField>(1);
                builder3.AddAttribute(2, "Text", "Name *");
                builder3.AddAttribute(3, "ChildContent", (RenderFragment)((builder4) =>
                {
                    builder4.OpenComponent<RadzenTextBox>(0);
                    builder4.AddAttribute(1, "Value", currentItem.Name);
                    builder4.AddAttribute(2, "ValueChanged", EventCallback.Factory.Create<string>(this, (value) => currentItem.Name = value));
                    builder4.AddAttribute(3, "Name", "manufacturerName");
                    builder4.CloseComponent();

                    builder4.OpenComponent<RadzenRequiredValidator>(1);
                    builder4.AddAttribute(2, "Component", "manufacturerName");
                    builder4.AddAttribute(3, "Text", "Name is required");
                    builder4.CloseComponent();
                }));
                builder3.CloseComponent();

                builder3.OpenComponent<RadzenStack>(2);
                builder3.AddAttribute(4, "Orientation", Orientation.Horizontal);
                builder3.AddAttribute(5, "JustifyContent", JustifyContent.End);
                builder3.AddAttribute(6, "Gap", "0.75rem");
                builder3.AddAttribute(7, "ChildContent", (RenderFragment)((builder4) =>
                {
                    builder4.OpenComponent<RadzenButton>(0);
                    builder4.AddAttribute(1, "Text", "Cancel");
                    builder4.AddAttribute(2, "ButtonStyle", ButtonStyle.Light);
                    builder4.AddAttribute(3, "Variant", Variant.Outlined);
                    builder4.AddAttribute(4, "Click", EventCallback.Factory.Create(this, () => CloseModal(ds)));
                    builder4.CloseComponent();

                    builder4.OpenComponent<RadzenButton>(1);
                    builder4.AddAttribute(2, "Text", isSaving ? (isEditing ? "Updating..." : "Creating...") : (isEditing ? "Update" : "Create"));
                    builder4.AddAttribute(3, "ButtonStyle", ButtonStyle.Primary);
                    builder4.AddAttribute(4, "ButtonType", ButtonType.Submit);
                    builder4.AddAttribute(5, "Disabled", isSaving);
                    builder4.CloseComponent();
                }));
                builder3.CloseComponent();
            }));
            builder2.CloseComponent();
        }));
        builder.CloseComponent();
    };
}
