@using Inventory.Shared.DTOs
@using Inventory.Shared.Interfaces
@using Inventory.Shared.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Linq
@inject IProductGroupService ProductGroupService
@inject IUINotificationService NotificationService
@inject IJSRuntime JSRuntime

<AuthorizeView Roles="Admin" Context="authState">
    <Authorized>
        <div class="reference-data-widget">
            <div class="widget-header">
                <h4><i class="fas fa-layer-group"></i> Product Groups Management</h4>
                <div class="widget-actions">
                    <button class="btn btn-primary btn-sm" @onclick="ShowCreateModal">
                        <i class="fas fa-plus"></i> Add New Group
                    </button>
                    <button class="btn btn-outline-secondary btn-sm" @onclick="RefreshData">
                        <i class="fas fa-refresh"></i> Refresh
                    </button>
                </div>
            </div>

            <div class="widget-content">
                @if (isLoading)
                {
                    <div class="text-center p-4">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else if (pagedGroups?.Any() == true)
                {
                    <RadzenDataGrid TItem="ProductGroupDto"
                                     @ref="grid"
                                     Data="@pagedGroups"
                                     Count="@totalCount"
                                     AllowPaging="true"
                                     PageSize="@pageSize"
                                     LoadData="@OnGridLoad"
                                     AllowSorting="true"
                                     Responsive="true">
                        <Columns>
                            <RadzenDataGridColumn TItem="ProductGroupDto" Title="Name" Property="Name">
                                <Template Context="item"><strong>@item.Name</strong></Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="ProductGroupDto" Title="Status">
                                <Template Context="item">
                                    @if (item.IsActive)
                                    {
                                        <RadzenBadge Text="Active" Style="success" />
                                    }
                                    else
                                    {
                                        <RadzenBadge Text="Inactive" Style="secondary" />
                                    }
                                </Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="ProductGroupDto" Title="Created" Property="CreatedAt">
                                <Template Context="item">@item.CreatedAt.ToString("MMM dd, yyyy")</Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="ProductGroupDto" Title="Updated" Property="UpdatedAt">
                                <Template Context="item">@(item.UpdatedAt?.ToString("MMM dd, yyyy") ?? "-")</Template>
                            </RadzenDataGridColumn>
                            <RadzenDataGridColumn TItem="ProductGroupDto" Title="Actions">
                                <Template Context="item">
                                    <RadzenButton Icon="edit" Size="ButtonSize.Small" Variant="Variant.Text" @onclick="(() => EditItem(item))" />
                                    <RadzenButton Icon="delete" Size="ButtonSize.Small" Variant="Variant.Text" ButtonStyle="ButtonStyle.Danger" @onclick="(() => DeleteItem(item))" />
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                }
                else
                {
                    <div class="text-center p-4">
                        <p class="text-muted">No product groups found</p>
                    </div>
                }
            </div>
        </div>

        <RadzenDialog Visible="@showModal"
                      Title="@($"{(isEditing ? "Edit" : "Create")} Product Group")"
                      Close="CloseModal"
                      Width="480px">
            <ChildContent>
                <RadzenTemplateForm Data="@currentItem" Submit="@(async (CreateProductGroupDto model) => await OnSubmit(model))">
                    <ChildContent Context="formContext">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <RadzenFormField Text="Name *" class="rz-mb-3">
                                <RadzenTextBox @bind-Value="currentItem.Name" Name="productGroupName" />
                                <RadzenRequiredValidator Component="productGroupName" Text="Name is required" />
                            </RadzenFormField>
                        </div>
                        @if (isEditing)
                        {
                            <div class="mb-3">
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
                                    <RadzenCheckBox @bind-Value="isActive" Name="isActive" />
                                    <RadzenLabel Text="Active" For="isActive" />
                                </RadzenStack>
                            </div>
                        }
                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.75rem">
                            <RadzenButton Text="Cancel"
                                          ButtonStyle="ButtonStyle.Light"
                                          Variant="Variant.Outlined"
                                          Click="@(args => CloseModal())" />
                            <RadzenButton Text="@(isSaving ? (isEditing ? "Updating..." : "Creating...") : (isEditing ? "Update" : "Create"))"
                                          ButtonStyle="ButtonStyle.Primary"
                                          ButtonType="ButtonType.Submit"
                                          Disabled="@isSaving" />
                        </RadzenStack>
                    </ChildContent>
                </RadzenTemplateForm>
            </ChildContent>
        </RadzenDialog>
    </Authorized>
    <NotAuthorized>
        <div class="alert alert-danger">
            <i class="fas fa-exclamation-triangle"></i>
            Access denied. Administrator role required.
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private RadzenDataGrid<ProductGroupDto>? grid;
    private List<ProductGroupDto> pagedGroups = new();
    private int totalCount = 0;
    private int pageSize = 10;
    private bool isLoading = false;
    private bool showModal = false;
    private bool isEditing = false;
    private bool isSaving = false;

    private CreateProductGroupDto currentItem = new();
    private ProductGroupDto? selectedItem = null;
    private bool isActive = true;

    protected override void OnInitialized()
    {
        // Grid handles data loading via OnGridLoad
    }

    private async Task RefreshData()
    {
        if (grid != null)
        {
            await grid.Reload();
        }
    }

    private void ShowCreateModal()
    {
        currentItem = new CreateProductGroupDto();
        isActive = true;
        isEditing = false;
        showModal = true;
    }

    private void EditItem(ProductGroupDto item)
    {
        selectedItem = item;
        currentItem = new CreateProductGroupDto
        {
            Name = item.Name
        };
        isActive = item.IsActive;
        isEditing = true;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        currentItem = new CreateProductGroupDto();
        selectedItem = null;
        isEditing = false;
    }

    private async Task OnSubmit(CreateProductGroupDto model)
    {
        isSaving = true;
        try
        {
            if (isEditing && selectedItem != null)
            {
                var updateDto = new UpdateProductGroupDto
                {
                    Name = model.Name,
                    IsActive = isActive
                };
                var result = await ProductGroupService.UpdateProductGroupAsync(selectedItem.Id, updateDto);
                if (result != null)
                {
                    NotificationService.ShowSuccess("Success", "Product group updated successfully");
                    CloseModal();
                    await RefreshData();
                }
                else
                {
                    NotificationService.ShowError("Error", "Failed to update product group");
                }
            }
            else
            {
                var result = await ProductGroupService.CreateProductGroupAsync(model);
                if (result != null)
                {
                    NotificationService.ShowSuccess("Success", "Product group created successfully");
                    CloseModal();
                    await RefreshData();
                }
                else
                {
                    NotificationService.ShowError("Error", "Failed to create product group");
                }
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowError("Error", $"An error occurred: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeleteItem(ProductGroupDto item)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{item.Name}'?");
        if (confirmed)
        {
            try
            {
                var success = await ProductGroupService.DeleteProductGroupAsync(item.Id);
                if (success)
                {
                    NotificationService.ShowSuccess("Success", "Product group deleted successfully");
                    await RefreshData();
                }
                else
                {
                    NotificationService.ShowError("Error", "Failed to delete product group");
                }
            }
            catch (Exception ex)
            {
                NotificationService.ShowError("Error", $"An error occurred: {ex.Message}");
            }
        }
    }
    private async Task OnGridLoad(Radzen.LoadDataArgs args)
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var top = args.Top ?? pageSize;
            if (top > 0)
            {
                pageSize = top;
            }

            var skip = args.Skip ?? 0;

            var allGroups = await ProductGroupService.GetAllProductGroupsAsync();
            totalCount = allGroups.Count;
            pagedGroups = allGroups.Skip(skip).Take(pageSize).ToList();
        }
        catch (Exception ex)
        {
            NotificationService.ShowError("Error", $"An error occurred: {ex.Message}");
            pagedGroups = new();
            totalCount = 0;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
