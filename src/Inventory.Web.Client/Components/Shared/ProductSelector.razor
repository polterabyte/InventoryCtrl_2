@using Inventory.Shared.DTOs
@using Inventory.Shared.Interfaces
@using Radzen
@using Radzen.Blazor

@inject IProductService ProductService
@inject NotificationService NotificationService

<RadzenStack Gap="1rem">
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
        <RadzenText TextStyle="TextStyle.H6" Class="rz-m-0">@Title</RadzenText>
        @if (Required && SelectedProduct == null)
        {
            <RadzenBadge Text="Required" BadgeStyle="BadgeStyle.Danger" IsPill="true" />
        }
        @if (SelectedProduct != null)
        {
            <RadzenBadge Text="Selected" BadgeStyle="BadgeStyle.Success" IsPill="true" />
        }
    </RadzenStack>

    @* Search and Filter Section *@
    <RadzenCard Class="rz-p-3">
        <RadzenStack Gap="1rem">
            <RadzenRow Gap="1rem">
                <RadzenColumn Size="12">
                    <RadzenLabel Text="Search Products" Component="productSearch" />
                    <RadzenTextBox @bind-Value="searchTerm"
                                   Name="productSearch"
                                   Placeholder="Search by name or description..."
                                   Style="width: 100%"
                                   @onkeypress="@HandleSearchKeyPress"
                                   @oninput="@HandleSearchInput" />
                </RadzenColumn>
                <RadzenColumn Size="12">
                    <RadzenLabel Text="Category" Component="categoryFilter" />
                    <RadzenDropDown @bind-Value="selectedCategoryId"
                                    Data="categories"
                                    TextProperty="Name"
                                    ValueProperty="Id"
                                    Name="categoryFilter"
                                    Placeholder="All Categories"
                                    AllowClear="true"
                                    Style="width: 100%"
                                    Change="@OnFilterChanged" />
                </RadzenColumn>
                <RadzenColumn Size="12">
                    <RadzenLabel Text="&nbsp;" />
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem">
                        <RadzenButton Text="Search" 
                                      Icon="search" 
                                      ButtonStyle="ButtonStyle.Primary"
                                      Size="ButtonSize.Small"
                                      Click="@SearchProducts" />
                        <RadzenButton Text="Clear" 
                                      Icon="clear" 
                                      ButtonStyle="ButtonStyle.Light"
                                      Size="ButtonSize.Small"
                                      Click="@ClearSearch" />
                    </RadzenStack>
                </RadzenColumn>
            </RadzenRow>
        </RadzenStack>
    </RadzenCard>

    @* Selected Product Display *@
    @if (SelectedProduct != null)
    {
        <RadzenAlert AlertStyle="AlertStyle.Success" Shade="Shade.Lighter" Variant="Variant.Flat">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                <RadzenStack Gap="0.5rem">
                    <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-m-0">Selected: @SelectedProduct.Name</RadzenText>
                    <RadzenText TextStyle="TextStyle.Body2" Class="rz-text-secondary rz-m-0">
                        Category: @SelectedProduct.CategoryName
                    </RadzenText>
                    @if (!string.IsNullOrEmpty(SelectedProduct.Description))
                    {
                        <RadzenText TextStyle="TextStyle.Caption" Class="rz-text-secondary rz-m-0">
                            @SelectedProduct.Description
                        </RadzenText>
                    }
                </RadzenStack>
                <RadzenButton Text="Clear Selection" 
                              Icon="clear" 
                              ButtonStyle="ButtonStyle.Danger"
                              Variant="Variant.Text"
                              Size="ButtonSize.Small"
                              Click="@ClearSelection" />
            </RadzenStack>
        </RadzenAlert>
    }

    @* Product List *@
    @if (loading)
    {
        <RadzenCard Class="rz-p-4">
            <RadzenStack AlignItems="AlignItems.Center" Gap="1rem">
                <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                <RadzenText TextStyle="TextStyle.Body1">Loading products...</RadzenText>
            </RadzenStack>
        </RadzenCard>
    }
    else if (errorMessage != null)
    {
        <RadzenAlert AlertStyle="AlertStyle.Danger" Shade="Shade.Lighter" Variant="Variant.Flat">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                <RadzenIcon Icon="error" />
                <RadzenText TextStyle="TextStyle.Body1"><strong>Error:</strong> @errorMessage</RadzenText>
            </RadzenStack>
        </RadzenAlert>
    }
    else if (products?.Count == 0)
    {
        <RadzenCard Class="rz-p-4">
            <RadzenStack AlignItems="AlignItems.Center" Gap="1rem">
                <RadzenIcon Icon="inventory_2" Style="font-size: 3rem; color: var(--rz-text-disabled)" />
                <RadzenText TextStyle="TextStyle.H6" Class="rz-text-secondary">
                    @(string.IsNullOrEmpty(searchTerm) ? "No products available" : "No products match your search")
                </RadzenText>
                @if (!string.IsNullOrEmpty(searchTerm))
                {
                    <RadzenButton Text="Clear Search" 
                                  Icon="clear" 
                                  ButtonStyle="ButtonStyle.Light"
                                  Click="@ClearSearch" />
                }
            </RadzenStack>
        </RadzenCard>
    }
    else if (SelectedProduct == null)
    {
        <RadzenCard Class="rz-p-3">
            <RadzenStack Gap="1rem">
                <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-m-0">Available Products (@products?.Count)</RadzenText>
                
                <RadzenDataGrid Data="@products" 
                                TItem="ProductDto" 
                                AllowPaging="true" 
                                PageSize="5"
                                AllowSorting="true"
                                RowSelect="@OnProductSelect"
                                SelectionMode="DataGridSelectionMode.Single"
                                Class="product-grid">
                    <Columns>
                        <RadzenDataGridColumn TItem="ProductDto" Property="Name" Title="Name" />
                        <RadzenDataGridColumn TItem="ProductDto" Property="CategoryName" Title="Category" Width="150px" />
                        <RadzenDataGridColumn TItem="ProductDto" Property="Quantity" Title="Stock" Width="80px">
                            <Template Context="product">
                                <RadzenBadge Text="@product.Quantity.ToString()" 
                                             BadgeStyle="@(product.Quantity > 0 ? BadgeStyle.Success : BadgeStyle.Warning)" />
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="ProductDto" Title="Action" Width="100px" Sortable="false">
                            <Template Context="product">
                                <RadzenButton Text="Select" 
                                              Icon="check" 
                                              ButtonStyle="ButtonStyle.Primary"
                                              Size="ButtonSize.Small"
                                              Click="@(() => SelectProduct(product))" />
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenStack>
        </RadzenCard>
    }
</RadzenStack>

<style>
    .product-grid .rz-datatable-data tr {
        cursor: pointer;
    }

    .product-grid .rz-datatable-data tr:hover {
        background-color: var(--rz-base-100);
    }

    .product-selector-card {
        border: 2px solid transparent;
        transition: border-color 0.2s ease;
    }

    .product-selector-card:hover {
        border-color: var(--rz-primary);
    }

    .product-selector-card.selected {
        border-color: var(--rz-success);
        background-color: var(--rz-success-lighter);
    }
</style>

@code {
    [Parameter] public string Title { get; set; } = "Select Product";
    [Parameter] public bool Required { get; set; } = false;
    [Parameter] public ProductDto? SelectedProduct { get; set; }
    [Parameter] public EventCallback<ProductDto?> SelectedProductChanged { get; set; }
    [Parameter] public EventCallback<ProductDto> OnProductSelected { get; set; }
    [Parameter] public Func<ProductDto, bool>? ProductFilter { get; set; }

    private List<ProductDto>? products;
    private List<CategoryDto>? categories;
    private bool loading = false;
    private string? errorMessage;
    private string searchTerm = string.Empty;
    private int? selectedCategoryId;
    private System.Timers.Timer? searchDebounceTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
        await LoadProducts();
    }

    private async Task LoadCategories()
    {
        try
        {
            // TODO: Implement category loading when ICategoryService is available
            // categories = await categoryService.GetAllCategoriesAsync();
            categories = new List<CategoryDto>(); // Placeholder
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load categories: {ex.Message}");
            categories = new List<CategoryDto>();
        }
    }

    private async Task LoadProducts()
    {
        loading = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            var allProducts = await ProductService.GetAllProductsAsync();
            
            // Apply search filter
            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                var searchLower = searchTerm.ToLowerInvariant();
                allProducts = allProducts.Where(p =>
                    p.Name.ToLowerInvariant().Contains(searchLower) ||
                    (p.Description != null && p.Description.ToLowerInvariant().Contains(searchLower))
                ).ToList();
            }

            // Apply category filter
            if (selectedCategoryId.HasValue)
            {
                allProducts = allProducts.Where(p => p.CategoryId == selectedCategoryId.Value).ToList();
            }

            // Apply custom filter if provided
            if (ProductFilter != null)
            {
                allProducts = allProducts.Where(ProductFilter).ToList();
            }

            // Only show active products
            products = allProducts.Where(p => p.IsActive).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load products: {ex.Message}";
            products = new List<ProductDto>();
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task SearchProducts()
    {
        await LoadProducts();
    }

    private async Task ClearSearch()
    {
        searchTerm = string.Empty;
        selectedCategoryId = null;
        await LoadProducts();
    }

    private async Task OnFilterChanged()
    {
        await LoadProducts();
    }

    private async Task HandleSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchProducts();
        }
    }

    private void HandleSearchInput()
    {
        // Debounce search to avoid too many API calls
        searchDebounceTimer?.Stop();
        searchDebounceTimer = new System.Timers.Timer(500);
        searchDebounceTimer.Elapsed += async (sender, e) =>
        {
            searchDebounceTimer.Stop();
            await InvokeAsync(SearchProducts);
        };
        searchDebounceTimer.Start();
    }

    private async Task SelectProduct(ProductDto product)
    {
        SelectedProduct = product;
        await SelectedProductChanged.InvokeAsync(SelectedProduct);
        await OnProductSelected.InvokeAsync(product);
        StateHasChanged();
    }

    private async Task OnProductSelect(ProductDto product)
    {
        await SelectProduct(product);
    }

    private async Task ClearSelection()
    {
        SelectedProduct = null;
        await SelectedProductChanged.InvokeAsync(SelectedProduct);
        StateHasChanged();
    }

    public void Dispose()
    {
        searchDebounceTimer?.Dispose();
    }
}