@page "/requests/create"

@using Microsoft.AspNetCore.Authorization
@using Inventory.Shared.DTOs
@using Inventory.Shared.Interfaces
@using System.ComponentModel.DataAnnotations
@using System.Linq
@using Radzen
@using Radzen.Blazor

@inject IRequestApiService RequestService
@inject NavigationManager Navigation
@inject NotificationService NotificationService
@inject IProductService ProductService
@inject IWarehouseService WarehouseService

@attribute [Authorize]

<PageTitle>Create Request - Inventory Control</PageTitle>

<div class="content-card">
    <RadzenStack Gap="2rem">
        @* Header *@
        <RadzenStack Gap="0.5rem">
            <RadzenText TextStyle="TextStyle.H4" Class="rz-m-0">Create New Request</RadzenText>
            <RadzenText TextStyle="TextStyle.Body2" Class="rz-text-secondary rz-m-0">
                Create a new inventory request to track items needed for your projects
            </RadzenText>
        </RadzenStack>

        @* Form *@
        <EditForm Model="@createRequest" OnValidSubmit="@HandleSubmit">
            <DataAnnotationsValidator />

            <RadzenStack Gap="1.5rem">
                @* Basic Information *@
                <RadzenCard Class="rz-p-4">
                    <RadzenStack Gap="1rem">
                        <RadzenText TextStyle="TextStyle.H6" Class="rz-m-0">Request Information</RadzenText>
                        
                        <RadzenRow Gap="1rem">
                            <RadzenColumn Size="@ColumnFull">
                                <RadzenStack Gap="0.5rem">
                                    <RadzenLabel Text="Title *" Component="titleInput" />
                                    <RadzenTextBox @bind-Value="createRequest.Title" 
                                                   Name="titleInput"
                                                   Placeholder="Enter a descriptive title for your request"
                                                   Style="width: 100%"
                                                   MaxLength="200" />
                                    <ValidationMessage For="@(() => createRequest.Title)" />
                                </RadzenStack>
                            </RadzenColumn>
                        </RadzenRow>
                        
                        <RadzenRow Gap="1rem">
                            <RadzenColumn Size="@ColumnFull">
                                <RadzenStack Gap="0.5rem">
                                    <RadzenLabel Text="Description" Component="descriptionInput" />
                                    <RadzenTextArea @bind-Value="createRequest.Description" 
                                                    Name="descriptionInput"
                                                    Placeholder="Provide additional details about this request (optional)"
                                                    Style="width: 100%"
                                                    Rows="4"
                                                    MaxLength="1000" />
                                    <RadzenText TextStyle="TextStyle.Caption" Class="rz-text-secondary rz-m-0">
                                        @(createRequest.Description?.Length ?? 0)/1000 characters
                                    </RadzenText>
                                    <ValidationMessage For="@(() => createRequest.Description)" />
                                </RadzenStack>
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenStack>
                </RadzenCard>

                @* Request Items *@
                <RadzenCard Class="rz-p-4">
                    <RadzenStack Gap="1rem">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                            <RadzenText TextStyle="TextStyle.H6" Class="rz-m-0">Request Items</RadzenText>
                            <RadzenButton Text="Add Item"
                                          Icon="add"
                                          ButtonStyle="ButtonStyle.Secondary"
                                          Click="AddItem"
                                          Disabled="submitting || isLoadingLookups" />
                        </RadzenStack>

                        @if (isLoadingLookups)
                        {
                            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center">
                                <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Small" />
                                <RadzenText TextStyle="TextStyle.Body2">Loading products and warehouses...</RadzenText>
                            </RadzenStack>
                        }

                        @if (createRequest.Items.Count == 0)
                        {
                            <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Lighter" Variant="Variant.Flat">
                                <RadzenText TextStyle="TextStyle.Body2">Add at least one item to this request.</RadzenText>
                            </RadzenAlert>
                        }
                        else
                        {
                            <RadzenStack Gap="1rem">
                                @for (var index = 0; index < createRequest.Items.Count; index++)
                                {
                                    var item = createRequest.Items[index];
                                    var i = index;
                                    <RadzenCard Class="rz-p-3">
                                        <RadzenStack Gap="1rem">
                                            <RadzenRow Gap="1rem">
                                                <RadzenColumn Size="@ColumnFull" SizeMd="@ColumnHalf">
                                                    <RadzenStack Gap="0.5rem">
                                                        <RadzenLabel Text="Product *" Component=@($"product-{i}") />
                                                        <RadzenDropDown Data="products"
                                                                        TextProperty="Name"
                                                                        ValueProperty="Id"
                                                                        AllowFiltering="true"
                                                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                                        @bind-Value="item.ProductId"
                                                                        Name=@($"product-{i}")
                                                                        Placeholder="Select product"
                                                                        Style="width: 100%"
                                                                        Disabled="isLoadingLookups || submitting" />
                                                        <ValidationMessage For="@(() => createRequest.Items[i].ProductId)" />
                                                    </RadzenStack>
                                                </RadzenColumn>
                                                <RadzenColumn Size="@ColumnFull" SizeMd="@ColumnHalf">
                                                    <RadzenStack Gap="0.5rem">
                                                        <RadzenLabel Text="Warehouse *" Component=@($"warehouse-{i}") />
                                                        <RadzenDropDown Data="warehouses"
                                                                        TextProperty="Name"
                                                                        ValueProperty="Id"
                                                                        AllowFiltering="true"
                                                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                                        @bind-Value="item.WarehouseId"
                                                                        Name=@($"warehouse-{i}")
                                                                        Placeholder="Select warehouse"
                                                                        Style="width: 100%"
                                                                        Disabled="isLoadingLookups || submitting" />
                                                        <ValidationMessage For="@(() => createRequest.Items[i].WarehouseId)" />
                                                    </RadzenStack>
                                                </RadzenColumn>
                                            </RadzenRow>

                                            <RadzenRow Gap="1rem">
                                                <RadzenColumn Size="@ColumnFull" SizeMd="@ColumnThird">
                                                    <RadzenStack Gap="0.5rem">
                                                        <RadzenLabel Text="Quantity *" Component=@($"quantity-{i}") />
                                                        <RadzenNumeric TValue="int"
                                                                       Style="width: 100%"
                                                                       Name=@($"quantity-{i}")
                                                                       @bind-Value="item.Quantity"
                                                                       Min="1"
                                                                       ShowUpDown="true"
                                                                       Step="1"
                                                                       Disabled="submitting" />
                                                        <ValidationMessage For="@(() => createRequest.Items[i].Quantity)" />
                                                    </RadzenStack>
                                                </RadzenColumn>

                                            </RadzenRow>

                                            <RadzenRow Gap="1rem">
                                                <RadzenColumn Size="@ColumnFull">
                                                    <RadzenStack Gap="0.5rem">
                                                        <RadzenLabel Text="Description" Component=@($"description-{i}") />
                                                        <RadzenTextArea @bind-Value="item.Description"
                                                                        Name=@($"description-{i}")
                                                                        Placeholder="Additional notes for this item"
                                                                        Style="width: 100%"
                                                                        Rows="2"
                                                                        MaxLength="500"
                                                                        Disabled="submitting" />
                                                    </RadzenStack>
                                                </RadzenColumn>
                                            </RadzenRow>

                                            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
                                                <RadzenButton Text="Remove"
                                                              Icon="delete"
                                                              ButtonStyle="ButtonStyle.Danger"
                                                              Size="ButtonSize.Small"
                                                              Click="@(() => RemoveItem(item))"
                                                              Disabled="submitting" />
                                            </RadzenStack>
                                        </RadzenStack>
                                    </RadzenCard>
                                }
                            </RadzenStack>
                        }
                    </RadzenStack>
                </RadzenCard>

                @* Actions *@
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
                    <RadzenButton Text="Create Request"
                                  Icon="add_circle" 
                                  ButtonStyle="ButtonStyle.Primary"
                                  ButtonType="ButtonType.Submit"
                                  Disabled="@submitting"
                                  Loading="@submitting" />
                    
                    <RadzenButton Text="Cancel" 
                                  Icon="cancel" 
                                  ButtonStyle="ButtonStyle.Light"
                                  Click="@(() => Navigation.NavigateTo("/requests"))"
                                  Disabled="@submitting" />
                    
                    @if (submitting)
                    {
                        <RadzenText TextStyle="TextStyle.Body2" Class="rz-text-secondary rz-m-0">
                            Creating request...
                        </RadzenText>
                    }
                </RadzenStack>

                @* Validation Summary *@
                <ValidationSummary />
            </RadzenStack>
        </EditForm>
    </RadzenStack>
</div>

<style>
    .create-request-form {
        max-width: 800px;
        margin: 0 auto;
    }

    .form-section {
        border: 1px solid var(--rz-border);
        border-radius: var(--rz-border-radius);
        padding: 1.5rem;
        background-color: var(--rz-base-0);
    }

    .form-actions {
        border-top: 1px solid var(--rz-border);
        padding-top: 1.5rem;
        margin-top: 1.5rem;
    }
</style>

@code {
    private const int ColumnFull = 12;
    private const int ColumnHalf = 6;
    private const int ColumnThird = 4;

    private CreateRequestModel createRequest = new();
    private bool submitting = false;
    private bool isLoadingLookups = false;
    private List<ProductDto> products = new();
    private List<WarehouseDto> warehouses = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadLookupsAsync();
        if (createRequest.Items.Count == 0)
        {
            createRequest.Items.Add(new RequestItemModel());
        }
    }

    private async Task HandleSubmit()
    {
        if (submitting) return;

        submitting = true;
        StateHasChanged();

        try
        {
            if (createRequest.Items.Count == 0)
            {
                NotificationService.Notify(new Radzen.NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Missing items",
                    Detail = "Add at least one item to the request before submitting.",
                    Duration = 4000
                });
                return;
            }

            var dto = new CreateRequestDto
            {
                Title = createRequest.Title?.Trim() ?? string.Empty,
                Description = string.IsNullOrWhiteSpace(createRequest.Description) ? null : createRequest.Description.Trim(),
                Items = createRequest.Items.Select(item => item.ToInputDto()).ToList()
            };

            var response = await RequestService.CreateRequestAsync(dto);

            if (response.Success && response.Data != null)
            {
                NotificationService.Notify(new Radzen.NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Request Created",
                    Detail = $"Request '{response.Data.Title}' has been created successfully",
                    Duration = 4000
                });

                // Navigate to the created request details page
                Navigation.NavigateTo($"/requests/{response.Data.Id}");
            }
            else
            {
                NotificationService.Notify(new Radzen.NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Creation Failed",
                    Detail = response.ErrorMessage ?? "Failed to create request",
                    Duration = 4000
                });
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new Radzen.NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = $"An error occurred: {ex.Message}",
                Duration = 4000
            });
        }
        finally
        {
            submitting = false;
            StateHasChanged();
        }
    }

    private async Task LoadLookupsAsync()
    {
        try
        {
            isLoadingLookups = true;
            products = await ProductService.GetAllProductsAsync();
            warehouses = await WarehouseService.GetAllWarehousesAsync();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new Radzen.NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Lookup Load Failed",
                Detail = $"Failed to load products or warehouses: {ex.Message}",
                Duration = 5000
            });
        }
        finally
        {
            isLoadingLookups = false;
            StateHasChanged();
        }
    }

    private void AddItem()
    {
        createRequest.Items.Add(new RequestItemModel());
        StateHasChanged();
    }

    private void RemoveItem(RequestItemModel item)
    {
        createRequest.Items.Remove(item);
        StateHasChanged();
    }

    public class CreateRequestModel
    {
        [Required(ErrorMessage = "Title is required")]
        [StringLength(200, ErrorMessage = "Title cannot exceed 200 characters")]
        [MinLength(3, ErrorMessage = "Title must be at least 3 characters long")]
        public string Title { get; set; } = string.Empty;

        [StringLength(1000, ErrorMessage = "Description cannot exceed 1000 characters")]
        public string? Description { get; set; }

        [MinLength(1, ErrorMessage = "At least one request item is required")]
        public List<RequestItemModel> Items { get; set; } = new();
    }

    public class RequestItemModel
    {
        [Required(ErrorMessage = "Product is required")]
        public int? ProductId { get; set; }

        [Required(ErrorMessage = "Warehouse is required")]
        public int? WarehouseId { get; set; }

        [Range(1, int.MaxValue, ErrorMessage = "Quantity must be at least 1")]
        public int Quantity { get; set; } = 1;

        public string? Description { get; set; }

        public int? LocationId { get; set; }

        public RequestItemInputDto ToInputDto()
        {
            return new RequestItemInputDto
            {
                ProductId = ProductId ?? 0,
                WarehouseId = WarehouseId ?? 0,
                Quantity = Quantity,
                Description = string.IsNullOrWhiteSpace(Description) ? null : Description.Trim(),
                LocationId = LocationId
            };
        }
    }
}