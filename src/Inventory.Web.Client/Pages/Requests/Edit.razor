@page "/requests/{Id:int}/edit"

@using Microsoft.AspNetCore.Authorization
@using Inventory.Shared.DTOs
@using Inventory.Shared.Interfaces
@using Inventory.Web.Client.Components.Shared
@using System.ComponentModel.DataAnnotations
@using System
@using System.Linq
@using Radzen
@using Radzen.Blazor

@inject IRequestApiService RequestService
@inject NavigationManager Navigation
@inject NotificationService NotificationService
@inject IProductService ProductService
@inject IWarehouseService WarehouseService

@attribute [Authorize]

<PageTitle>Edit Request - Inventory Control</PageTitle>

<div class="content-card">
    @if (loading)
    {
        <RadzenStack AlignItems="AlignItems.Center" Gap="1rem" Class="rz-p-8">
            <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
            <RadzenText TextStyle="TextStyle.Body1">Loading request...</RadzenText>
        </RadzenStack>
    }
    else if (errorMessage != null)
    {
        <RadzenAlert AlertStyle="AlertStyle.Danger" Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Large">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                <RadzenIcon Icon="error" />
                <RadzenText TextStyle="TextStyle.Body1"><strong>Error:</strong> @errorMessage</RadzenText>
            </RadzenStack>
        </RadzenAlert>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" Class="rz-mt-4">
            <RadzenButton Text="Retry" Icon="refresh" ButtonStyle="ButtonStyle.Primary" Click="@LoadRequestDetails" />
            <RadzenButton Text="Back to Requests" Icon="arrow_back" ButtonStyle="ButtonStyle.Light" Click="@(() => Navigation.NavigateTo("/requests"))" />
        </RadzenStack>
    }
    else if (originalRequest == null)
    {
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Large">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                <RadzenIcon Icon="warning" />
                <RadzenText TextStyle="TextStyle.Body1">Request not found.</RadzenText>
            </RadzenStack>
        </RadzenAlert>
        <RadzenButton Text="Back to Requests" Icon="arrow_back" ButtonStyle="ButtonStyle.Primary" Click="@(() => Navigation.NavigateTo("/requests"))" Class="rz-mt-4" />
    }
    else if (!CanEdit())
    {
        <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Lighter" Variant="Variant.Flat" Size="AlertSize.Large">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                <RadzenIcon Icon="warning" />
                <RadzenText TextStyle="TextStyle.Body1">This request cannot be edited in its current status: @originalRequest.Status</RadzenText>
            </RadzenStack>
        </RadzenAlert>
        <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" Class="rz-mt-4">
            <RadzenButton Text="View Details" Icon="visibility" ButtonStyle="ButtonStyle.Primary" Click="@(() => Navigation.NavigateTo($"/requests/{Id}"))" />
            <RadzenButton Text="Back to Requests" Icon="arrow_back" ButtonStyle="ButtonStyle.Light" Click="@(() => Navigation.NavigateTo("/requests"))" />
        </RadzenStack>
    }
    else
    {
        <RadzenStack Gap="2rem">
            @* Header *@
            <RadzenStack Gap="0.5rem">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
                    <RadzenText TextStyle="TextStyle.H4" Class="rz-m-0">Edit Request #@Id</RadzenText>
                    <RequestStatusBadge Status="@originalRequest.Status" />
                </RadzenStack>
                <RadzenText TextStyle="TextStyle.Body2" Class="rz-text-secondary rz-m-0">
                    Make changes to your request while it's still in draft status
                </RadzenText>
            </RadzenStack>

            @* Form *@
            <EditForm Model="@editRequest" OnValidSubmit="@HandleSubmit">
                <DataAnnotationsValidator />

                <RadzenStack Gap="1.5rem">
                    @* Basic Information *@
                    <RadzenCard Class="rz-p-4">
                        <RadzenStack Gap="1rem">
                            <RadzenText TextStyle="TextStyle.H6" Class="rz-m-0">Request Information</RadzenText>
                            
                            <RadzenRow Gap="1rem">
                                <RadzenColumn Size="@ColumnFull">
                                    <RadzenStack Gap="0.5rem">
                                        <RadzenLabel Text="Title *" Component="titleInput" />
                                        <RadzenTextBox @bind-Value="editRequest.Title" 
                                                       Name="titleInput"
                                                       Placeholder="Enter a descriptive title for your request"
                                                       Style="width: 100%"
                                                       MaxLength="200" />
                                        <ValidationMessage For="@(() => editRequest.Title)" />
                                    </RadzenStack>
                                </RadzenColumn>
                            </RadzenRow>
                            
                            <RadzenRow Gap="1rem">
                                <RadzenColumn Size="@ColumnFull">
                                    <RadzenStack Gap="0.5rem">
                                        <RadzenLabel Text="Description" Component="descriptionInput" />
                                        <RadzenTextArea @bind-Value="editRequest.Description" 
                                                        Name="descriptionInput"
                                                        Placeholder="Provide additional details about this request (optional)"
                                                        Style="width: 100%"
                                                        Rows="4"
                                                        MaxLength="1000" />
                                        <RadzenText TextStyle="TextStyle.Caption" Class="rz-text-secondary rz-m-0">
                                            @(editRequest.Description?.Length ?? 0)/1000 characters
                                        </RadzenText>
                                        <ValidationMessage For="@(() => editRequest.Description)" />
                                    </RadzenStack>
                                </RadzenColumn>
                            </RadzenRow>
                        </RadzenStack>
                    </RadzenCard>

                    @* Request Items *@
                    <RadzenCard Class="rz-p-4">
                        <RadzenStack Gap="1rem">
                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                                <RadzenText TextStyle="TextStyle.H6" Class="rz-m-0">Request Items</RadzenText>
                                <RadzenButton Text="Add Item"
                                              Icon="add"
                                              ButtonStyle="ButtonStyle.Secondary"
                                              Click="AddItem"
                                              Disabled="submitting || isLoadingLookups" />
                            </RadzenStack>

                            @if (isLoadingLookups)
                            {
                                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center">
                                    <RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Small" />
                                    <RadzenText TextStyle="TextStyle.Body2">Loading products and warehouses...</RadzenText>
                                </RadzenStack>
                            }

                            @if (editRequest.Items.Count == 0)
                            {
                                <RadzenAlert AlertStyle="AlertStyle.Warning" Shade="Shade.Lighter" Variant="Variant.Flat">
                                    <RadzenText TextStyle="TextStyle.Body2">Add at least one item before saving changes.</RadzenText>
                                </RadzenAlert>
                            }
                            else
                            {
                                <RadzenStack Gap="1rem">
                                    @for (var index = 0; index < editRequest.Items.Count; index++)
                                    {
                                        var item = editRequest.Items[index];
                                        var i = index;
                                        <RadzenCard Class="rz-p-3">
                                            <RadzenStack Gap="1rem">
                                                <RadzenRow Gap="1rem">
                                                <RadzenColumn Size="@ColumnFull" SizeMd="@ColumnHalf">
                                                    <RadzenStack Gap="0.5rem">
                                                        <RadzenLabel Text="Product *" Component=@($"product-{i}") />
                                                        <RadzenDropDown Data="products"
                                                                        TextProperty="Name"
                                                                        ValueProperty="Id"
                                                                        AllowFiltering="true"
                                                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                                        @bind-Value="item.ProductId"
                                                                        Name=@($"product-{i}")
                                                                        Placeholder="Select product"
                                                                        Style="width: 100%"
                                                                        Disabled="isLoadingLookups || submitting" />
                                                            <ValidationMessage For="@(() => editRequest.Items[i].ProductId)" />
                                                    </RadzenStack>
                                                </RadzenColumn>
                                                <RadzenColumn Size="@ColumnFull" SizeMd="@ColumnHalf">
                                                    <RadzenStack Gap="0.5rem">
                                                        <RadzenLabel Text="Warehouse *" Component=@($"warehouse-{i}") />
                                                        <RadzenDropDown Data="warehouses"
                                                                        TextProperty="Name"
                                                                        ValueProperty="Id"
                                                                        AllowFiltering="true"
                                                                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                                        @bind-Value="item.WarehouseId"
                                                                        Name=@($"warehouse-{i}")
                                                                        Placeholder="Select warehouse"
                                                                        Style="width: 100%"
                                                                        Disabled="isLoadingLookups || submitting" />
                                                            <ValidationMessage For="@(() => editRequest.Items[i].WarehouseId)" />
                                                    </RadzenStack>
                                                </RadzenColumn>
                                                </RadzenRow>

                                                <RadzenRow Gap="1rem">
                                                <RadzenColumn Size="@ColumnFull" SizeMd="@ColumnThird">
                                                    <RadzenStack Gap="0.5rem">
                                                        <RadzenLabel Text="Quantity *" Component=@($"quantity-{i}") />
                                                        <RadzenNumeric TValue="int"
                                                                       Style="width: 100%"
                                                                       Name=@($"quantity-{i}")
                                                                       @bind-Value="item.Quantity"
                                                                       Min="1"
                                                                       ShowUpDown="true"
                                                                       Step="1"
                                                                       Disabled="submitting" />
                                                            <ValidationMessage For="@(() => editRequest.Items[i].Quantity)" />
                                                    </RadzenStack>
                                                </RadzenColumn>

                                                <RadzenColumn Size="@ColumnFull" SizeMd="@ColumnThird">
                                                    <RadzenStack Gap="0.5rem">
                                                        <RadzenLabel Text="Unit Price" Component=@($"price-{i}") />
                                                        <RadzenNumeric TValue="decimal?"
                                                                       @bind-Value="item.UnitPrice"
                                                                       Name=@($"price-{i}")
                                                                       Style="width: 100%"
                                                                       Min="0"
                                                                       Step="0.01"
                                                                       Disabled="submitting" />
                                                    </RadzenStack>
                                                </RadzenColumn>
                                                </RadzenRow>

                                                <RadzenRow Gap="1rem">
                                                <RadzenColumn Size="@ColumnFull">
                                                    <RadzenStack Gap="0.5rem">
                                                        <RadzenLabel Text="Description" Component=@($"description-{i}") />
                                                        <RadzenTextArea @bind-Value="item.Description"
                                                                        Name=@($"description-{i}")
                                                                        Placeholder="Additional notes for this item"
                                                                        Style="width: 100%"
                                                                        Rows="2"
                                                                        MaxLength="500"
                                                                        Disabled="submitting" />
                                                    </RadzenStack>
                                                </RadzenColumn>
                                                </RadzenRow>

                                                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
                                                    <RadzenButton Text="Remove"
                                                                  Icon="delete"
                                                                  ButtonStyle="ButtonStyle.Danger"
                                                                  Size="ButtonSize.Small"
                                                                  Click="@(() => RemoveItem(item))"
                                                                  Disabled="submitting" />
                                                </RadzenStack>
                                            </RadzenStack>
                                        </RadzenCard>
                                    }
                                </RadzenStack>
                            }
                        </RadzenStack>
                    </RadzenCard>

                    @* Change Summary *@
                    @if (HasChanges())
                    {
                        <RadzenAlert AlertStyle="AlertStyle.Info" Shade="Shade.Lighter" Variant="Variant.Flat">
                            <RadzenStack Gap="0.5rem">
                                <RadzenText TextStyle="TextStyle.Subtitle1" Class="rz-m-0">Changes detected:</RadzenText>
                                <RadzenStack Gap="0.25rem">
                                    @if (editRequest.Title != originalRequest.Title)
                                    {
                                        <RadzenText TextStyle="TextStyle.Body2" Class="rz-m-0">• Title has been modified</RadzenText>
                                    }
                                    @if (editRequest.Description != originalRequest.Description)
                                    {
                                        <RadzenText TextStyle="TextStyle.Body2" Class="rz-m-0">• Description has been modified</RadzenText>
                                    }
                                    @if (!ItemsMatchOriginal())
                                    {
                                        <RadzenText TextStyle="TextStyle.Body2" Class="rz-m-0">• Request items have been modified</RadzenText>
                                    }
                                </RadzenStack>
                            </RadzenStack>
                        </RadzenAlert>
                    }

                    @* Actions *@
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="1rem">
                        <RadzenButton Text="Save Changes" 
                                      Icon="save" 
                                      ButtonStyle="ButtonStyle.Primary"
                                      ButtonType="ButtonType.Submit"
                                      Disabled="@(submitting || !HasChanges())"
                                      Loading="@submitting" />
                        
                        <RadzenButton Text="View Details" 
                                      Icon="visibility" 
                                      ButtonStyle="ButtonStyle.Secondary"
                                      Click="@(() => Navigation.NavigateTo($"/requests/{Id}"))"
                                      Disabled="@submitting" />
                        
                        <RadzenButton Text="Back to Requests" 
                                      Icon="arrow_back" 
                                      ButtonStyle="ButtonStyle.Light"
                                      Click="@(() => Navigation.NavigateTo("/requests"))"
                                      Disabled="@submitting" />
                        
                        @if (submitting)
                        {
                            <RadzenText TextStyle="TextStyle.Body2" Class="rz-text-secondary rz-m-0">
                                Saving changes...
                            </RadzenText>
                        }
                    </RadzenStack>

                    @* Validation Summary *@
                    <ValidationSummary />
                </RadzenStack>
            </EditForm>
        </RadzenStack>
    }
</div>

<style>
    .edit-request-form {
        max-width: 800px;
        margin: 0 auto;
    }

    .form-section {
        border: 1px solid var(--rz-border);
        border-radius: var(--rz-border-radius);
        padding: 1.5rem;
        background-color: var(--rz-base-0);
    }

    .form-actions {
        border-top: 1px solid var(--rz-border);
        padding-top: 1.5rem;
        margin-top: 1.5rem;
    }
</style>

@code {
    private const int ColumnFull = 12;
    private const int ColumnHalf = 6;
    private const int ColumnThird = 4;

    [Parameter] public int Id { get; set; }

    private RequestDetailsDto? originalRequest;
    private EditRequestModel editRequest = new();
    private bool loading = true;
    private bool submitting = false;
    private string? errorMessage;
    private bool isLoadingLookups = false;
    private List<ProductDto> products = new();
    private List<WarehouseDto> warehouses = new();
    private List<RequestItemModel> originalItemsSnapshot = new();
    private bool lookupsLoaded;

    protected override async Task OnInitializedAsync()
    {
        await LoadLookupsAsync();
        await LoadRequestDetails();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (originalRequest?.Id != Id)
        {
            await LoadLookupsAsync();
            await LoadRequestDetails();
        }
    }

    private async Task LoadRequestDetails()
    {
        loading = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            var response = await RequestService.GetRequestByIdAsync(Id);
            
            if (response.Success && response.Data != null)
            {
                originalRequest = response.Data;

                // Initialize edit model with current values
                editRequest = new EditRequestModel
                {
                    Title = originalRequest.Title,
                    Description = originalRequest.Description,
                    Items = originalRequest.Items.Select(item => new RequestItemModel
                    {
                        ProductId = item.ProductId,
                        WarehouseId = item.WarehouseId,
                        Quantity = item.Quantity,
                        UnitPrice = item.UnitPrice,
                        Description = item.Description,
                        LocationId = item.LocationId
                    }).ToList()
                };

                if (editRequest.Items.Count == 0)
                {
                    editRequest.Items.Add(new RequestItemModel());
                }

                originalItemsSnapshot = editRequest.Items.Select(item => item.Clone()).ToList();
            }
            else
            {
                errorMessage = response.ErrorMessage ?? "Failed to load request details";
                originalRequest = null;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while loading request details: {ex.Message}";
            originalRequest = null;
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task HandleSubmit()
    {
        if (submitting || originalRequest == null || !HasChanges()) return;

        submitting = true;
        StateHasChanged();

        try
        {
            if (editRequest.Items.Count == 0)
            {
                NotificationService.Notify(new Radzen.NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Missing items",
                    Detail = "Add at least one item to the request before saving.",
                    Duration = 4000
                });
                return;
            }

            var dto = new UpdateRequestDto
            {
                Title = editRequest.Title?.Trim() ?? string.Empty,
                Description = string.IsNullOrWhiteSpace(editRequest.Description) ? null : editRequest.Description.Trim(),
                Items = editRequest.Items.Select(item => item.ToInputDto()).ToList()
            };

            var response = await RequestService.UpdateRequestAsync(originalRequest.Id, dto);

            if (response.Success && response.Data != null)
            {
                NotificationService.Notify(new Radzen.NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Request Updated",
                    Detail = $"Request '{response.Data.Title}' has been updated successfully",
                    Duration = 4000
                });

                // Navigate to the updated request details page
                Navigation.NavigateTo($"/requests/{response.Data.Id}");
            }
            else
            {
                NotificationService.Notify(new Radzen.NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Update Failed",
                    Detail = response.ErrorMessage ?? "Failed to update request",
                    Duration = 4000
                });
            }
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new Radzen.NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = $"An error occurred: {ex.Message}",
                Duration = 4000
            });
        }
        finally
        {
            submitting = false;
            StateHasChanged();
        }
    }

    private async Task LoadLookupsAsync()
    {
        if (lookupsLoaded)
        {
            return;
        }

        try
        {
            isLoadingLookups = true;
            products = await ProductService.GetAllProductsAsync();
            warehouses = await WarehouseService.GetAllWarehousesAsync();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new Radzen.NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Lookup Load Failed",
                Detail = $"Failed to load products or warehouses: {ex.Message}",
                Duration = 5000
            });
        }
        finally
        {
            isLoadingLookups = false;
            lookupsLoaded = true;
            StateHasChanged();
        }
    }

    private void AddItem()
    {
        editRequest.Items.Add(new RequestItemModel());
        StateHasChanged();
    }

    private void RemoveItem(RequestItemModel item)
    {
        editRequest.Items.Remove(item);
        StateHasChanged();
    }

    private bool CanEdit()
    {
        return originalRequest?.Status?.Equals("Draft", StringComparison.OrdinalIgnoreCase) == true;
    }

    private bool HasChanges()
    {
        if (originalRequest == null) return false;

        return editRequest.Title != originalRequest.Title ||
               editRequest.Description != originalRequest.Description ||
               !ItemsMatchOriginal();
    }

    private bool ItemsMatchOriginal()
    {
        if (originalItemsSnapshot.Count != editRequest.Items.Count)
        {
            return false;
        }

        for (var i = 0; i < editRequest.Items.Count; i++)
        {
            if (!editRequest.Items[i].Equals(originalItemsSnapshot[i]))
            {
                return false;
            }
        }

        return true;
    }

    public class EditRequestModel
    {
        [Required(ErrorMessage = "Title is required")]
        [StringLength(200, ErrorMessage = "Title cannot exceed 200 characters")]
        [MinLength(3, ErrorMessage = "Title must be at least 3 characters long")]
        public string Title { get; set; } = string.Empty;

        [StringLength(1000, ErrorMessage = "Description cannot exceed 1000 characters")]
        public string? Description { get; set; }

        [MinLength(1, ErrorMessage = "At least one request item is required")]
        public List<RequestItemModel> Items { get; set; } = new();
    }

    public class RequestItemModel
    {
        [Required(ErrorMessage = "Product is required")]
        public int? ProductId { get; set; }

        [Required(ErrorMessage = "Warehouse is required")]
        public int? WarehouseId { get; set; }

        [Range(1, int.MaxValue, ErrorMessage = "Quantity must be at least 1")]
        public int Quantity { get; set; } = 1;

        [Range(0, double.MaxValue, ErrorMessage = "Unit price cannot be negative")]
        public decimal? UnitPrice { get; set; }

        public string? Description { get; set; }

        public int? LocationId { get; set; }

        public RequestItemInputDto ToInputDto()
        {
            return new RequestItemInputDto
            {
                ProductId = ProductId ?? 0,
                WarehouseId = WarehouseId ?? 0,
                Quantity = Quantity,
                UnitPrice = UnitPrice,
                Description = string.IsNullOrWhiteSpace(Description) ? null : Description.Trim(),
                LocationId = LocationId
            };
        }

        public RequestItemModel Clone()
        {
            return new RequestItemModel
            {
                ProductId = ProductId,
                WarehouseId = WarehouseId,
                Quantity = Quantity,
                UnitPrice = UnitPrice,
                Description = Description,
                LocationId = LocationId
            };
        }

        public override bool Equals(object? obj)
        {
            if (obj is not RequestItemModel other)
            {
                return false;
            }

            return ProductId == other.ProductId &&
                   WarehouseId == other.WarehouseId &&
                   Quantity == other.Quantity &&
                   Nullable.Equals(UnitPrice, other.UnitPrice) &&
                   string.Equals(Description, other.Description, StringComparison.Ordinal) &&
                   LocationId == other.LocationId;
        }

        public override int GetHashCode()
        {
            return HashCode.Combine(ProductId, WarehouseId, Quantity, UnitPrice, Description, LocationId);
        }
    }
}