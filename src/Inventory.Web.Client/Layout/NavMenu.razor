@using Blazored.LocalStorage
@using Radzen
@using Radzen.Blazor

@inject AuthenticationStateProvider AuthStateProvider
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage

<RadzenMenu Class="rz-border-0" Orientation="Orientation.Vertical">
    <RadzenMenuItem Text="Главная" Icon="home" Path="/" />
    <RadzenMenuItem Text="Товары" Icon="inventory_2" Path="products" />
    <RadzenMenuItem Text="Склады" Icon="warehouse" Path="warehouses" />
    <RadzenMenuItem Text="Отчеты" Icon="insights" Path="reports" />

    <AuthorizeView Roles="Admin">
        <Authorized>
            <RadzenMenuItem Text="Администрирование" Icon="admin_panel_settings">
                <RadzenMenuItem Text="Справочники" Icon="settings" Path="admin/reference-data" />
                <RadzenMenuItem Text="Пользователи" Icon="group" Path="admin/users" />
                <RadzenMenuItem Text="Аудит" Icon="list_alt" Path="admin/audit-logs" />
                <RadzenMenuItem Text="Отладка" Icon="bug_report" Path="debug" />
            </RadzenMenuItem>
        </Authorized>
    </AuthorizeView>

    <RadzenMenuItem Text="Выйти" Icon="logout" Click="@(() => LogoutAsync())" />
</RadzenMenu>

@code {
    private List<NavMenuItem> MenuItems { get; set; } = new();

    private async Task LogoutAsync()
    {
        try
        {
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            if (!string.IsNullOrEmpty(token))
            {
                await AuthService.LogoutAsync(token);
            }

            await ClearAuthDataAsync();
            Navigation.NavigateTo("/login", true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logout error: {ex.Message}");
            await ClearAuthDataAsync();
            Navigation.NavigateTo("/login", true);
        }
    }

    private async Task ClearAuthDataAsync()
    {
        await LocalStorage.RemoveItemAsync("authToken");

        if (AuthStateProvider is ICustomAuthenticationStateProvider customProvider)
        {
            await customProvider.MarkUserAsLoggedOutAsync();
        }
    }

    protected override void OnInitialized()
    {
        // Reserved for future dynamic menu generation
        MenuItems = new();
    }
}

