@using Blazored.LocalStorage
@using Radzen
@using Radzen.Blazor
@using Microsoft.AspNetCore.Components.Routing

@inject AuthenticationStateProvider AuthStateProvider
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage

<div class="sidebar-nav-container">
    <div class="sidebar-scroll">
        <nav class="sidebar-nav">
            @foreach (var link in mainLinks)
            {
                <NavLink class="sidebar-link"
                         href="@link.Path"
                         Match="@link.Match">
                    <RadzenIcon Icon="@link.Icon" class="sidebar-link__icon" />
                    <span>@link.Text</span>
                </NavLink>
            }
        </nav>

        <AuthorizeView Roles="Admin">
            <Authorized>
                <div class="sidebar-section">
                    <span class="sidebar-section__title">Администрирование</span>
                    <nav class="sidebar-nav sidebar-nav--sub">
                        @foreach (var link in adminLinks)
                        {
                            <NavLink class="sidebar-link sidebar-link--sub"
                                     href="@link.Path"
                                     Match="@link.Match">
                                <RadzenIcon Icon="@link.Icon" class="sidebar-link__icon" />
                                <span>@link.Text</span>
                            </NavLink>
                        }
                    </nav>
                </div>
            </Authorized>
        </AuthorizeView>
    </div>

    <div class="sidebar-footer">
        <RadzenButton Text="Выйти"
                      Icon="logout"
                      ButtonStyle="ButtonStyle.Danger"
                      Variant="Variant.Outlined"
                      Size="ButtonSize.Medium"
                      Class="sidebar-logout"
                      Click="LogoutAsync" />
    </div>
</div>

@code {
    private readonly NavLinkItem[] mainLinks =
    {
        new("Главная", "home", "/", NavLinkMatch.All),
        new("Каталог", "inventory_2", "products"),
        new("Склады", "warehouse", "warehouses"),
        new("Заявки", "assignment", "requests"),
        new("Отчеты", "insights", "reports")
    };

    private readonly NavLinkItem[] adminLinks =
    {
        new("Справочники", "settings", "admin/reference-data"),
        new("Пользователи", "group", "admin/users"),
        new("Аудит", "list_alt", "admin/audit-logs"),
        new("Отладка", "bug_report", "debug")
    };

    private async Task LogoutAsync()
    {
        try
        {
            var token = await LocalStorage.GetItemAsStringAsync("authToken");
            if (!string.IsNullOrEmpty(token))
            {
                await AuthService.LogoutAsync(token);
            }

            await ClearAuthDataAsync();
            Navigation.NavigateTo("/login", true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logout error: {ex.Message}");
            await ClearAuthDataAsync();
            Navigation.NavigateTo("/login", true);
        }
    }

    private async Task ClearAuthDataAsync()
    {
        await LocalStorage.RemoveItemAsync("authToken");

        if (AuthStateProvider is ICustomAuthenticationStateProvider customProvider)
        {
            await customProvider.MarkUserAsLoggedOutAsync();
        }
    }

    private sealed record NavLinkItem(string Text, string Icon, string Path, NavLinkMatch Match = NavLinkMatch.Prefix);
}


