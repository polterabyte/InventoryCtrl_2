@using Inventory.Web.Client.Components
@using Inventory.Shared.Interfaces
@using Inventory.Shared.Components
@using Inventory.Shared.Models
@implements IDisposable
@inject IThemeService ThemeService
@inject ICultureService CultureService
@inject IJSRuntime JSRuntime

<script src="_content/Radzen.Blazor/Radzen.Blazor.js?v=@(typeof(Radzen.Colors).Assembly.GetName().Version)"></script>
<RadzenTheme Theme="@currentTheme" @rendermode="InteractiveAuto" />

@* Accessibility helpers for screen readers *@
<AccessibilityHelpers @ref="accessibilityHelpers" />

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly" AdditionalAssemblies="new[] { typeof(Inventory.UI.Pages.Login).Assembly, typeof(Inventory.Web.Client.Pages.Requests.Index).Assembly }">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <PageTitle>@GetNotFoundTitle()</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <div role="alert" 
                     aria-live="assertive"
                     lang="@CultureService.CurrentCulture.Name"
                     dir="@(CultureService.CurrentCulture.TextInfo.IsRightToLeft ? "rtl" : "ltr")">
                    <h1>@GetNotFoundTitle()</h1>
                    <p>@GetNotFoundMessage()</p>
                </div>
            </LayoutView>
        </NotFound>
    </Router>
    
    @* SignalR Initializer - runs in background *@
    <SignalRInitializer />
</CascadingAuthenticationState>

@code {
    private string currentTheme = "material";
    private AccessibilityHelpers? accessibilityHelpers;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Initialize theme service
            await ThemeService.InitializeThemeAsync();
            
            // Get current theme
            currentTheme = ThemeService.GetCurrentTheme();
            
            // Subscribe to theme changes
            ThemeService.ThemeChanged += OnThemeChanged;
            
            // Subscribe to culture changes for accessibility updates
            CultureService.CultureChanged += OnCultureChanged;
            
            // Set initial document language
            await UpdateDocumentLanguageAsync();
        }
        catch (Exception ex)
        {
            // Log error and use default theme
            Console.WriteLine($"Failed to initialize app: {ex.Message}");
            currentTheme = "material";
        }
    }
    
    private void OnThemeChanged(object? sender, ThemeChangedEventArgs e)
    {
        currentTheme = e.ThemeName;
        InvokeAsync(StateHasChanged);
    }
    
    private async void OnCultureChanged(object? sender, System.Globalization.CultureInfo newCulture)
    {
        await InvokeAsync(async () =>
        {
            await UpdateDocumentLanguageAsync();
            
            // Announce language change to screen readers
            var cultureName = newCulture.Name switch
            {
                "ru-RU" => "Russian",
                "de-DE" => "German", 
                _ => "English"
            };
            
            if (accessibilityHelpers != null)
            {
                await accessibilityHelpers.AnnounceAsync(
                    GetLanguageChangeAnnouncement(cultureName), true);
            }
            
            StateHasChanged();
        });
    }
    
    private async Task UpdateDocumentLanguageAsync()
    {
        try
        {
            var culture = CultureService.CurrentCulture;
            var direction = culture.TextInfo.IsRightToLeft ? "rtl" : "ltr";
            
            await JSRuntime.InvokeVoidAsync("eval", $@"
                document.documentElement.setAttribute('lang', '{culture.Name}');
                document.documentElement.setAttribute('dir', '{direction}');
            ");
        }
        catch
        {
            // Silently handle errors
        }
    }
    
    private string GetNotFoundTitle()
    {
        return CultureService.CurrentCulture.Name switch
        {
            "ru-RU" => "Страница не найдена",
            "de-DE" => "Seite nicht gefunden",
            _ => "Page Not Found"
        };
    }
    
    private string GetNotFoundMessage()
    {
        return CultureService.CurrentCulture.Name switch
        {
            "ru-RU" => "К сожалению, по этому адресу ничего нет.",
            "de-DE" => "Leider gibt es unter dieser Adresse nichts.",
            _ => "Sorry, there's nothing at this address."
        };
    }
    
    private string GetLanguageChangeAnnouncement(string languageName)
    {
        return CultureService.CurrentCulture.Name switch
        {
            "ru-RU" => $"Язык интерфейса изменён на {languageName}",
            "de-DE" => $"Sprache der Benutzeroberfläche wurde auf {languageName} geändert",
            _ => $"Interface language changed to {languageName}"
        };
    }
    
    public void Dispose()
    {
        if (ThemeService != null)
        {
            ThemeService.ThemeChanged -= OnThemeChanged;
        }
        
        if (CultureService != null)
        {
            CultureService.CultureChanged -= OnCultureChanged;
        }
    }
}
