@using Inventory.Shared.Models
@using Inventory.Shared.Services
@using Microsoft.JSInterop
@using Radzen
@using Radzen.Blazor
@inject INotificationService NotificationService
@inject IJSRuntime JSRuntime

<RadzenCard Style="max-height: 500px;">
    <!-- Header -->
    <RadzenStack Orientation="Orientation.Horizontal"
                 AlignItems="AlignItems.Center"
                 JustifyContent="JustifyContent.SpaceBetween"
                 Gap="1rem">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
            <RadzenIcon Icon="notifications" Style="color: var(--rz-primary);" />
            <RadzenText TextStyle="TextStyle.H6">Notifications</RadzenText>
            @if (unreadCount > 0)
            {
                <RadzenBadge Text="@unreadCount.ToString()"
                            BadgeStyle="BadgeStyle.Danger"
                            Style="margin-left: 0.5rem;" />
            }
        </RadzenStack>

        @if (notifications.Any())
        {
            <RadzenButton Text="Mark All Read"
                         Size="ButtonSize.Small"
                         ButtonStyle="ButtonStyle.Light"
                         Variant="Variant.Outlined"
                         Click="MarkAllAsRead" />
        }
    </RadzenStack>

    <!-- Notifications List -->
    <RadzenStack Orientation="Orientation.Vertical" Style="max-height: 400px; overflow-y: auto;">
        @if (notifications.Any())
        {
            @foreach (var notification in notifications)
            {
                <RadzenCard Style="@GetNotificationCardStyle(notification)"
                           class="notification-item"
                           Click="() => MarkAsRead(notification.Id)">
                    <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem">
                        <!-- Content -->
                        <RadzenStack Orientation="Orientation.Vertical" class="flex-grow-1" Gap="0.25rem">
                            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                                <RadzenText TextStyle="TextStyle.Body1" Style="font-weight: 600;">
                                    @notification.Title
                                </RadzenText>
                                @if (!notification.IsRead)
                                {
                                    <RadzenBadge BadgeStyle="BadgeStyle.Info" Style="width: 8px; height: 8px; min-width: 8px;" />
                                }
                            </RadzenStack>

                            <RadzenText TextStyle="TextStyle.Body2" Style="color: var(--rz-text-secondary);">
                                @notification.Message
                            </RadzenText>

                            <RadzenStack Orientation="Orientation.Horizontal"
                                       AlignItems="AlignItems.Center"
                                       JustifyContent="JustifyContent.SpaceBetween">
                                <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary);">
                                    <RadzenIcon Icon="schedule" Style="font-size: 0.75rem; margin-right: 0.25rem;" />
                                    @notification.CreatedAt.ToString("MMM dd, HH:mm")
                                </RadzenText>

                                @if (!string.IsNullOrEmpty(notification.ActionUrl))
                                {
                                    <RadzenButton Text="@(notification.ActionText ?? "View")"
                                                 Size="ButtonSize.Small"
                                                 ButtonStyle="ButtonStyle.Primary"
                                                 Variant="Variant.Outlined"
                                                 Style="margin-left: 0.5rem;" />
                                }
                            </RadzenStack>
                        </RadzenStack>

                        <!-- Actions -->
                        <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start">
                            <RadzenButton Icon="delete"
                                         Size="ButtonSize.Small"
                                         ButtonStyle="ButtonStyle.Danger"
                                         Variant="Variant.Text"
                                         Click="() => DeleteNotification(notification.Id)" />
                        </RadzenStack>
                    </RadzenStack>
                </RadzenCard>
            }
        }
        else
        {
            <!-- Empty state -->
            <RadzenStack Orientation="Orientation.Vertical"
                        AlignItems="AlignItems.Center"
                        Gap="1rem"
                        Style="padding: 2rem; color: var(--rz-text-secondary);">
                <RadzenIcon Icon="notifications_off" Style="font-size: 3rem;" />
                <RadzenText TextStyle="TextStyle.H6">No notifications yet</RadzenText>
            </RadzenStack>
        }
    </RadzenStack>
</RadzenCard>

@code {
    private List<NotificationDto> notifications = new();
    private int unreadCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadNotifications();
    }

    private Task LoadNotifications()
    {
        // This would typically call the API to get notifications
        // For now, we'll use empty list
        notifications = new List<NotificationDto>();
        unreadCount = 0;
        return Task.CompletedTask;
    }

    private Task MarkAsRead(int notificationId)
    {
        var notification = notifications.FirstOrDefault(n => n.Id == notificationId);
        if (notification != null)
        {
            notification.IsRead = true;
            unreadCount = notifications.Count(n => !n.IsRead);
            StateHasChanged();
        }
        return Task.CompletedTask;
    }

    private Task MarkAllAsRead()
    {
        foreach (var notification in notifications)
        {
            notification.IsRead = true;
        }
        unreadCount = 0;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task DeleteNotification(int notificationId)
    {
        var notification = notifications.FirstOrDefault(n => n.Id == notificationId);
        if (notification != null)
        {
            notifications.Remove(notification);
            unreadCount = notifications.Count(n => !n.IsRead);
            StateHasChanged();
        }
        return Task.CompletedTask;
    }

    private string GetNotificationCardStyle(NotificationDto notification)
    {
        if (!notification.IsRead)
        {
            return "background-color: var(--rz-info-lighter); border-left: 4px solid var(--rz-info);";
        }
        return "";
    }
}
