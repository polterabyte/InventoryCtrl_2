@using Inventory.Shared.Models
@using Inventory.Shared.Services
@using Microsoft.JSInterop
@inject INotificationService NotificationService
@inject IJSRuntime JSRuntime

<div class="notification-center">
    <div class="notification-header">
        <h5 class="mb-0">
            <i class="fas fa-bell"></i>
            Notifications
            @if (unreadCount > 0)
            {
                <span class="badge bg-danger ms-2">@unreadCount</span>
            }
        </h5>
        @if (notifications.Any())
        {
            <button class="btn btn-sm btn-outline-secondary" @onclick="MarkAllAsRead">
                Mark All Read
            </button>
        }
    </div>

    <div class="notification-list">
        @if (notifications.Any())
        {
            @foreach (var notification in notifications)
            {
                <div class="notification-item @(notification.IsRead ? "read" : "unread")" @onclick="() => MarkAsRead(notification.Id)">
                    <div class="notification-content">
                        <div class="notification-title">
                            @notification.Title
                            @if (!notification.IsRead)
                            {
                                <span class="unread-indicator"></span>
                            }
                        </div>
                        <div class="notification-message">@notification.Message</div>
                        <div class="notification-meta">
                            <small class="text-muted">
                                <i class="fas fa-clock"></i>
                                @notification.CreatedAt.ToString("MMM dd, HH:mm")
                            </small>
                            @if (!string.IsNullOrEmpty(notification.ActionUrl))
                            {
                                <a href="@notification.ActionUrl" class="btn btn-sm btn-outline-primary ms-2">
                                    @(notification.ActionText ?? "View")
                                </a>
                            }
                        </div>
                    </div>
                    <div class="notification-actions">
                        <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteNotification(notification.Id)" @onclick:stopPropagation="true">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="text-center text-muted py-4">
                <i class="fas fa-bell-slash fa-2x mb-2"></i>
                <p>No notifications yet</p>
            </div>
        }
    </div>
</div>

<style>
    .notification-center {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        max-height: 500px;
        overflow: hidden;
    }

    .notification-header {
        padding: 1rem;
        border-bottom: 1px solid #e9ecef;
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: #f8f9fa;
    }

    .notification-list {
        max-height: 400px;
        overflow-y: auto;
    }

    .notification-item {
        padding: 1rem;
        border-bottom: 1px solid #e9ecef;
        cursor: pointer;
        transition: background-color 0.2s;
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
    }

    .notification-item:hover {
        background-color: #f8f9fa;
    }

    .notification-item.unread {
        background-color: #e3f2fd;
        border-left: 4px solid #2196f3;
    }

    .notification-content {
        flex: 1;
    }

    .notification-title {
        font-weight: 600;
        margin-bottom: 0.25rem;
        display: flex;
        align-items: center;
    }

    .unread-indicator {
        width: 8px;
        height: 8px;
        background-color: #2196f3;
        border-radius: 50%;
        margin-left: 0.5rem;
    }

    .notification-message {
        color: #6c757d;
        margin-bottom: 0.5rem;
        line-height: 1.4;
    }

    .notification-meta {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .notification-actions {
        margin-left: 1rem;
    }

    .badge {
        font-size: 0.75rem;
    }
</style>

@code {
    private List<NotificationDto> notifications = new();
    private int unreadCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadNotifications();
    }

    private async Task LoadNotifications()
    {
        // This would typically call the API to get notifications
        // For now, we'll use empty list
        notifications = new List<NotificationDto>();
        unreadCount = 0;
    }

    private async Task MarkAsRead(int notificationId)
    {
        var notification = notifications.FirstOrDefault(n => n.Id == notificationId);
        if (notification != null)
        {
            notification.IsRead = true;
            unreadCount = notifications.Count(n => !n.IsRead);
            StateHasChanged();
        }
    }

    private async Task MarkAllAsRead()
    {
        foreach (var notification in notifications)
        {
            notification.IsRead = true;
        }
        unreadCount = 0;
        StateHasChanged();
    }

    private async Task DeleteNotification(int notificationId)
    {
        var notification = notifications.FirstOrDefault(n => n.Id == notificationId);
        if (notification != null)
        {
            notifications.Remove(notification);
            unreadCount = notifications.Count(n => !n.IsRead);
            StateHasChanged();
        }
    }
}
