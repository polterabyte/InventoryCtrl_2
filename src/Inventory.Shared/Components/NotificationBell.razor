@using Inventory.Shared.Services
@using Microsoft.JSInterop
@using Radzen
@using Radzen.Blazor
@inject INotificationApiService NotificationApiService
@inject IJSRuntime JSRuntime

<div class="notification-bell">
    <RadzenButton Icon="notifications"
                 ButtonStyle="ButtonStyle.Light"
                 Variant="Variant.Outlined"
                 Click="ToggleNotificationCenter"
                 Style="position: relative;">
        @if (unreadCount > 0)
        {
            <RadzenBadge Text="@unreadCount.ToString()"
                        BadgeStyle="BadgeStyle.Danger"
                        Style="position: absolute; top: -8px; right: -8px; min-width: 20px; height: 20px; border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 0.75rem; padding: 0;" />
        }
    </RadzenButton>

    @if (showNotificationCenter)
    {
        <RadzenCard Style="position: absolute; top: 100%; right: 0; width: 350px; z-index: 1000; margin-top: 0.5rem;">
            <!-- Header -->
            <RadzenStack Orientation="Orientation.Horizontal"
                        AlignItems="AlignItems.Center"
                        JustifyContent="JustifyContent.SpaceBetween"
                        Gap="1rem"
                        Style="padding: 1rem; border-bottom: 1px solid var(--rz-border-light); background: var(--rz-background-light);">
                <RadzenText TextStyle="TextStyle.H6">Notifications</RadzenText>
                @if (unreadCount > 0)
                {
                    <RadzenButton Text="Mark All Read"
                                 Size="ButtonSize.Small"
                                 ButtonStyle="ButtonStyle.Primary"
                                 Variant="Variant.Outlined"
                                 Click="MarkAllAsRead" />
                }
            </RadzenStack>

            <!-- Notifications List -->
            <RadzenStack Orientation="Orientation.Vertical" Style="max-height: 300px; overflow-y: auto;">
                @if (notifications.Any())
                {
                    @foreach (var notification in notifications.Take(5))
                    {
                        <RadzenCard Style="@GetNotificationItemStyle(notification)"
                                   class="notification-item"
                                   Click="() => MarkAsRead(notification.Id)">
                            <RadzenStack Orientation="Orientation.Vertical" Gap="0.25rem">
                                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.5rem">
                                    <RadzenText TextStyle="TextStyle.Body2" Style="font-weight: 600; flex-grow: 1;">
                                        @notification.Title
                                    </RadzenText>
                                    @if (!notification.IsRead)
                                    {
                                        <RadzenBadge BadgeStyle="BadgeStyle.Info" Style="width: 6px; height: 6px; min-width: 6px;" />
                                    }
                                </RadzenStack>

                                <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary); line-height: 1.3;">
                                    @notification.Message
                                </RadzenText>

                                <RadzenText TextStyle="TextStyle.Caption" Style="color: var(--rz-text-secondary);">
                                    @GetRelativeTime(notification.CreatedAt)
                                </RadzenText>
                            </RadzenStack>
                        </RadzenCard>
                    }

                    @if (notifications.Count > 5)
                    {
                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Style="padding: 1rem;">
                            <RadzenButton Text="@GetViewAllButtonText()"
                                         Size="ButtonSize.Small"
                                         ButtonStyle="ButtonStyle.Light"
                                         Variant="Variant.Outlined"
                                         Style="width: 100%;" />
                        </RadzenStack>
                    }
                }
                else
                {
                    <RadzenStack Orientation="Orientation.Vertical"
                                AlignItems="AlignItems.Center"
                                Gap="1rem"
                                Style="padding: 2rem; color: var(--rz-text-secondary);">
                        <RadzenIcon Icon="notifications_off" Style="font-size: 2rem;" />
                        <RadzenText TextStyle="TextStyle.Body2">No notifications</RadzenText>
                    </RadzenStack>
                }
            </RadzenStack>
        </RadzenCard>
    }
</div>

@code {
    private bool showNotificationCenter = false;
    private List<NotificationDto> notifications = new();
    private int unreadCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadNotifications();
    }

    private async Task LoadNotifications()
    {
        try
        {
            var response = await NotificationApiService.GetUserNotificationsAsync(1, 10);
            if (response.Success && response.Data != null)
            {
                notifications = response.Data;
                unreadCount = notifications.Count(n => !n.IsRead);
            }
        }
        catch (Exception ex)
        {
            // Log error but don't break the UI
            Console.WriteLine($"Error loading notifications: {ex.Message}");
        }
    }

    private async Task ToggleNotificationCenter()
    {
        showNotificationCenter = !showNotificationCenter;
        if (showNotificationCenter)
        {
            await LoadNotifications();
        }
    }

    private async Task MarkAsRead(int notificationId)
    {
        try
        {
            var response = await NotificationApiService.MarkAsReadAsync(notificationId);
            if (response.Success)
            {
                var notification = notifications.FirstOrDefault(n => n.Id == notificationId);
                if (notification != null)
                {
                    notification.IsRead = true;
                    unreadCount = notifications.Count(n => !n.IsRead);
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error marking notification as read: {ex.Message}");
        }
    }

    private async Task MarkAllAsRead()
    {
        try
        {
            var response = await NotificationApiService.MarkAllAsReadAsync();
            if (response.Success)
            {
                foreach (var notification in notifications)
                {
                    notification.IsRead = true;
                }
                unreadCount = 0;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error marking all notifications as read: {ex.Message}");
        }
    }

    private string GetRelativeTime(DateTime dateTime)
    {
        var timeSpan = DateTime.UtcNow - dateTime;

        if (timeSpan.TotalMinutes < 1)
            return "Just now";
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes}m ago";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours}h ago";
        if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays}d ago";

        return dateTime.ToString("MMM dd");
    }

    private string GetNotificationItemStyle(NotificationDto notification)
    {
        if (!notification.IsRead)
        {
            return "background-color: var(--rz-info-lighter); border-left: 3px solid var(--rz-info);";
        }
        return "";
    }

    private string GetViewAllButtonText()
    {
        return $"View All ({notifications.Count})";
    }
}
