@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Json
@using Inventory.Shared.DTOs
@using Inventory.Shared.Interfaces
@inject HttpClient Http
@inject IAuthService AuthService

<h3>@Title</h3>

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label class="form-label">Логин:</label>
        <InputText class="form-control" @bind-Value="loginModel.Username" />
    </div>
    <div class="mb-3">
        <label class="form-label">Пароль:</label>
        <InputText class="form-control" @bind-Value="loginModel.Password" type="password" />
    </div>
    <div class="mb-3">
        <button type="submit" class="btn btn-primary" disabled="@isLoading">
            @if (isLoading)
            {
                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
            }
            Войти
        </button>
    </div>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">@errorMessage</div>
}

@if (ShowRegisterLink)
{
    <p>Нет аккаунта? <a href="@RegisterLink">Зарегистрироваться</a></p>
}

@code {
    [Parameter] public string Title { get; set; } = "Вход";
    [Parameter] public bool ShowRegisterLink { get; set; } = true;
    [Parameter] public string RegisterLink { get; set; } = "/register";
    [Parameter] public EventCallback<AuthResult> OnLoginSuccess { get; set; }
    [Parameter] public EventCallback<string> OnLoginError { get; set; }

    private LoginRequest loginModel = new() { Username = string.Empty, Password = string.Empty };
    private string? errorMessage;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        errorMessage = null;
        isLoading = true;

        try
        {
            var result = await AuthService.LoginAsync(loginModel);
            
            if (result.Success)
            {
                await OnLoginSuccess.InvokeAsync(result);
            }
            else
            {
                errorMessage = result.ErrorMessage ?? "Ошибка авторизации";
                await OnLoginError.InvokeAsync(errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка: {ex.Message}";
            await OnLoginError.InvokeAsync(errorMessage);
        }
        finally
        {
            isLoading = false;
        }
    }
}
