@using Inventory.Shared.DTOs
@using Inventory.Shared.Interfaces
@using Inventory.Shared.Services
@inject IProductService ProductService
@inject IErrorHandlingService ErrorHandlingService
@inject INotificationService NotificationService

<div class="d-flex justify-content-between align-items-center mb-3">
    <h3>Товары</h3>
    <button class="btn btn-primary" @onclick="OnAddProduct">
        <i class="bi bi-plus-circle"></i> Добавить товар
    </button>
</div>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Загрузка...</span>
        </div>
    </div>
}
else if (products.Any())
{
    <div class="row">
        @foreach (var product in products)
        {
            <div class="col-md-6 col-lg-4 mb-3">
                <ProductCard Product="product" 
                             OnEdit="EditProduct" 
                             OnDelete="DeleteProduct" />
            </div>
        }
    </div>
    
    @if (ShowPagination && totalPages > 1)
    {
        <nav aria-label="Навигация по страницам">
            <ul class="pagination justify-content-center">
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <a class="page-link" href="#" @onclick="() => ChangePage(currentPage - 1)">Предыдущая</a>
                </li>
                
                @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                {
                    <li class="page-item @(i == currentPage ? "active" : "")">
                        <a class="page-link" href="#" @onclick="() => ChangePage(i)">@i</a>
                    </li>
                }
                
                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <a class="page-link" href="#" @onclick="() => ChangePage(currentPage + 1)">Следующая</a>
                </li>
            </ul>
        </nav>
    }
}
else
{
    <div class="alert alert-info" role="alert">
        <i class="bi bi-info-circle"></i>
        Товары не найдены. <a href="#" @onclick="OnAddProduct">Добавить первый товар</a>
    </div>
}

@code {
    [Parameter] public bool ShowPagination { get; set; } = true;
    [Parameter] public int PageSize { get; set; } = 12;
    [Parameter] public EventCallback<ProductDto> OnProductEdit { get; set; }
    [Parameter] public EventCallback<ProductDto> OnProductDelete { get; set; }
    [Parameter] public EventCallback OnProductAdd { get; set; }

    private List<ProductDto> products = new();
    private bool isLoading = true;
    private int currentPage = 1;
    private int totalPages = 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        isLoading = true;
        try
        {
            products = await ProductService.GetAllProductsAsync();
            totalPages = (int)Math.Ceiling((double)products.Count / PageSize);
            
            if (products.Any())
            {
                NotificationService.ShowSuccess("Products Loaded", $"Successfully loaded {products.Count} products");
            }
        }
        catch (Exception ex)
        {
            await ErrorHandlingService.HandleErrorAsync(ex, "Loading products", new { PageSize, CurrentPage = currentPage });
            products = new List<ProductDto>(); // Set empty list on error
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task EditProduct(ProductDto product)
    {
        await OnProductEdit.InvokeAsync(product);
    }

    private async Task DeleteProduct(ProductDto product)
    {
        var success = await ErrorHandlingService.TryExecuteAsync(
            async () =>
            {
                var result = await ProductService.DeleteProductAsync(product.Id);
                if (result)
                {
                    await LoadProducts(); // Refresh list
                }
                return result;
            },
            "Deleting product",
            new { ProductId = product.Id, ProductName = product.Name }
        );

        await OnProductDelete.InvokeAsync(product);
    }

    private async Task OnAddProduct()
    {
        await OnProductAdd.InvokeAsync();
    }

    private async Task ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await LoadProducts();
        }
    }
}
