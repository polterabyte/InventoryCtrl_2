@using Inventory.Shared.Models
@using Inventory.Shared.Services
@using System.ComponentModel
@inject INotificationService NotificationService
@implements IDisposable

<div class="notification-container">
    @if (NotificationService.GetState().IsVisible)
    {
        @foreach (var notification in NotificationService.GetState().Notifications)
        {
            <ToastNotification 
                Notification="notification" 
                OnDismiss="HandleDismiss"
                OnRetry="HandleRetry" />
        }
    }
</div>


@code {
    private NotificationState? _state;

    protected override void OnInitialized()
    {
        _state = NotificationService.GetState();
        _state.PropertyChanged += OnStateChanged;
    }

    private void OnStateChanged(object? sender, PropertyChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void HandleDismiss(string notificationId)
    {
        NotificationService.RemoveNotification(notificationId);
    }

    private void HandleRetry()
    {
        // Retry logic is handled by the individual notification
    }

    public void Dispose()
    {
        if (_state != null)
        {
            _state.PropertyChanged -= OnStateChanged;
        }
    }
}
